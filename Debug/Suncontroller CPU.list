
Suncontroller CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a284  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800a424  0800a424  0001a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8a4  0800a8a4  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a4  0800a8a4  0001a8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800a8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030a0  200000a4  0800a950  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003144  0800a950  00023144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a7f4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b65  00000000  00000000  0005a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019637  00000000  00000000  0006142d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002230  00000000  00000000  0007aa68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000022f8  00000000  00000000  0007cc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00009eff  00000000  00000000  0007ef90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00022def  00000000  00000000  00088e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ab95e  00000000  00000000  000abc7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001575dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066b4  00000000  00000000  00157658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a40c 	.word	0x0800a40c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800a40c 	.word	0x0800a40c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <Config_CalculateCRC>:
		configuration.dummy = MAGIC_WORD;
		configuration.crc = Config_CalculateCRC();
	}
}

static uint32_t Config_CalculateCRC (void){
 8000dfc:	b508      	push	{r3, lr}
	return HAL_CRC_Calculate(&hcrc, (uint32_t*)&configuration, (CONFIG_BYTES_LEN - 2)/4);
 8000dfe:	220d      	movs	r2, #13
 8000e00:	4902      	ldr	r1, [pc, #8]	; (8000e0c <Config_CalculateCRC+0x10>)
 8000e02:	4803      	ldr	r0, [pc, #12]	; (8000e10 <Config_CalculateCRC+0x14>)
 8000e04:	f003 fbe7 	bl	80045d6 <HAL_CRC_Calculate>
}
 8000e08:	bd08      	pop	{r3, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200000c4 	.word	0x200000c4
 8000e10:	20002dc0 	.word	0x20002dc0

08000e14 <Config_CheckData>:

static CONFStatus_t Config_CheckData (void){
 8000e14:	b510      	push	{r4, lr}
	uint32_t readCRC, actualCRC;

	readCRC = configuration.crc;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <Config_CheckData+0x28>)
 8000e18:	6b5c      	ldr	r4, [r3, #52]	; 0x34
	actualCRC = Config_CalculateCRC();
 8000e1a:	f7ff ffef 	bl	8000dfc <Config_CalculateCRC>

	if(readCRC != actualCRC){
 8000e1e:	4284      	cmp	r4, r0
 8000e20:	d007      	beq.n	8000e32 <Config_CheckData+0x1e>
		if(configuration.dummy != MAGIC_WORD){
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <Config_CheckData+0x28>)
 8000e24:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8000e26:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d003      	beq.n	8000e36 <Config_CheckData+0x22>
			return CONF_ERR_NOCONF;
 8000e2e:	2000      	movs	r0, #0
		}
		return CONF_ERR_CRC;
	}else{
		return CONF_OK;
	}
}
 8000e30:	bd10      	pop	{r4, pc}
		return CONF_OK;
 8000e32:	2000      	movs	r0, #0
 8000e34:	e7fc      	b.n	8000e30 <Config_CheckData+0x1c>
		return CONF_ERR_CRC;
 8000e36:	2001      	movs	r0, #1
 8000e38:	e7fa      	b.n	8000e30 <Config_CheckData+0x1c>
 8000e3a:	bf00      	nop
 8000e3c:	200000c4 	.word	0x200000c4

08000e40 <Config_Init>:
CONFStatus_t Config_Init(I2C_HandleTypeDef* iic){
 8000e40:	b510      	push	{r4, lr}
	configuartionStatus = CONF_STAT_INIT;
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <Config_Init+0x38>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	701a      	strb	r2, [r3, #0]
	retval |= EE_Init(iic);
 8000e48:	f000 f858 	bl	8000efc <EE_Init>
 8000e4c:	4604      	mov	r4, r0
	retval |= EE_Read(&configuration, 0, CONFIG_BYTES_LEN);
 8000e4e:	2238      	movs	r2, #56	; 0x38
 8000e50:	2100      	movs	r1, #0
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <Config_Init+0x3c>)
 8000e54:	f000 f85c 	bl	8000f10 <EE_Read>
 8000e58:	4304      	orrs	r4, r0
 8000e5a:	b2e4      	uxtb	r4, r4
	retval |= Config_CheckData();
 8000e5c:	f7ff ffda 	bl	8000e14 <Config_CheckData>
 8000e60:	4320      	orrs	r0, r4
	if(retval == CONF_OK) configuartionStatus = CONF_STAT_LOADED;
 8000e62:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8000e66:	d003      	beq.n	8000e70 <Config_Init+0x30>
	else configuartionStatus = CONF_STAT_ERROR;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <Config_Init+0x38>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
}
 8000e6e:	bd10      	pop	{r4, pc}
	if(retval == CONF_OK) configuartionStatus = CONF_STAT_LOADED;
 8000e70:	4b01      	ldr	r3, [pc, #4]	; (8000e78 <Config_Init+0x38>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e7fa      	b.n	8000e6e <Config_Init+0x2e>
 8000e78:	200000c0 	.word	0x200000c0
 8000e7c:	200000c4 	.word	0x200000c4

08000e80 <Config_GetConfig>:
ConfigLoadStatus_t Config_GetConfigStatus(void){
	return configuartionStatus;
}

CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8000e80:	b1b0      	cbz	r0, 8000eb0 <Config_GetConfig+0x30>
CONFStatus_t Config_GetConfig (ConfigStruct_t* config){
 8000e82:	b4f0      	push	{r4, r5, r6, r7}
 8000e84:	4604      	mov	r4, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8000e86:	4b0d      	ldr	r3, [pc, #52]	; (8000ebc <Config_GetConfig+0x3c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b99b      	cbnz	r3, 8000eb4 <Config_GetConfig+0x34>
		memcpy(config, &configuration, CONFIG_BYTES_LEN);
 8000e8c:	4d0c      	ldr	r5, [pc, #48]	; (8000ec0 <Config_GetConfig+0x40>)
 8000e8e:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8000e92:	462e      	mov	r6, r5
 8000e94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e96:	6020      	str	r0, [r4, #0]
 8000e98:	6061      	str	r1, [r4, #4]
 8000e9a:	60a2      	str	r2, [r4, #8]
 8000e9c:	60e3      	str	r3, [r4, #12]
 8000e9e:	4635      	mov	r5, r6
 8000ea0:	3410      	adds	r4, #16
 8000ea2:	42be      	cmp	r6, r7
 8000ea4:	d1f5      	bne.n	8000e92 <Config_GetConfig+0x12>
 8000ea6:	cd03      	ldmia	r5!, {r0, r1}
 8000ea8:	6020      	str	r0, [r4, #0]
 8000eaa:	6061      	str	r1, [r4, #4]
		return CONF_OK;
 8000eac:	2000      	movs	r0, #0
 8000eae:	e002      	b.n	8000eb6 <Config_GetConfig+0x36>
	if(config == NULL) return CONF_ERR_NULL;
 8000eb0:	2003      	movs	r0, #3
	}
	return CONF_ERR_NOCONF;
}
 8000eb2:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8000eb4:	2000      	movs	r0, #0
}
 8000eb6:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200000c0 	.word	0x200000c0
 8000ec0:	200000c4 	.word	0x200000c4

08000ec4 <Config_GetRegConfig>:
	}
	return CONF_ERR_NOCONF;
}

CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
	if(config == NULL) return CONF_ERR_NULL;
 8000ec4:	b190      	cbz	r0, 8000eec <Config_GetRegConfig+0x28>
CONFStatus_t Config_GetRegConfig (RegulationConfig_t* config){
 8000ec6:	b430      	push	{r4, r5}
 8000ec8:	4605      	mov	r5, r0

	if(configuartionStatus == CONF_STAT_LOADED){
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <Config_GetRegConfig+0x30>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b97b      	cbnz	r3, 8000ef0 <Config_GetRegConfig+0x2c>
		memcpy(config, &configuration.RegulationConfig, REG_CONFIG_BYTES_LEN);
 8000ed0:	4c09      	ldr	r4, [pc, #36]	; (8000ef8 <Config_GetRegConfig+0x34>)
 8000ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed4:	6028      	str	r0, [r5, #0]
 8000ed6:	6069      	str	r1, [r5, #4]
 8000ed8:	60aa      	str	r2, [r5, #8]
 8000eda:	60eb      	str	r3, [r5, #12]
 8000edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ede:	6128      	str	r0, [r5, #16]
 8000ee0:	6169      	str	r1, [r5, #20]
 8000ee2:	61aa      	str	r2, [r5, #24]
 8000ee4:	61eb      	str	r3, [r5, #28]
		return CONF_OK;
 8000ee6:	2000      	movs	r0, #0
	}
	return CONF_ERR_NOCONF;
}
 8000ee8:	bc30      	pop	{r4, r5}
 8000eea:	4770      	bx	lr
	if(config == NULL) return CONF_ERR_NULL;
 8000eec:	2003      	movs	r0, #3
}
 8000eee:	4770      	bx	lr
	return CONF_ERR_NOCONF;
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e7f9      	b.n	8000ee8 <Config_GetRegConfig+0x24>
 8000ef4:	200000c0 	.word	0x200000c0
 8000ef8:	200000c4 	.word	0x200000c4

08000efc <EE_Init>:
#include "stm32f4xx_hal_i2c.h"

I2C_HandleTypeDef* ee_iic;

EE_StatusTypeDef EE_Init (I2C_HandleTypeDef* hi2c){
	if(hi2c != NULL){
 8000efc:	b118      	cbz	r0, 8000f06 <EE_Init+0xa>
		ee_iic = hi2c;
 8000efe:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <EE_Init+0x10>)
 8000f00:	6010      	str	r0, [r2, #0]
		return EE_OK;
 8000f02:	2000      	movs	r0, #0
 8000f04:	4770      	bx	lr
	}
	return EE_ERR_NULL;
 8000f06:	2001      	movs	r0, #1
}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20002a60 	.word	0x20002a60

08000f10 <EE_Read>:

EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
	HAL_StatusTypeDef i2cStatus;
	uint8_t* dataBuf;

	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8000f10:	b1d8      	cbz	r0, 8000f4a <EE_Read+0x3a>
EE_StatusTypeDef EE_Read (void* data, uint8_t addr, uint32_t len){
 8000f12:	b510      	push	{r4, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	4604      	mov	r4, r0
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8000f18:	b912      	cbnz	r2, 8000f20 <EE_Read+0x10>
 8000f1a:	2001      	movs	r0, #1
	}else if(i2cStatus == HAL_ERROR){
		return EE_ERR_TIMEOUT;
	}else if(i2cStatus == HAL_BUSY){
		return EE_ERR_BUSY;
	}
}
 8000f1c:	b004      	add	sp, #16
 8000f1e:	bd10      	pop	{r4, pc}
 8000f20:	4613      	mov	r3, r2
 8000f22:	460a      	mov	r2, r1
	i2cStatus= HAL_I2C_Mem_Read(ee_iic, EE_ADDR, addr, 1, dataBuf, len, EE_BYTE_WRITE_TIME * (len + 2));
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <EE_Read+0x48>)
 8000f26:	6808      	ldr	r0, [r1, #0]
 8000f28:	b299      	uxth	r1, r3
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	9101      	str	r1, [sp, #4]
 8000f32:	9400      	str	r4, [sp, #0]
 8000f34:	2301      	movs	r3, #1
 8000f36:	21a0      	movs	r1, #160	; 0xa0
 8000f38:	f004 fa8a 	bl	8005450 <HAL_I2C_Mem_Read>
	if(i2cStatus == HAL_OK){
 8000f3c:	b138      	cbz	r0, 8000f4e <EE_Read+0x3e>
	}else if(i2cStatus == HAL_ERROR){
 8000f3e:	2801      	cmp	r0, #1
 8000f40:	d007      	beq.n	8000f52 <EE_Read+0x42>
	}else if(i2cStatus == HAL_BUSY){
 8000f42:	2802      	cmp	r0, #2
 8000f44:	d1ea      	bne.n	8000f1c <EE_Read+0xc>
		return EE_ERR_BUSY;
 8000f46:	2000      	movs	r0, #0
 8000f48:	e7e8      	b.n	8000f1c <EE_Read+0xc>
	if(data == NULL || len <= 0 ) return EE_ERR_NULL;
 8000f4a:	2001      	movs	r0, #1
}
 8000f4c:	4770      	bx	lr
		return EE_OK;
 8000f4e:	2000      	movs	r0, #0
 8000f50:	e7e4      	b.n	8000f1c <EE_Read+0xc>
		return EE_ERR_TIMEOUT;
 8000f52:	2002      	movs	r0, #2
 8000f54:	e7e2      	b.n	8000f1c <EE_Read+0xc>
 8000f56:	bf00      	nop
 8000f58:	20002a60 	.word	0x20002a60

08000f5c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000f62:	4c16      	ldr	r4, [pc, #88]	; (8000fbc <WIZCHIP_READ+0x60>)
 8000f64:	68e3      	ldr	r3, [r4, #12]
 8000f66:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f68:	6963      	ldr	r3, [r4, #20]
 8000f6a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f6e:	b9b3      	cbnz	r3, 8000f9e <WIZCHIP_READ+0x42>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f70:	4c12      	ldr	r4, [pc, #72]	; (8000fbc <WIZCHIP_READ+0x60>)
 8000f72:	6a23      	ldr	r3, [r4, #32]
 8000f74:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8000f78:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f7a:	6a23      	ldr	r3, [r4, #32]
 8000f7c:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8000f80:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f82:	6a23      	ldr	r3, [r4, #32]
 8000f84:	b2e8      	uxtb	r0, r5
 8000f86:	4798      	blx	r3
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000f88:	4c0c      	ldr	r4, [pc, #48]	; (8000fbc <WIZCHIP_READ+0x60>)
 8000f8a:	69e3      	ldr	r3, [r4, #28]
 8000f8c:	4798      	blx	r3
 8000f8e:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8000f90:	69a3      	ldr	r3, [r4, #24]
 8000f92:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000f94:	6923      	ldr	r3, [r4, #16]
 8000f96:	4798      	blx	r3
   return ret;
}
 8000f98:	4628      	mov	r0, r5
 8000f9a:	b003      	add	sp, #12
 8000f9c:	bd30      	pop	{r4, r5, pc}
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0e5      	beq.n	8000f70 <WIZCHIP_READ+0x14>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000fa4:	0c2a      	lsrs	r2, r5, #16
 8000fa6:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000faa:	0a2a      	lsrs	r2, r5, #8
 8000fac:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000fb0:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	a801      	add	r0, sp, #4
 8000fb8:	4798      	blx	r3
 8000fba:	e7e5      	b.n	8000f88 <WIZCHIP_READ+0x2c>
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460e      	mov	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000fc8:	4d16      	ldr	r5, [pc, #88]	; (8001024 <WIZCHIP_WRITE+0x64>)
 8000fca:	68eb      	ldr	r3, [r5, #12]
 8000fcc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000fce:	696b      	ldr	r3, [r5, #20]
 8000fd0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000fd2:	f044 0404 	orr.w	r4, r4, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000fd6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000fd8:	b1a3      	cbz	r3, 8001004 <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000fda:	0c22      	lsrs	r2, r4, #16
 8000fdc:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000fe0:	0a22      	lsrs	r2, r4, #8
 8000fe2:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000fe6:	f88d 4006 	strb.w	r4, [sp, #6]
		spi_data[3] = wb;
 8000fea:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000fee:	2104      	movs	r1, #4
 8000ff0:	eb0d 0001 	add.w	r0, sp, r1
 8000ff4:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000ff6:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <WIZCHIP_WRITE+0x64>)
 8000ff8:	69a3      	ldr	r3, [r4, #24]
 8000ffa:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ffc:	6923      	ldr	r3, [r4, #16]
 8000ffe:	4798      	blx	r3
}
 8001000:	b002      	add	sp, #8
 8001002:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001004:	6a2b      	ldr	r3, [r5, #32]
 8001006:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800100a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800100c:	6a2b      	ldr	r3, [r5, #32]
 800100e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001012:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001014:	6a2b      	ldr	r3, [r5, #32]
 8001016:	b2e0      	uxtb	r0, r4
 8001018:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800101a:	6a2b      	ldr	r3, [r5, #32]
 800101c:	4630      	mov	r0, r6
 800101e:	4798      	blx	r3
 8001020:	e7e9      	b.n	8000ff6 <WIZCHIP_WRITE+0x36>
 8001022:	bf00      	nop
 8001024:	20000004 	.word	0x20000004

08001028 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	4604      	mov	r4, r0
 800102e:	460e      	mov	r6, r1
 8001030:	4615      	mov	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001032:	4f1c      	ldr	r7, [pc, #112]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	b96b      	cbnz	r3, 800105c <WIZCHIP_READ_BUF+0x34>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001040:	4f18      	ldr	r7, [pc, #96]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001048:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001050:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	b2e0      	uxtb	r0, r4
 8001056:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001058:	2400      	movs	r4, #0
 800105a:	e019      	b.n	8001090 <WIZCHIP_READ_BUF+0x68>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800105c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105e:	2b00      	cmp	r3, #0
 8001060:	d0ee      	beq.n	8001040 <WIZCHIP_READ_BUF+0x18>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001062:	0c22      	lsrs	r2, r4, #16
 8001064:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001068:	0a22      	lsrs	r2, r4, #8
 800106a:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800106e:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8001072:	2103      	movs	r1, #3
 8001074:	a801      	add	r0, sp, #4
 8001076:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	4629      	mov	r1, r5
 800107e:	4630      	mov	r0, r6
 8001080:	4798      	blx	r3
 8001082:	e007      	b.n	8001094 <WIZCHIP_READ_BUF+0x6c>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	4798      	blx	r3
 800108a:	5530      	strb	r0, [r6, r4]
		for(i = 0; i < len; i++)
 800108c:	3401      	adds	r4, #1
 800108e:	b2a4      	uxth	r4, r4
 8001090:	42ac      	cmp	r4, r5
 8001092:	d3f7      	bcc.n	8001084 <WIZCHIP_READ_BUF+0x5c>
   }

   WIZCHIP.CS._deselect();
 8001094:	4c03      	ldr	r4, [pc, #12]	; (80010a4 <WIZCHIP_READ_BUF+0x7c>)
 8001096:	69a3      	ldr	r3, [r4, #24]
 8001098:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800109a:	6923      	ldr	r3, [r4, #16]
 800109c:	4798      	blx	r3
}
 800109e:	b003      	add	sp, #12
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000004 	.word	0x20000004

080010a8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b083      	sub	sp, #12
 80010ac:	4604      	mov	r4, r0
 80010ae:	460f      	mov	r7, r1
 80010b0:	4616      	mov	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80010b2:	4d1b      	ldr	r5, [pc, #108]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 80010b4:	68eb      	ldr	r3, [r5, #12]
 80010b6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80010b8:	696b      	ldr	r3, [r5, #20]
 80010ba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80010bc:	f044 0404 	orr.w	r4, r4, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80010c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010c2:	b1b3      	cbz	r3, 80010f2 <WIZCHIP_WRITE_BUF+0x4a>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80010c4:	0c22      	lsrs	r2, r4, #16
 80010c6:	f88d 2004 	strb.w	r2, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80010ca:	0a22      	lsrs	r2, r4, #8
 80010cc:	f88d 2005 	strb.w	r2, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80010d0:	f88d 4006 	strb.w	r4, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80010d4:	2103      	movs	r1, #3
 80010d6:	a801      	add	r0, sp, #4
 80010d8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	4631      	mov	r1, r6
 80010e0:	4638      	mov	r0, r7
 80010e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80010e4:	4c0e      	ldr	r4, [pc, #56]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 80010e6:	69a3      	ldr	r3, [r4, #24]
 80010e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80010ea:	6923      	ldr	r3, [r4, #16]
 80010ec:	4798      	blx	r3
}
 80010ee:	b003      	add	sp, #12
 80010f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80010f2:	6a2b      	ldr	r3, [r5, #32]
 80010f4:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80010f8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80010fa:	6a2b      	ldr	r3, [r5, #32]
 80010fc:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001100:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001102:	6a2b      	ldr	r3, [r5, #32]
 8001104:	b2e0      	uxtb	r0, r4
 8001106:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001108:	2400      	movs	r4, #0
 800110a:	e005      	b.n	8001118 <WIZCHIP_WRITE_BUF+0x70>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <WIZCHIP_WRITE_BUF+0x78>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	5d38      	ldrb	r0, [r7, r4]
 8001112:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001114:	3401      	adds	r4, #1
 8001116:	b2a4      	uxth	r4, r4
 8001118:	42b4      	cmp	r4, r6
 800111a:	d3f7      	bcc.n	800110c <WIZCHIP_WRITE_BUF+0x64>
 800111c:	e7e2      	b.n	80010e4 <WIZCHIP_WRITE_BUF+0x3c>
 800111e:	bf00      	nop
 8001120:	20000004 	.word	0x20000004

08001124 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001128:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 800112a:	2500      	movs	r5, #0
 800112c:	e001      	b.n	8001132 <getSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
 800112e:	42a5      	cmp	r5, r4
 8001130:	d024      	beq.n	800117c <getSn_TX_FSR+0x58>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001132:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001136:	f108 0801 	add.w	r8, r8, #1
 800113a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800113e:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
 8001142:	4630      	mov	r0, r6
 8001144:	f7ff ff0a 	bl	8000f5c <WIZCHIP_READ>
 8001148:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800114a:	0224      	lsls	r4, r4, #8
 800114c:	b2a4      	uxth	r4, r4
 800114e:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
 8001152:	4640      	mov	r0, r8
 8001154:	f7ff ff02 	bl	8000f5c <WIZCHIP_READ>
 8001158:	fa14 f480 	uxtah	r4, r4, r0
 800115c:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 800115e:	2c00      	cmp	r4, #0
 8001160:	d0e5      	beq.n	800112e <getSn_TX_FSR+0xa>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001162:	4630      	mov	r0, r6
 8001164:	f7ff fefa 	bl	8000f5c <WIZCHIP_READ>
 8001168:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800116a:	022d      	lsls	r5, r5, #8
 800116c:	b2ad      	uxth	r5, r5
 800116e:	4640      	mov	r0, r8
 8001170:	f7ff fef4 	bl	8000f5c <WIZCHIP_READ>
 8001174:	fa15 f580 	uxtah	r5, r5, r0
 8001178:	b2ad      	uxth	r5, r5
 800117a:	e7d8      	b.n	800112e <getSn_TX_FSR+0xa>
   return val;
}
 800117c:	4628      	mov	r0, r5
 800117e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001182 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001186:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
 8001188:	2500      	movs	r5, #0
 800118a:	e001      	b.n	8001190 <getSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
 800118c:	42a5      	cmp	r5, r4
 800118e:	d024      	beq.n	80011da <getSn_RX_RSR+0x58>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001190:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8001194:	f108 0801 	add.w	r8, r8, #1
 8001198:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800119c:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
 80011a0:	4630      	mov	r0, r6
 80011a2:	f7ff fedb 	bl	8000f5c <WIZCHIP_READ>
 80011a6:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80011a8:	0224      	lsls	r4, r4, #8
 80011aa:	b2a4      	uxth	r4, r4
 80011ac:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
 80011b0:	4640      	mov	r0, r8
 80011b2:	f7ff fed3 	bl	8000f5c <WIZCHIP_READ>
 80011b6:	fa14 f480 	uxtah	r4, r4, r0
 80011ba:	b2a4      	uxth	r4, r4
      if (val1 != 0)
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d0e5      	beq.n	800118c <getSn_RX_RSR+0xa>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80011c0:	4630      	mov	r0, r6
 80011c2:	f7ff fecb 	bl	8000f5c <WIZCHIP_READ>
 80011c6:	b285      	uxth	r5, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80011c8:	022d      	lsls	r5, r5, #8
 80011ca:	b2ad      	uxth	r5, r5
 80011cc:	4640      	mov	r0, r8
 80011ce:	f7ff fec5 	bl	8000f5c <WIZCHIP_READ>
 80011d2:	fa15 f580 	uxtah	r5, r5, r0
 80011d6:	b2ad      	uxth	r5, r5
 80011d8:	e7d8      	b.n	800118c <getSn_RX_RSR+0xa>
   return val;
}
 80011da:	4628      	mov	r0, r5
 80011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080011e0 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 80011e0:	2808      	cmp	r0, #8
 80011e2:	d82e      	bhi.n	8001242 <close+0x62>
{
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4606      	mov	r6, r0
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80011e8:	0084      	lsls	r4, r0, #2
 80011ea:	3401      	adds	r4, #1
 80011ec:	00e4      	lsls	r4, r4, #3
 80011ee:	f504 7580 	add.w	r5, r4, #256	; 0x100
 80011f2:	2110      	movs	r1, #16
 80011f4:	4628      	mov	r0, r5
 80011f6:	f7ff fee3 	bl	8000fc0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80011fa:	4628      	mov	r0, r5
 80011fc:	f7ff feae 	bl	8000f5c <WIZCHIP_READ>
 8001200:	2800      	cmp	r0, #0
 8001202:	d1fa      	bne.n	80011fa <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001204:	211f      	movs	r1, #31
 8001206:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800120a:	f7ff fed9 	bl	8000fc0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800120e:	2301      	movs	r3, #1
 8001210:	40b3      	lsls	r3, r6
 8001212:	43db      	mvns	r3, r3
 8001214:	b21b      	sxth	r3, r3
 8001216:	490c      	ldr	r1, [pc, #48]	; (8001248 <close+0x68>)
 8001218:	880a      	ldrh	r2, [r1, #0]
 800121a:	401a      	ands	r2, r3
 800121c:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <close+0x6c>)
 8001220:	8811      	ldrh	r1, [r2, #0]
 8001222:	400b      	ands	r3, r1
 8001224:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	4a09      	ldr	r2, [pc, #36]	; (8001250 <close+0x70>)
 800122a:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
	sock_pack_info[sn] = 0;
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <close+0x74>)
 8001230:	5593      	strb	r3, [r2, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001232:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001236:	f7ff fe91 	bl	8000f5c <WIZCHIP_READ>
 800123a:	2800      	cmp	r0, #0
 800123c:	d1f9      	bne.n	8001232 <close+0x52>
	return SOCK_OK;
 800123e:	2001      	movs	r0, #1
}
 8001240:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
 8001242:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001246:	4770      	bx	lr
 8001248:	200000fc 	.word	0x200000fc
 800124c:	200000fe 	.word	0x200000fe
 8001250:	20000108 	.word	0x20000108
 8001254:	20000100 	.word	0x20000100

08001258 <socket>:
	CHECK_SOCKNUM();
 8001258:	2808      	cmp	r0, #8
 800125a:	f200 8093 	bhi.w	8001384 <socket+0x12c>
{
 800125e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	4605      	mov	r5, r0
 8001266:	460f      	mov	r7, r1
 8001268:	4690      	mov	r8, r2
 800126a:	461e      	mov	r6, r3
	switch(protocol)
 800126c:	2901      	cmp	r1, #1
 800126e:	d062      	beq.n	8001336 <socket+0xde>
 8001270:	2900      	cmp	r1, #0
 8001272:	f000 808a 	beq.w	800138a <socket+0x132>
 8001276:	2904      	cmp	r1, #4
 8001278:	f200 8087 	bhi.w	800138a <socket+0x132>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800127c:	f016 0f04 	tst.w	r6, #4
 8001280:	f040 8086 	bne.w	8001390 <socket+0x138>
	if(flag != 0)
 8001284:	b11e      	cbz	r6, 800128e <socket+0x36>
   	switch(protocol)
 8001286:	2f01      	cmp	r7, #1
 8001288:	d062      	beq.n	8001350 <socket+0xf8>
 800128a:	2f02      	cmp	r7, #2
 800128c:	d066      	beq.n	800135c <socket+0x104>
	close(sn);
 800128e:	4628      	mov	r0, r5
 8001290:	f7ff ffa6 	bl	80011e0 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8001294:	00ac      	lsls	r4, r5, #2
 8001296:	3401      	adds	r4, #1
 8001298:	00e4      	lsls	r4, r4, #3
 800129a:	f026 010f 	bic.w	r1, r6, #15
 800129e:	b249      	sxtb	r1, r1
 80012a0:	4339      	orrs	r1, r7
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff fe8b 	bl	8000fc0 <WIZCHIP_WRITE>
	if(!port)
 80012aa:	f1b8 0f00 	cmp.w	r8, #0
 80012ae:	d10a      	bne.n	80012c6 <socket+0x6e>
	   port = sock_any_port++;
 80012b0:	4a3a      	ldr	r2, [pc, #232]	; (800139c <socket+0x144>)
 80012b2:	f8b2 8000 	ldrh.w	r8, [r2]
 80012b6:	f108 0301 	add.w	r3, r8, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80012be:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d059      	beq.n	800137a <socket+0x122>
   setSn_PORT(sn,port);	
 80012c6:	ea4f 2118 	mov.w	r1, r8, lsr #8
 80012ca:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 80012ce:	f7ff fe77 	bl	8000fc0 <WIZCHIP_WRITE>
 80012d2:	fa5f f188 	uxtb.w	r1, r8
 80012d6:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 80012da:	f7ff fe71 	bl	8000fc0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80012de:	f504 7780 	add.w	r7, r4, #256	; 0x100
 80012e2:	2101      	movs	r1, #1
 80012e4:	4638      	mov	r0, r7
 80012e6:	f7ff fe6b 	bl	8000fc0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80012ea:	4638      	mov	r0, r7
 80012ec:	f7ff fe36 	bl	8000f5c <WIZCHIP_READ>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d1fa      	bne.n	80012ea <socket+0x92>
   sock_io_mode &= ~(1 <<sn);
 80012f4:	2201      	movs	r2, #1
 80012f6:	40aa      	lsls	r2, r5
 80012f8:	43d2      	mvns	r2, r2
 80012fa:	b212      	sxth	r2, r2
 80012fc:	4928      	ldr	r1, [pc, #160]	; (80013a0 <socket+0x148>)
 80012fe:	880b      	ldrh	r3, [r1, #0]
 8001300:	4013      	ands	r3, r2
 8001302:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001304:	f006 0601 	and.w	r6, r6, #1
 8001308:	40ae      	lsls	r6, r5
 800130a:	431e      	orrs	r6, r3
 800130c:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 800130e:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <socket+0x14c>)
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	400a      	ands	r2, r1
 8001314:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <socket+0x150>)
 800131a:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 800131e:	4a23      	ldr	r2, [pc, #140]	; (80013ac <socket+0x154>)
 8001320:	5553      	strb	r3, [r2, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
 8001322:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8001326:	f7ff fe19 	bl	8000f5c <WIZCHIP_READ>
 800132a:	2800      	cmp	r0, #0
 800132c:	d0f9      	beq.n	8001322 <socket+0xca>
   return (int8_t)sn;
 800132e:	b268      	sxtb	r0, r5
}	   
 8001330:	b002      	add	sp, #8
 8001332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            getSIPR((uint8_t*)&taddr);
 8001336:	2204      	movs	r2, #4
 8001338:	eb0d 0102 	add.w	r1, sp, r2
 800133c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001340:	f7ff fe72 	bl	8001028 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001344:	9b01      	ldr	r3, [sp, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d198      	bne.n	800127c <socket+0x24>
 800134a:	f06f 0002 	mvn.w	r0, #2
 800134e:	e7ef      	b.n	8001330 <socket+0xd8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001350:	f016 0f21 	tst.w	r6, #33	; 0x21
 8001354:	d19b      	bne.n	800128e <socket+0x36>
 8001356:	f06f 0005 	mvn.w	r0, #5
 800135a:	e7e9      	b.n	8001330 <socket+0xd8>
   	      if(flag & SF_IGMP_VER2)
 800135c:	f016 0f20 	tst.w	r6, #32
 8001360:	d002      	beq.n	8001368 <socket+0x110>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001362:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001366:	d016      	beq.n	8001396 <socket+0x13e>
      	      if(flag & SF_UNI_BLOCK)
 8001368:	f016 0f10 	tst.w	r6, #16
 800136c:	d08f      	beq.n	800128e <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 800136e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8001372:	d18c      	bne.n	800128e <socket+0x36>
 8001374:	f06f 0005 	mvn.w	r0, #5
 8001378:	e7da      	b.n	8001330 <socket+0xd8>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <socket+0x144>)
 800137c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001380:	801a      	strh	r2, [r3, #0]
 8001382:	e7a0      	b.n	80012c6 <socket+0x6e>
	CHECK_SOCKNUM();
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
}	   
 8001388:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
 800138a:	f06f 0004 	mvn.w	r0, #4
 800138e:	e7cf      	b.n	8001330 <socket+0xd8>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001390:	f06f 0005 	mvn.w	r0, #5
 8001394:	e7cc      	b.n	8001330 <socket+0xd8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001396:	f06f 0005 	mvn.w	r0, #5
 800139a:	e7c9      	b.n	8001330 <socket+0xd8>
 800139c:	20000000 	.word	0x20000000
 80013a0:	200000fc 	.word	0x200000fc
 80013a4:	200000fe 	.word	0x200000fe
 80013a8:	20000108 	.word	0x20000108
 80013ac:	20000100 	.word	0x20000100

080013b0 <listen>:

int8_t listen(uint8_t sn)
{
	CHECK_SOCKNUM();
 80013b0:	2808      	cmp	r0, #8
 80013b2:	d82a      	bhi.n	800140a <listen+0x5a>
{
 80013b4:	b570      	push	{r4, r5, r6, lr}
 80013b6:	4605      	mov	r5, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
 80013b8:	0084      	lsls	r4, r0, #2
 80013ba:	3401      	adds	r4, #1
 80013bc:	00e4      	lsls	r4, r4, #3
 80013be:	4620      	mov	r0, r4
 80013c0:	f7ff fdcc 	bl	8000f5c <WIZCHIP_READ>
 80013c4:	f000 000f 	and.w	r0, r0, #15
 80013c8:	2801      	cmp	r0, #1
 80013ca:	d121      	bne.n	8001410 <listen+0x60>
	CHECK_SOCKINIT();
 80013cc:	f504 7640 	add.w	r6, r4, #768	; 0x300
 80013d0:	4630      	mov	r0, r6
 80013d2:	f7ff fdc3 	bl	8000f5c <WIZCHIP_READ>
 80013d6:	2813      	cmp	r0, #19
 80013d8:	d11d      	bne.n	8001416 <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
 80013da:	f504 7480 	add.w	r4, r4, #256	; 0x100
 80013de:	2102      	movs	r1, #2
 80013e0:	4620      	mov	r0, r4
 80013e2:	f7ff fded 	bl	8000fc0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff fdb8 	bl	8000f5c <WIZCHIP_READ>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1fa      	bne.n	80013e6 <listen+0x36>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80013f0:	4630      	mov	r0, r6
 80013f2:	f7ff fdb3 	bl	8000f5c <WIZCHIP_READ>
 80013f6:	2814      	cmp	r0, #20
 80013f8:	d101      	bne.n	80013fe <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
 80013fa:	2001      	movs	r0, #1
}
 80013fc:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
 80013fe:	4628      	mov	r0, r5
 8001400:	f7ff feee 	bl	80011e0 <close>
         return SOCKERR_SOCKCLOSED;
 8001404:	f06f 0003 	mvn.w	r0, #3
 8001408:	e7f8      	b.n	80013fc <listen+0x4c>
	CHECK_SOCKNUM();
 800140a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800140e:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001410:	f06f 0004 	mvn.w	r0, #4
 8001414:	e7f2      	b.n	80013fc <listen+0x4c>
	CHECK_SOCKINIT();
 8001416:	f06f 0002 	mvn.w	r0, #2
 800141a:	e7ef      	b.n	80013fc <listen+0x4c>

0800141c <getsockopt>:
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
 800141c:	2808      	cmp	r0, #8
 800141e:	f200 80a3 	bhi.w	8001568 <getsockopt+0x14c>
{
 8001422:	b570      	push	{r4, r5, r6, lr}
 8001424:	4615      	mov	r5, r2
 8001426:	4604      	mov	r4, r0
   switch(sotype)
 8001428:	290c      	cmp	r1, #12
 800142a:	f200 80a0 	bhi.w	800156e <getsockopt+0x152>
 800142e:	e8df f001 	tbb	[pc, r1]
 8001432:	1107      	.short	0x1107
 8001434:	4338251b 	.word	0x4338251b
 8001438:	6c67569e 	.word	0x6c67569e
 800143c:	7b71      	.short	0x7b71
 800143e:	8f          	.byte	0x8f
 800143f:	00          	.byte	0x00
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8001440:	0080      	lsls	r0, r0, #2
 8001442:	3001      	adds	r0, #1
 8001444:	00c0      	lsls	r0, r0, #3
 8001446:	f7ff fd89 	bl	8000f5c <WIZCHIP_READ>
 800144a:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800144e:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
 8001450:	2001      	movs	r0, #1
}
 8001452:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
 8001454:	0080      	lsls	r0, r0, #2
 8001456:	3001      	adds	r0, #1
 8001458:	00c0      	lsls	r0, r0, #3
 800145a:	f500 50b0 	add.w	r0, r0, #5632	; 0x1600
 800145e:	f7ff fd7d 	bl	8000f5c <WIZCHIP_READ>
 8001462:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001464:	2001      	movs	r0, #1
         break;
 8001466:	e7f4      	b.n	8001452 <getsockopt+0x36>
         *(uint8_t*) arg = getSn_TOS(sn);
 8001468:	0080      	lsls	r0, r0, #2
 800146a:	3001      	adds	r0, #1
 800146c:	00c0      	lsls	r0, r0, #3
 800146e:	f500 50a8 	add.w	r0, r0, #5376	; 0x1500
 8001472:	f7ff fd73 	bl	8000f5c <WIZCHIP_READ>
 8001476:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001478:	2001      	movs	r0, #1
         break;
 800147a:	e7ea      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_MSSR(sn);
 800147c:	0084      	lsls	r4, r0, #2
 800147e:	3401      	adds	r4, #1
 8001480:	00e4      	lsls	r4, r4, #3
 8001482:	f504 5090 	add.w	r0, r4, #4608	; 0x1200
 8001486:	f7ff fd69 	bl	8000f5c <WIZCHIP_READ>
 800148a:	b286      	uxth	r6, r0
 800148c:	0236      	lsls	r6, r6, #8
 800148e:	b2b6      	uxth	r6, r6
 8001490:	f504 5098 	add.w	r0, r4, #4864	; 0x1300
 8001494:	f7ff fd62 	bl	8000f5c <WIZCHIP_READ>
 8001498:	fa16 f080 	uxtah	r0, r6, r0
 800149c:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 800149e:	2001      	movs	r0, #1
         break;
 80014a0:	e7d7      	b.n	8001452 <getsockopt+0x36>
         getSn_DIPR(sn, (uint8_t*)arg);
 80014a2:	0080      	lsls	r0, r0, #2
 80014a4:	3001      	adds	r0, #1
 80014a6:	00c0      	lsls	r0, r0, #3
 80014a8:	2204      	movs	r2, #4
 80014aa:	4629      	mov	r1, r5
 80014ac:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 80014b0:	f7ff fdba 	bl	8001028 <WIZCHIP_READ_BUF>
   return SOCK_OK;
 80014b4:	2001      	movs	r0, #1
         break;
 80014b6:	e7cc      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_DPORT(sn);
 80014b8:	0084      	lsls	r4, r0, #2
 80014ba:	3401      	adds	r4, #1
 80014bc:	00e4      	lsls	r4, r4, #3
 80014be:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 80014c2:	f7ff fd4b 	bl	8000f5c <WIZCHIP_READ>
 80014c6:	b286      	uxth	r6, r0
 80014c8:	0236      	lsls	r6, r6, #8
 80014ca:	b2b6      	uxth	r6, r6
 80014cc:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
 80014d0:	f7ff fd44 	bl	8000f5c <WIZCHIP_READ>
 80014d4:	fa16 f080 	uxtah	r0, r6, r0
 80014d8:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 80014da:	2001      	movs	r0, #1
         break;
 80014dc:	e7b9      	b.n	8001452 <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 80014de:	0084      	lsls	r4, r0, #2
 80014e0:	3401      	adds	r4, #1
 80014e2:	00e4      	lsls	r4, r4, #3
 80014e4:	4620      	mov	r0, r4
 80014e6:	f7ff fd39 	bl	8000f5c <WIZCHIP_READ>
 80014ea:	f000 000f 	and.w	r0, r0, #15
 80014ee:	2801      	cmp	r0, #1
 80014f0:	d140      	bne.n	8001574 <getsockopt+0x158>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80014f2:	f504 503c 	add.w	r0, r4, #12032	; 0x2f00
 80014f6:	f7ff fd31 	bl	8000f5c <WIZCHIP_READ>
 80014fa:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 80014fc:	2001      	movs	r0, #1
         break;
 80014fe:	e7a8      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8001500:	f7ff fe10 	bl	8001124 <getSn_TX_FSR>
 8001504:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001506:	2001      	movs	r0, #1
         break;
 8001508:	e7a3      	b.n	8001452 <getsockopt+0x36>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 800150a:	f7ff fe3a 	bl	8001182 <getSn_RX_RSR>
 800150e:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 8001510:	2001      	movs	r0, #1
         break;
 8001512:	e79e      	b.n	8001452 <getsockopt+0x36>
         *(uint8_t*) arg = getSn_SR(sn);
 8001514:	0080      	lsls	r0, r0, #2
 8001516:	3001      	adds	r0, #1
 8001518:	00c0      	lsls	r0, r0, #3
 800151a:	f500 7040 	add.w	r0, r0, #768	; 0x300
 800151e:	f7ff fd1d 	bl	8000f5c <WIZCHIP_READ>
 8001522:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
 8001524:	2001      	movs	r0, #1
         break;
 8001526:	e794      	b.n	8001452 <getsockopt+0x36>
         if(getSn_MR(sn) & Sn_MR_TCP)
 8001528:	0080      	lsls	r0, r0, #2
 800152a:	3001      	adds	r0, #1
 800152c:	00c0      	lsls	r0, r0, #3
 800152e:	f7ff fd15 	bl	8000f5c <WIZCHIP_READ>
 8001532:	f010 0f01 	tst.w	r0, #1
 8001536:	d105      	bne.n	8001544 <getsockopt+0x128>
            *(uint16_t*)arg = sock_remained_size[sn];
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <getsockopt+0x164>)
 800153a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800153e:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
 8001540:	2001      	movs	r0, #1
 8001542:	e786      	b.n	8001452 <getsockopt+0x36>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fe1c 	bl	8001182 <getSn_RX_RSR>
 800154a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
 800154c:	2001      	movs	r0, #1
 800154e:	e780      	b.n	8001452 <getsockopt+0x36>
         if((getSn_MR(sn) == Sn_MR_TCP))
 8001550:	0080      	lsls	r0, r0, #2
 8001552:	3001      	adds	r0, #1
 8001554:	00c0      	lsls	r0, r0, #3
 8001556:	f7ff fd01 	bl	8000f5c <WIZCHIP_READ>
 800155a:	2801      	cmp	r0, #1
 800155c:	d00d      	beq.n	800157a <getsockopt+0x15e>
         *(uint8_t*)arg = sock_pack_info[sn];
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <getsockopt+0x168>)
 8001560:	5d1b      	ldrb	r3, [r3, r4]
 8001562:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
 8001564:	2001      	movs	r0, #1
         break;
 8001566:	e774      	b.n	8001452 <getsockopt+0x36>
   CHECK_SOCKNUM();
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
}
 800156c:	4770      	bx	lr
         return SOCKERR_SOCKOPT;
 800156e:	f06f 0001 	mvn.w	r0, #1
 8001572:	e76e      	b.n	8001452 <getsockopt+0x36>
         CHECK_SOCKMODE(Sn_MR_TCP);
 8001574:	f06f 0004 	mvn.w	r0, #4
 8001578:	e76b      	b.n	8001452 <getsockopt+0x36>
             return SOCKERR_SOCKMODE;
 800157a:	f06f 0004 	mvn.w	r0, #4
 800157e:	e768      	b.n	8001452 <getsockopt+0x36>
 8001580:	20000108 	.word	0x20000108
 8001584:	20000100 	.word	0x20000100

08001588 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001588:	4770      	bx	lr

0800158a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800158a:	4770      	bx	lr

0800158c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800158c:	4770      	bx	lr

0800158e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800158e:	4770      	bx	lr

08001590 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001590:	7800      	ldrb	r0, [r0, #0]
 8001592:	4770      	bx	lr

08001594 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001594:	7001      	strb	r1, [r0, #0]
 8001596:	4770      	bx	lr

08001598 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001598:	2000      	movs	r0, #0
 800159a:	4770      	bx	lr

0800159c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800159c:	4770      	bx	lr
	...

080015a0 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 80015a0:	b120      	cbz	r0, 80015ac <reg_wizchip_cs_cbfunc+0xc>
 80015a2:	b119      	cbz	r1, 80015ac <reg_wizchip_cs_cbfunc+0xc>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <reg_wizchip_cs_cbfunc+0x18>)
 80015a6:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80015a8:	6199      	str	r1, [r3, #24]
   }
}
 80015aa:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <reg_wizchip_cs_cbfunc+0x18>)
 80015ae:	4a03      	ldr	r2, [pc, #12]	; (80015bc <reg_wizchip_cs_cbfunc+0x1c>)
 80015b0:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <reg_wizchip_cs_cbfunc+0x20>)
 80015b4:	619a      	str	r2, [r3, #24]
 80015b6:	4770      	bx	lr
 80015b8:	20000004 	.word	0x20000004
 80015bc:	0800158d 	.word	0x0800158d
 80015c0:	0800158f 	.word	0x0800158f

080015c4 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <reg_wizchip_spi_cbfunc+0x24>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f413 7f00 	tst.w	r3, #512	; 0x200
 80015cc:	d0fa      	beq.n	80015c4 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
 80015ce:	b120      	cbz	r0, 80015da <reg_wizchip_spi_cbfunc+0x16>
 80015d0:	b119      	cbz	r1, 80015da <reg_wizchip_spi_cbfunc+0x16>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <reg_wizchip_spi_cbfunc+0x24>)
 80015d4:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80015d6:	6219      	str	r1, [r3, #32]
   }
}
 80015d8:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80015da:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <reg_wizchip_spi_cbfunc+0x24>)
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <reg_wizchip_spi_cbfunc+0x28>)
 80015de:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <reg_wizchip_spi_cbfunc+0x2c>)
 80015e2:	621a      	str	r2, [r3, #32]
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	20000004 	.word	0x20000004
 80015ec:	08001599 	.word	0x08001599
 80015f0:	0800159d 	.word	0x0800159d

080015f4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80015f4:	b500      	push	{lr}
 80015f6:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80015f8:	2206      	movs	r2, #6
 80015fa:	a901      	add	r1, sp, #4
 80015fc:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001600:	f7ff fd12 	bl	8001028 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001604:	2204      	movs	r2, #4
 8001606:	a905      	add	r1, sp, #20
 8001608:	f44f 7080 	mov.w	r0, #256	; 0x100
 800160c:	f7ff fd0c 	bl	8001028 <WIZCHIP_READ_BUF>
 8001610:	2204      	movs	r2, #4
 8001612:	a904      	add	r1, sp, #16
 8001614:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001618:	f7ff fd06 	bl	8001028 <WIZCHIP_READ_BUF>
 800161c:	2204      	movs	r2, #4
 800161e:	a903      	add	r1, sp, #12
 8001620:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001624:	f7ff fd00 	bl	8001028 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fcc8 	bl	8000fc0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fc93 	bl	8000f5c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001636:	2206      	movs	r2, #6
 8001638:	a901      	add	r1, sp, #4
 800163a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800163e:	f7ff fd33 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001642:	2204      	movs	r2, #4
 8001644:	a905      	add	r1, sp, #20
 8001646:	f44f 7080 	mov.w	r0, #256	; 0x100
 800164a:	f7ff fd2d 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800164e:	2204      	movs	r2, #4
 8001650:	a904      	add	r1, sp, #16
 8001652:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001656:	f7ff fd27 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800165a:	2204      	movs	r2, #4
 800165c:	a903      	add	r1, sp, #12
 800165e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001662:	f7ff fd21 	bl	80010a8 <WIZCHIP_WRITE_BUF>
}
 8001666:	b007      	add	sp, #28
 8001668:	f85d fb04 	ldr.w	pc, [sp], #4

0800166c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800166c:	b570      	push	{r4, r5, r6, lr}
 800166e:	4605      	mov	r5, r0
 8001670:	460e      	mov	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8001672:	f7ff ffbf 	bl	80015f4 <wizchip_sw_reset>
   if(txsize)
 8001676:	b1cd      	cbz	r5, 80016ac <wizchip_init+0x40>
   {
      tmp = 0;
 8001678:	2200      	movs	r2, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800167a:	4613      	mov	r3, r2
 800167c:	2b07      	cmp	r3, #7
 800167e:	dc07      	bgt.n	8001690 <wizchip_init+0x24>
		{
			tmp += txsize[i];
 8001680:	5ce9      	ldrb	r1, [r5, r3]
 8001682:	440a      	add	r2, r1
 8001684:	b252      	sxtb	r2, r2

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8001686:	2a10      	cmp	r2, #16
 8001688:	dc2f      	bgt.n	80016ea <wizchip_init+0x7e>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800168a:	3301      	adds	r3, #1
 800168c:	b25b      	sxtb	r3, r3
 800168e:	e7f5      	b.n	800167c <wizchip_init+0x10>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001690:	2400      	movs	r4, #0
 8001692:	e009      	b.n	80016a8 <wizchip_init+0x3c>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001694:	00a0      	lsls	r0, r4, #2
 8001696:	3001      	adds	r0, #1
 8001698:	00c0      	lsls	r0, r0, #3
 800169a:	5d29      	ldrb	r1, [r5, r4]
 800169c:	f500 50f8 	add.w	r0, r0, #7936	; 0x1f00
 80016a0:	f7ff fc8e 	bl	8000fc0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016a4:	3401      	adds	r4, #1
 80016a6:	b264      	sxtb	r4, r4
 80016a8:	2c07      	cmp	r4, #7
 80016aa:	ddf3      	ble.n	8001694 <wizchip_init+0x28>
		}

	#endif
   }

   if(rxsize)
 80016ac:	b15e      	cbz	r6, 80016c6 <wizchip_init+0x5a>
   {
      tmp = 0;
 80016ae:	2200      	movs	r2, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016b0:	4613      	mov	r3, r2
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	dc09      	bgt.n	80016ca <wizchip_init+0x5e>
		{
			tmp += rxsize[i];
 80016b6:	5cf1      	ldrb	r1, [r6, r3]
 80016b8:	440a      	add	r2, r1
 80016ba:	b252      	sxtb	r2, r2
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80016bc:	2a10      	cmp	r2, #16
 80016be:	dc17      	bgt.n	80016f0 <wizchip_init+0x84>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016c0:	3301      	adds	r3, #1
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	e7f5      	b.n	80016b2 <wizchip_init+0x46>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 80016c6:	2000      	movs	r0, #0
 80016c8:	e00e      	b.n	80016e8 <wizchip_init+0x7c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016ca:	2400      	movs	r4, #0
 80016cc:	e009      	b.n	80016e2 <wizchip_init+0x76>
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80016ce:	00a0      	lsls	r0, r4, #2
 80016d0:	3001      	adds	r0, #1
 80016d2:	00c0      	lsls	r0, r0, #3
 80016d4:	5d31      	ldrb	r1, [r6, r4]
 80016d6:	f500 50f0 	add.w	r0, r0, #7680	; 0x1e00
 80016da:	f7ff fc71 	bl	8000fc0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80016de:	3401      	adds	r4, #1
 80016e0:	b264      	sxtb	r4, r4
 80016e2:	2c07      	cmp	r4, #7
 80016e4:	ddf3      	ble.n	80016ce <wizchip_init+0x62>
   return 0;
 80016e6:	2000      	movs	r0, #0
}
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
 80016ea:	f04f 30ff 	mov.w	r0, #4294967295
 80016ee:	e7fb      	b.n	80016e8 <wizchip_init+0x7c>
			if(tmp > 16) return -1;
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	e7f8      	b.n	80016e8 <wizchip_init+0x7c>

080016f6 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80016f6:	b538      	push	{r3, r4, r5, lr}
   uint8_t ir  = (uint8_t)intr;
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80016f8:	0a05      	lsrs	r5, r0, #8
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80016fa:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
 80016fe:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001702:	f7ff fc5d 	bl	8000fc0 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001706:	2400      	movs	r4, #0
 8001708:	e001      	b.n	800170e <wizchip_clrinterrupt+0x18>
 800170a:	3401      	adds	r4, #1
 800170c:	b2e4      	uxtb	r4, r4
 800170e:	2c07      	cmp	r4, #7
 8001710:	d80d      	bhi.n	800172e <wizchip_clrinterrupt+0x38>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001712:	fa45 f304 	asr.w	r3, r5, r4
 8001716:	f013 0f01 	tst.w	r3, #1
 800171a:	d0f6      	beq.n	800170a <wizchip_clrinterrupt+0x14>
 800171c:	00a0      	lsls	r0, r4, #2
 800171e:	3001      	adds	r0, #1
 8001720:	00c0      	lsls	r0, r0, #3
 8001722:	211f      	movs	r1, #31
 8001724:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8001728:	f7ff fc4a 	bl	8000fc0 <WIZCHIP_WRITE>
 800172c:	e7ed      	b.n	800170a <wizchip_clrinterrupt+0x14>
   }

#endif   
}
 800172e:	bd38      	pop	{r3, r4, r5, pc}

08001730 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001730:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8001732:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001736:	f7ff fc11 	bl	8000f5c <WIZCHIP_READ>
 800173a:	f000 04f0 	and.w	r4, r0, #240	; 0xf0
   sir = getSIR();
 800173e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001742:	f7ff fc0b 	bl	8000f5c <WIZCHIP_READ>
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001746:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
 8001748:	0200      	lsls	r0, r0, #8
 800174a:	b280      	uxth	r0, r0
 800174c:	4420      	add	r0, r4
 800174e:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
 8001750:	bd10      	pop	{r4, pc}

08001752 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8001752:	b510      	push	{r4, lr}
   uint8_t imr  = (uint8_t)intr;
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8001754:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001756:	b2c1      	uxtb	r1, r0
 8001758:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800175c:	f7ff fc30 	bl	8000fc0 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001760:	4621      	mov	r1, r4
 8001762:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001766:	f7ff fc2b 	bl	8000fc0 <WIZCHIP_WRITE>
#endif   
}
 800176a:	bd10      	pop	{r4, pc}

0800176c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800176c:	b510      	push	{r4, lr}
 800176e:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8001770:	2206      	movs	r2, #6
 8001772:	4601      	mov	r1, r0
 8001774:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001778:	f7ff fc96 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800177c:	2204      	movs	r2, #4
 800177e:	f104 010e 	add.w	r1, r4, #14
 8001782:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001786:	f7ff fc8f 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800178a:	2204      	movs	r2, #4
 800178c:	f104 010a 	add.w	r1, r4, #10
 8001790:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001794:	f7ff fc88 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001798:	2204      	movs	r2, #4
 800179a:	1da1      	adds	r1, r4, #6
 800179c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80017a0:	f7ff fc82 	bl	80010a8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80017a4:	7ca2      	ldrb	r2, [r4, #18]
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <wizchip_setnetinfo+0x54>)
 80017a8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80017aa:	7ce2      	ldrb	r2, [r4, #19]
 80017ac:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80017ae:	7d22      	ldrb	r2, [r4, #20]
 80017b0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80017b2:	7d62      	ldrb	r2, [r4, #21]
 80017b4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80017b6:	7da2      	ldrb	r2, [r4, #22]
 80017b8:	4b02      	ldr	r3, [pc, #8]	; (80017c4 <wizchip_setnetinfo+0x58>)
 80017ba:	701a      	strb	r2, [r3, #0]
}
 80017bc:	bd10      	pop	{r4, pc}
 80017be:	bf00      	nop
 80017c0:	2000011c 	.word	0x2000011c
 80017c4:	20000118 	.word	0x20000118

080017c8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 80017cc:	2206      	movs	r2, #6
 80017ce:	4601      	mov	r1, r0
 80017d0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80017d4:	f7ff fc28 	bl	8001028 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80017d8:	2204      	movs	r2, #4
 80017da:	f104 010e 	add.w	r1, r4, #14
 80017de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017e2:	f7ff fc21 	bl	8001028 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80017e6:	2204      	movs	r2, #4
 80017e8:	f104 010a 	add.w	r1, r4, #10
 80017ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80017f0:	f7ff fc1a 	bl	8001028 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80017f4:	2204      	movs	r2, #4
 80017f6:	1da1      	adds	r1, r4, #6
 80017f8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80017fc:	f7ff fc14 	bl	8001028 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <wizchip_getnetinfo+0x54>)
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001806:	785a      	ldrb	r2, [r3, #1]
 8001808:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800180a:	789a      	ldrb	r2, [r3, #2]
 800180c:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800180e:	78db      	ldrb	r3, [r3, #3]
 8001810:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <wizchip_getnetinfo+0x58>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	75a3      	strb	r3, [r4, #22]
}
 8001818:	bd10      	pop	{r4, pc}
 800181a:	bf00      	nop
 800181c:	2000011c 	.word	0x2000011c
 8001820:	20000118 	.word	0x20000118

08001824 <mcp23017_init>:

#define I2C_TIMEOUT		10

void mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c, uint16_t addr)
{
	hdev->hi2c = hi2c;
 8001824:	6001      	str	r1, [r0, #0]
	hdev->addr = addr << 1;
 8001826:	0052      	lsls	r2, r2, #1
 8001828:	8082      	strh	r2, [r0, #4]
}
 800182a:	4770      	bx	lr

0800182c <mcp23017_read>:

HAL_StatusTypeDef mcp23017_read(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 800182c:	b510      	push	{r4, lr}
 800182e:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Read(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 8001830:	8884      	ldrh	r4, [r0, #4]
 8001832:	6800      	ldr	r0, [r0, #0]
 8001834:	230a      	movs	r3, #10
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2301      	movs	r3, #1
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	9200      	str	r2, [sp, #0]
 800183e:	460a      	mov	r2, r1
 8001840:	4621      	mov	r1, r4
 8001842:	f003 fe05 	bl	8005450 <HAL_I2C_Mem_Read>
}
 8001846:	b004      	add	sp, #16
 8001848:	bd10      	pop	{r4, pc}

0800184a <mcp23017_write>:

HAL_StatusTypeDef mcp23017_write(MCP23017_HandleTypeDef *hdev, uint16_t reg, uint8_t *data)
{
 800184a:	b510      	push	{r4, lr}
 800184c:	b084      	sub	sp, #16
	return HAL_I2C_Mem_Write(hdev->hi2c, hdev->addr, reg, 1, data, 1, I2C_TIMEOUT);
 800184e:	8884      	ldrh	r4, [r0, #4]
 8001850:	6800      	ldr	r0, [r0, #0]
 8001852:	230a      	movs	r3, #10
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	460a      	mov	r2, r1
 800185e:	4621      	mov	r1, r4
 8001860:	f003 fd42 	bl	80052e8 <HAL_I2C_Mem_Write>
}
 8001864:	b004      	add	sp, #16
 8001866:	bd10      	pop	{r4, pc}

08001868 <mcp23017_iodir>:

HAL_StatusTypeDef mcp23017_iodir(MCP23017_HandleTypeDef *hdev, uint8_t port, uint8_t iodir)
{
 8001868:	b500      	push	{lr}
 800186a:	b083      	sub	sp, #12
	uint8_t data[1] = {iodir};
 800186c:	ab02      	add	r3, sp, #8
 800186e:	f803 2d04 	strb.w	r2, [r3, #-4]!
	return mcp23017_write(hdev, REGISTER_IODIRA|port, data);
 8001872:	461a      	mov	r2, r3
 8001874:	f7ff ffe9 	bl	800184a <mcp23017_write>
}
 8001878:	b003      	add	sp, #12
 800187a:	f85d fb04 	ldr.w	pc, [sp], #4

0800187e <mcp23017_read_gpio>:
	uint8_t data[1] = {pu};
	return mcp23017_write(hdev, REGISTER_GPPUA|port, data);
}

HAL_StatusTypeDef mcp23017_read_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 800187e:	b530      	push	{r4, r5, lr}
 8001880:	b083      	sub	sp, #12
 8001882:	4604      	mov	r4, r0
 8001884:	460d      	mov	r5, r1
	uint8_t data[1];
	HAL_StatusTypeDef status;
	status = mcp23017_read(hdev, REGISTER_GPIOA|port, data);
 8001886:	aa01      	add	r2, sp, #4
 8001888:	f041 0112 	orr.w	r1, r1, #18
 800188c:	f7ff ffce 	bl	800182c <mcp23017_read>
	if (status == HAL_OK)
 8001890:	4603      	mov	r3, r0
 8001892:	b918      	cbnz	r0, 800189c <mcp23017_read_gpio+0x1e>
		hdev->gpio[port] = data[0];
 8001894:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001898:	442c      	add	r4, r5
 800189a:	71a2      	strb	r2, [r4, #6]
	return status;
}
 800189c:	4618      	mov	r0, r3
 800189e:	b003      	add	sp, #12
 80018a0:	bd30      	pop	{r4, r5, pc}

080018a2 <mcp23017_write_gpio>:

HAL_StatusTypeDef mcp23017_write_gpio(MCP23017_HandleTypeDef *hdev, uint8_t port)
{
 80018a2:	b500      	push	{lr}
 80018a4:	b083      	sub	sp, #12
	uint8_t data[1] = {hdev->gpio[port]};
 80018a6:	1843      	adds	r3, r0, r1
 80018a8:	799b      	ldrb	r3, [r3, #6]
 80018aa:	aa02      	add	r2, sp, #8
 80018ac:	f802 3d04 	strb.w	r3, [r2, #-4]!
	return mcp23017_write(hdev, REGISTER_GPIOA|port, data);
 80018b0:	f041 0112 	orr.w	r1, r1, #18
 80018b4:	f7ff ffc9 	bl	800184a <mcp23017_write>
}
 80018b8:	b003      	add	sp, #12
 80018ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080018c0 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80018c0:	b500      	push	{lr}
 80018c2:	b087      	sub	sp, #28
 80018c4:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80018c8:	2364      	movs	r3, #100	; 0x64
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2301      	movs	r3, #1
 80018ce:	f10d 0217 	add.w	r2, sp, #23
 80018d2:	f10d 010f 	add.w	r1, sp, #15
 80018d6:	4804      	ldr	r0, [pc, #16]	; (80018e8 <W25qxx_Spi+0x28>)
 80018d8:	f004 fee5 	bl	80066a6 <HAL_SPI_TransmitReceive>
	return ret;	
}
 80018dc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018e0:	b007      	add	sp, #28
 80018e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018e6:	bf00      	nop
 80018e8:	20002fd4 	.word	0x20002fd4

080018ec <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80018ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
  FLASH_SELECT;
 80018ee:	f000 f9ed 	bl	8001ccc <FLASH_ChipSelect>
  W25qxx_Spi(0x9F);
 80018f2:	209f      	movs	r0, #159	; 0x9f
 80018f4:	f7ff ffe4 	bl	80018c0 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80018f8:	20a5      	movs	r0, #165	; 0xa5
 80018fa:	f7ff ffe1 	bl	80018c0 <W25qxx_Spi>
 80018fe:	4606      	mov	r6, r0
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001900:	20a5      	movs	r0, #165	; 0xa5
 8001902:	f7ff ffdd 	bl	80018c0 <W25qxx_Spi>
 8001906:	4604      	mov	r4, r0
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001908:	20a5      	movs	r0, #165	; 0xa5
 800190a:	f7ff ffd9 	bl	80018c0 <W25qxx_Spi>
 800190e:	4605      	mov	r5, r0
  FLASH_DESELECT;
 8001910:	f000 f9ee 	bl	8001cf0 <FLASH_ChipDeselect>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001914:	0220      	lsls	r0, r4, #8
 8001916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
  return Temp;
}
 800191a:	4328      	orrs	r0, r5
 800191c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001920 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001920:	b510      	push	{r4, lr}
  FLASH_SELECT;
 8001922:	f000 f9d3 	bl	8001ccc <FLASH_ChipSelect>
  W25qxx_Spi(0x4B);
 8001926:	204b      	movs	r0, #75	; 0x4b
 8001928:	f7ff ffca 	bl	80018c0 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 800192c:	2400      	movs	r4, #0
 800192e:	e004      	b.n	800193a <W25qxx_ReadUniqID+0x1a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001930:	20a5      	movs	r0, #165	; 0xa5
 8001932:	f7ff ffc5 	bl	80018c0 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8001936:	3401      	adds	r4, #1
 8001938:	b2e4      	uxtb	r4, r4
 800193a:	2c03      	cmp	r4, #3
 800193c:	d9f8      	bls.n	8001930 <W25qxx_ReadUniqID+0x10>
	for(uint8_t	i=0;i<8;i++)
 800193e:	2400      	movs	r4, #0
 8001940:	e007      	b.n	8001952 <W25qxx_ReadUniqID+0x32>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001942:	20a5      	movs	r0, #165	; 0xa5
 8001944:	f7ff ffbc 	bl	80018c0 <W25qxx_Spi>
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <W25qxx_ReadUniqID+0x3c>)
 800194a:	4423      	add	r3, r4
 800194c:	7058      	strb	r0, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 800194e:	3401      	adds	r4, #1
 8001950:	b2e4      	uxtb	r4, r4
 8001952:	2c07      	cmp	r4, #7
 8001954:	d9f5      	bls.n	8001942 <W25qxx_ReadUniqID+0x22>
  FLASH_DESELECT;
 8001956:	f000 f9cb 	bl	8001cf0 <FLASH_ChipDeselect>
}
 800195a:	bd10      	pop	{r4, pc}
 800195c:	20002a64 	.word	0x20002a64

08001960 <W25qxx_ReadStatusRegister>:
  FLASH_DESELECT;
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8001960:	b510      	push	{r4, lr}
 8001962:	4604      	mov	r4, r0
	uint8_t	status=0;
	FLASH_SELECT;
 8001964:	f000 f9b2 	bl	8001ccc <FLASH_ChipSelect>
	if(SelectStatusRegister_1_2_3==1)
 8001968:	2c01      	cmp	r4, #1
 800196a:	d00f      	beq.n	800198c <W25qxx_ReadStatusRegister+0x2c>
	{
		W25qxx_Spi(0x05);
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister1 = status;
	}
	else if(SelectStatusRegister_1_2_3==2)
 800196c:	2c02      	cmp	r4, #2
 800196e:	d018      	beq.n	80019a2 <W25qxx_ReadStatusRegister+0x42>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
		w25qxx.StatusRegister2 = status;
	}
	else
	{
		W25qxx_Spi(0x15);
 8001970:	2015      	movs	r0, #21
 8001972:	f7ff ffa5 	bl	80018c0 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001976:	20a5      	movs	r0, #165	; 0xa5
 8001978:	f7ff ffa2 	bl	80018c0 <W25qxx_Spi>
 800197c:	4604      	mov	r4, r0
		w25qxx.StatusRegister3 = status;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <W25qxx_ReadStatusRegister+0x58>)
 8001980:	f883 0026 	strb.w	r0, [r3, #38]	; 0x26
	}	
	FLASH_DESELECT;
 8001984:	f000 f9b4 	bl	8001cf0 <FLASH_ChipDeselect>
	return status;
}
 8001988:	4620      	mov	r0, r4
 800198a:	bd10      	pop	{r4, pc}
		W25qxx_Spi(0x05);
 800198c:	2005      	movs	r0, #5
 800198e:	f7ff ff97 	bl	80018c0 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 8001992:	20a5      	movs	r0, #165	; 0xa5
 8001994:	f7ff ff94 	bl	80018c0 <W25qxx_Spi>
 8001998:	4604      	mov	r4, r0
		w25qxx.StatusRegister1 = status;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <W25qxx_ReadStatusRegister+0x58>)
 800199c:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
 80019a0:	e7f0      	b.n	8001984 <W25qxx_ReadStatusRegister+0x24>
		W25qxx_Spi(0x35);
 80019a2:	2035      	movs	r0, #53	; 0x35
 80019a4:	f7ff ff8c 	bl	80018c0 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);	
 80019a8:	20a5      	movs	r0, #165	; 0xa5
 80019aa:	f7ff ff89 	bl	80018c0 <W25qxx_Spi>
 80019ae:	4604      	mov	r4, r0
		w25qxx.StatusRegister2 = status;
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <W25qxx_ReadStatusRegister+0x58>)
 80019b2:	f883 0025 	strb.w	r0, [r3, #37]	; 0x25
 80019b6:	e7e5      	b.n	8001984 <W25qxx_ReadStatusRegister+0x24>
 80019b8:	20002a64 	.word	0x20002a64

080019bc <W25qxx_Init>:
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 FLASH_DESELECT;
}
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80019bc:	b510      	push	{r4, lr}
	w25qxx.Lock=1;	
 80019be:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <W25qxx_Init+0x10c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 80019c6:	e002      	b.n	80019ce <W25qxx_Init+0x12>
		W25qxx_Delay(1);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f005 ffd4 	bl	8007976 <osDelay>
	while(HAL_GetTick()<100)
 80019ce:	f002 fc0b 	bl	80041e8 <HAL_GetTick>
 80019d2:	2863      	cmp	r0, #99	; 0x63
 80019d4:	d9f8      	bls.n	80019c8 <W25qxx_Init+0xc>
  FLASH_DESELECT;
 80019d6:	f000 f98b 	bl	8001cf0 <FLASH_ChipDeselect>
  W25qxx_Delay(100);
 80019da:	2064      	movs	r0, #100	; 0x64
 80019dc:	f005 ffcb 	bl	8007976 <osDelay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 80019e0:	f7ff ff84 	bl	80018ec <W25qxx_ReadID>
	
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 80019e4:	b280      	uxth	r0, r0
 80019e6:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 80019ea:	3811      	subs	r0, #17
 80019ec:	2809      	cmp	r0, #9
 80019ee:	d866      	bhi.n	8001abe <W25qxx_Init+0x102>
 80019f0:	e8df f000 	tbb	[pc, r0]
 80019f4:	4d53595f 	.word	0x4d53595f
 80019f8:	343b4147 	.word	0x343b4147
 80019fc:	052d      	.short	0x052d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a00:	220a      	movs	r2, #10
 8001a02:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8001a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a08:	61da      	str	r2, [r3, #28]
				#endif
			w25qxx.Lock=0;	
			return false;
				
	}		
	w25qxx.PageSize=256;
 8001a0a:	4c2f      	ldr	r4, [pc, #188]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a10:	8163      	strh	r3, [r4, #10]
	w25qxx.SectorSize=0x1000;
 8001a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a16:	6123      	str	r3, [r4, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 8001a18:	69e3      	ldr	r3, [r4, #28]
 8001a1a:	011a      	lsls	r2, r3, #4
 8001a1c:	6162      	str	r2, [r4, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	0a1a      	lsrs	r2, r3, #8
 8001a22:	60e2      	str	r2, [r4, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 8001a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a28:	61a2      	str	r2, [r4, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8001a2a:	0a9b      	lsrs	r3, r3, #10
 8001a2c:	6223      	str	r3, [r4, #32]
	W25qxx_ReadUniqID();
 8001a2e:	f7ff ff77 	bl	8001920 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f7ff ff94 	bl	8001960 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7ff ff91 	bl	8001960 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f7ff ff8e 	bl	8001960 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;	
 8001a44:	2300      	movs	r3, #0
 8001a46:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return true;
 8001a4a:	2001      	movs	r0, #1
}	
 8001a4c:	bd10      	pop	{r4, pc}
			w25qxx.ID=W25Q256;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a50:	2209      	movs	r2, #9
 8001a52:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8001a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a58:	61da      	str	r2, [r3, #28]
		break;
 8001a5a:	e7d6      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q128;
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a5e:	2208      	movs	r2, #8
 8001a60:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8001a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a66:	61da      	str	r2, [r3, #28]
		break;
 8001a68:	e7cf      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q64;
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8001a70:	2280      	movs	r2, #128	; 0x80
 8001a72:	61da      	str	r2, [r3, #28]
		break;
 8001a74:	e7c9      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q32;
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a78:	2206      	movs	r2, #6
 8001a7a:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 8001a7c:	2240      	movs	r2, #64	; 0x40
 8001a7e:	61da      	str	r2, [r3, #28]
		break;
 8001a80:	e7c3      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q16;
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a84:	2205      	movs	r2, #5
 8001a86:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 8001a88:	2220      	movs	r2, #32
 8001a8a:	61da      	str	r2, [r3, #28]
		break;
 8001a8c:	e7bd      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q80;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a90:	2204      	movs	r2, #4
 8001a92:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 8001a94:	2210      	movs	r2, #16
 8001a96:	61da      	str	r2, [r3, #28]
		break;
 8001a98:	e7b7      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q40;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	61da      	str	r2, [r3, #28]
		break;
 8001aa4:	e7b1      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q20;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 8001aac:	2204      	movs	r2, #4
 8001aae:	61da      	str	r2, [r3, #28]
		break;
 8001ab0:	e7ab      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.ID=W25Q10;
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 8001ab8:	2202      	movs	r2, #2
 8001aba:	61da      	str	r2, [r3, #28]
		break;
 8001abc:	e7a5      	b.n	8001a0a <W25qxx_Init+0x4e>
			w25qxx.Lock=0;	
 8001abe:	2000      	movs	r0, #0
 8001ac0:	4b01      	ldr	r3, [pc, #4]	; (8001ac8 <W25qxx_Init+0x10c>)
 8001ac2:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
			return false;
 8001ac6:	e7c1      	b.n	8001a4c <W25qxx_Init+0x90>
 8001ac8:	20002a64 	.word	0x20002a64

08001acc <vModbusInit>:
#include "Modbus.h"

void vModbusInit (ModbusHandler *modbus, UART_HandleTypeDef *port, TickType_t timeout){
	modbus -> ModbusSerialPort = port;
 8001acc:	6001      	str	r1, [r0, #0]
	modbus -> timeout_t = timeout / portTICK_PERIOD_MS;
 8001ace:	6042      	str	r2, [r0, #4]
}
 8001ad0:	4770      	bx	lr

08001ad2 <uModbusCalculateCRC>:

uint16_t uModbusCalculateCRC (uint8_t frame_length, uint8_t *frame){
 8001ad2:	b430      	push	{r4, r5}
	uint16_t calculatedCRC = 0xFFFF;
	uint16_t CRChigh, CRClow;
	for(int i = 0; i < frame_length; i++){
 8001ad4:	2500      	movs	r5, #0
	uint16_t calculatedCRC = 0xFFFF;
 8001ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	for(int i = 0; i < frame_length; i++){
 8001ada:	e00d      	b.n	8001af8 <uModbusCalculateCRC+0x26>
		for(int j = 8; j > 0; j--){
			if(calculatedCRC & 0x0001){
				calculatedCRC >>= 1;
				calculatedCRC ^= 0xA001;
			}else{
				calculatedCRC >>= 1;
 8001adc:	085b      	lsrs	r3, r3, #1
		for(int j = 8; j > 0; j--){
 8001ade:	3a01      	subs	r2, #1
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	dd07      	ble.n	8001af4 <uModbusCalculateCRC+0x22>
			if(calculatedCRC & 0x0001){
 8001ae4:	f013 0f01 	tst.w	r3, #1
 8001ae8:	d0f8      	beq.n	8001adc <uModbusCalculateCRC+0xa>
				calculatedCRC ^= 0xA001;
 8001aea:	f24a 0401 	movw	r4, #40961	; 0xa001
 8001aee:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 8001af2:	e7f4      	b.n	8001ade <uModbusCalculateCRC+0xc>
			}
		}
		frame++;
 8001af4:	3101      	adds	r1, #1
	for(int i = 0; i < frame_length; i++){
 8001af6:	3501      	adds	r5, #1
 8001af8:	42a8      	cmp	r0, r5
 8001afa:	dd03      	ble.n	8001b04 <uModbusCalculateCRC+0x32>
		calculatedCRC ^= (*frame);
 8001afc:	780a      	ldrb	r2, [r1, #0]
 8001afe:	4053      	eors	r3, r2
		for(int j = 8; j > 0; j--){
 8001b00:	2208      	movs	r2, #8
 8001b02:	e7ed      	b.n	8001ae0 <uModbusCalculateCRC+0xe>
	}

	CRChigh = (calculatedCRC & 0x00FF) <<8;
 8001b04:	0218      	lsls	r0, r3, #8
 8001b06:	b280      	uxth	r0, r0
	CRClow = (calculatedCRC & 0xFF00) >>8;
	calculatedCRC = CRChigh + CRClow;
 8001b08:	eb00 2013 	add.w	r0, r0, r3, lsr #8

	//calculatedCRC = HAL_CRC_Calculate(&hcrc, frame, frame_length);
	return calculatedCRC;
}
 8001b0c:	b280      	uxth	r0, r0
 8001b0e:	bc30      	pop	{r4, r5}
 8001b10:	4770      	bx	lr

08001b12 <bModbusCheckCRC>:

uint8_t bModbusCheckCRC (uint8_t frame_length, uint8_t *frame){
 8001b12:	b570      	push	{r4, r5, r6, lr}
 8001b14:	4604      	mov	r4, r0
 8001b16:	460d      	mov	r5, r1
	uint16_t crc = uModbusCalculateCRC(frame_length - 2, frame);
 8001b18:	1e86      	subs	r6, r0, #2
 8001b1a:	b2f0      	uxtb	r0, r6
 8001b1c:	f7ff ffd9 	bl	8001ad2 <uModbusCalculateCRC>
	uint16_t frameCRC = (uint16_t)(*(frame + frame_length - 2));
 8001b20:	5daa      	ldrb	r2, [r5, r6]
	frameCRC <<= 8;
	frameCRC += *(frame + frame_length - 1);
 8001b22:	3c01      	subs	r4, #1
 8001b24:	5d2b      	ldrb	r3, [r5, r4]
 8001b26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001b2a:	b29b      	uxth	r3, r3

	if(crc == frameCRC){
 8001b2c:	4298      	cmp	r0, r3
 8001b2e:	d001      	beq.n	8001b34 <bModbusCheckCRC+0x22>
		return 1;
	}

	return 0;
 8001b30:	2000      	movs	r0, #0
}
 8001b32:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8001b34:	2001      	movs	r0, #1
 8001b36:	e7fc      	b.n	8001b32 <bModbusCheckCRC+0x20>

08001b38 <vModbusReadInputRegisters>:
		return Modbus_TIMEOUT;
	}
	return Modbus_CRCERR;
}

ModbusState vModbusReadInputRegisters (ModbusHandler *modbus, uint8_t slave_address, uint16_t first_register_address, uint16_t registers_count, uint8_t *response_frame){
 8001b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4606      	mov	r6, r0
 8001b42:	4689      	mov	r9, r1
 8001b44:	f8d7 8030 	ldr.w	r8, [r7, #48]	; 0x30
	uint8_t transmit_frame_buffer[8];
	uint16_t transmitCRC;
	uint8_t received_frame_length = (registers_count * 2) + 5;
 8001b48:	fa5f fe83 	uxtb.w	lr, r3
 8001b4c:	ea4f 044e 	mov.w	r4, lr, lsl #1
 8001b50:	b2e4      	uxtb	r4, r4
 8001b52:	3405      	adds	r4, #5
 8001b54:	b2e4      	uxtb	r4, r4
	uint8_t received_frame_buffer[received_frame_length];
 8001b56:	46a4      	mov	ip, r4
 8001b58:	1de1      	adds	r1, r4, #7
 8001b5a:	f401 71fc 	and.w	r1, r1, #504	; 0x1f8
 8001b5e:	ebad 0d01 	sub.w	sp, sp, r1
 8001b62:	466d      	mov	r5, sp
	uint32_t ulNotificationValue;
	for(int i = 0; i < received_frame_length; i++){
 8001b64:	2100      	movs	r1, #0
 8001b66:	e002      	b.n	8001b6e <vModbusReadInputRegisters+0x36>
		received_frame_buffer[i] = 0;
 8001b68:	2000      	movs	r0, #0
 8001b6a:	5468      	strb	r0, [r5, r1]
	for(int i = 0; i < received_frame_length; i++){
 8001b6c:	3101      	adds	r1, #1
 8001b6e:	458c      	cmp	ip, r1
 8001b70:	dcfa      	bgt.n	8001b68 <vModbusReadInputRegisters+0x30>

	}
	transmit_frame_buffer[0] = slave_address;
 8001b72:	f887 9000 	strb.w	r9, [r7]
	transmit_frame_buffer[1] = 0x04;
 8001b76:	2104      	movs	r1, #4
 8001b78:	7079      	strb	r1, [r7, #1]
	transmit_frame_buffer[2] = (uint8_t)(first_register_address >> 8);
 8001b7a:	0a11      	lsrs	r1, r2, #8
 8001b7c:	70b9      	strb	r1, [r7, #2]
	transmit_frame_buffer[3] = (uint8_t)first_register_address;
 8001b7e:	70fa      	strb	r2, [r7, #3]
	transmit_frame_buffer[4] = (uint8_t)(registers_count >> 8);
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	713b      	strb	r3, [r7, #4]
	transmit_frame_buffer[5] = (uint8_t)(registers_count);
 8001b84:	f887 e005 	strb.w	lr, [r7, #5]
	transmitCRC = uModbusCalculateCRC (6, transmit_frame_buffer);
 8001b88:	4639      	mov	r1, r7
 8001b8a:	2006      	movs	r0, #6
 8001b8c:	f7ff ffa1 	bl	8001ad2 <uModbusCalculateCRC>
	transmit_frame_buffer[6] = (transmitCRC >> 8);
 8001b90:	0a03      	lsrs	r3, r0, #8
 8001b92:	71bb      	strb	r3, [r7, #6]
	transmit_frame_buffer[7] = (uint8_t)(transmitCRC);
 8001b94:	71f8      	strb	r0, [r7, #7]

	//Wy�lij dane;
	HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_SET);
 8001b96:	2201      	movs	r2, #1
 8001b98:	2102      	movs	r1, #2
 8001b9a:	4829      	ldr	r0, [pc, #164]	; (8001c40 <vModbusReadInputRegisters+0x108>)
 8001b9c:	f003 f86a 	bl	8004c74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8001ba0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8001c44 <vModbusReadInputRegisters+0x10c>
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001baa:	4650      	mov	r0, sl
 8001bac:	f003 f862 	bl	8004c74 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_IT(modbus -> ModbusSerialPort, transmit_frame_buffer, 8);
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4639      	mov	r1, r7
 8001bb4:	6830      	ldr	r0, [r6, #0]
 8001bb6:	f005 fc74 	bl	80074a2 <HAL_UART_Transmit_IT>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8001bba:	6871      	ldr	r1, [r6, #4]
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f007 f9fd 	bl	8008fbc <ulTaskNotifyTake>
	HAL_UART_Receive_DMA(modbus -> ModbusSerialPort, received_frame_buffer, received_frame_length);
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	6830      	ldr	r0, [r6, #0]
 8001bc8:	f005 fc90 	bl	80074ec <HAL_UART_Receive_DMA>
	ulNotificationValue = ulTaskNotifyTake( pdTRUE, modbus->timeout_t );
 8001bcc:	6871      	ldr	r1, [r6, #4]
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f007 f9f4 	bl	8008fbc <ulTaskNotifyTake>
 8001bd4:	4683      	mov	fp, r0
	vTaskDelay(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f006 ff6c 	bl	8008ab4 <vTaskDelay>
	HAL_UART_AbortTransmit(modbus -> ModbusSerialPort);
 8001bdc:	6830      	ldr	r0, [r6, #0]
 8001bde:	f005 fcd9 	bl	8007594 <HAL_UART_AbortTransmit>
	HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be8:	4650      	mov	r0, sl
 8001bea:	f003 f843 	bl	8004c74 <HAL_GPIO_WritePin>
	if(ulNotificationValue){
 8001bee:	f1bb 0f00 	cmp.w	fp, #0
 8001bf2:	d019      	beq.n	8001c28 <vModbusReadInputRegisters+0xf0>
		if(bModbusCheckCRC(received_frame_length, received_frame_buffer)){
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff ff8b 	bl	8001b12 <bModbusCheckCRC>
 8001bfc:	b1e0      	cbz	r0, 8001c38 <vModbusReadInputRegisters+0x100>
			if(received_frame_buffer[0] == slave_address && received_frame_buffer[1] == 0x04){
 8001bfe:	782b      	ldrb	r3, [r5, #0]
 8001c00:	454b      	cmp	r3, r9
 8001c02:	d11b      	bne.n	8001c3c <vModbusReadInputRegisters+0x104>
 8001c04:	786b      	ldrb	r3, [r5, #1]
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d101      	bne.n	8001c0e <vModbusReadInputRegisters+0xd6>
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	e006      	b.n	8001c1c <vModbusReadInputRegisters+0xe4>
				return Modbus_OK;
			}
#ifdef __DEBUG
			printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
			return Modbus_CRCERR;
 8001c0e:	2002      	movs	r0, #2
 8001c10:	e00e      	b.n	8001c30 <vModbusReadInputRegisters+0xf8>
					*response_frame = received_frame_buffer[i + 3];
 8001c12:	1cd3      	adds	r3, r2, #3
 8001c14:	5ceb      	ldrb	r3, [r5, r3]
 8001c16:	f808 3b01 	strb.w	r3, [r8], #1
				for(int i = 0; i < received_frame_buffer[2] + 2; i ++){
 8001c1a:	3201      	adds	r2, #1
 8001c1c:	78ab      	ldrb	r3, [r5, #2]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf6      	blt.n	8001c12 <vModbusReadInputRegisters+0xda>
				return Modbus_OK;
 8001c24:	2000      	movs	r0, #0
 8001c26:	e003      	b.n	8001c30 <vModbusReadInputRegisters+0xf8>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_CRCERR;
	}else{
		HAL_UART_AbortReceive_IT(modbus -> ModbusSerialPort);
 8001c28:	6830      	ldr	r0, [r6, #0]
 8001c2a:	f005 fe25 	bl	8007878 <HAL_UART_AbortReceive_IT>
#ifdef __DEBUG
		printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
		return Modbus_TIMEOUT;
 8001c2e:	2001      	movs	r0, #1
	}
#ifdef __DEBUG
	printf("%d Modbus: no data from slave: %d\n", HAL_GetTick(), slave_address);
#endif
	return Modbus_CRCERR;
}
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return Modbus_CRCERR;
 8001c38:	2002      	movs	r0, #2
 8001c3a:	e7f9      	b.n	8001c30 <vModbusReadInputRegisters+0xf8>
			return Modbus_CRCERR;
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	e7f7      	b.n	8001c30 <vModbusReadInputRegisters+0xf8>
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020800 	.word	0x40020800

08001c48 <RB_CreateBuffer>:

RB_Status RB_CreateBuffer(RingBuffer *Buffer, uint8_t Size)
{
	//*Buffer = malloc(sizeof(RingBuffer) + (sizeof(uint8_t) * Size));

	if(Buffer == NULL)
 8001c48:	4603      	mov	r3, r0
 8001c4a:	b130      	cbz	r0, 8001c5a <RB_CreateBuffer+0x12>
	{
		return RB_NOTCREATED;
	}

	(Buffer)->Size = 32;
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	7002      	strb	r2, [r0, #0]
	(Buffer)->Head = 0;
 8001c50:	2000      	movs	r0, #0
 8001c52:	7058      	strb	r0, [r3, #1]
	(Buffer)->Tail = 0;
 8001c54:	7098      	strb	r0, [r3, #2]
	(Buffer)->Elements = 0;
 8001c56:	70d8      	strb	r0, [r3, #3]

	return RB_OK;
 8001c58:	4770      	bx	lr
		return RB_NOTCREATED;
 8001c5a:	2002      	movs	r0, #2
}
 8001c5c:	4770      	bx	lr

08001c5e <RB_WriteToBuffer>:

RB_Status RB_WriteToBuffer(RingBuffer *Buffer, uint8_t Data)
{
 8001c5e:	b430      	push	{r4, r5}
	uint8_t TempHead;

	TempHead = (Buffer->Head + 1) % Buffer->Size;
 8001c60:	7843      	ldrb	r3, [r0, #1]
 8001c62:	1c5d      	adds	r5, r3, #1
 8001c64:	7804      	ldrb	r4, [r0, #0]
 8001c66:	fb95 f2f4 	sdiv	r2, r5, r4
 8001c6a:	fb04 5212 	mls	r2, r4, r2, r5
 8001c6e:	b2d2      	uxtb	r2, r2

	if( TempHead == Buffer->Tail) // No room for new data
 8001c70:	7885      	ldrb	r5, [r0, #2]
 8001c72:	4295      	cmp	r5, r2
 8001c74:	d00e      	beq.n	8001c94 <RB_WriteToBuffer+0x36>
	{
		return RB_NOFREESPACE;
	}
	else
	{
		Buffer->Buffer[Buffer->Head] = Data;
 8001c76:	18c2      	adds	r2, r0, r3
 8001c78:	7111      	strb	r1, [r2, #4]

		Buffer->Head++;
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
		Buffer->Head %= Buffer->Size;
 8001c7e:	fbb3 f2f4 	udiv	r2, r3, r4
 8001c82:	fb04 3312 	mls	r3, r4, r2, r3
 8001c86:	7043      	strb	r3, [r0, #1]

		Buffer->Elements++;
 8001c88:	78c3      	ldrb	r3, [r0, #3]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	70c3      	strb	r3, [r0, #3]
	}

	return RB_OK;
 8001c8e:	2000      	movs	r0, #0
}
 8001c90:	bc30      	pop	{r4, r5}
 8001c92:	4770      	bx	lr
		return RB_NOFREESPACE;
 8001c94:	2003      	movs	r0, #3
 8001c96:	e7fb      	b.n	8001c90 <RB_WriteToBuffer+0x32>

08001c98 <RB_ReadFromBuffer>:

RB_Status RB_ReadFromBuffer(RingBuffer *Buffer, uint8_t *Data)
{
	if( Buffer->Tail == Buffer->Head) // No data to read
 8001c98:	7883      	ldrb	r3, [r0, #2]
 8001c9a:	7842      	ldrb	r2, [r0, #1]
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d010      	beq.n	8001cc2 <RB_ReadFromBuffer+0x2a>
	{
		return RB_NOELEMENTS;
	}
	else
	{
		*Data = Buffer->Buffer[Buffer->Tail];
 8001ca0:	4403      	add	r3, r0
 8001ca2:	791b      	ldrb	r3, [r3, #4]
 8001ca4:	700b      	strb	r3, [r1, #0]

		Buffer->Tail++;
 8001ca6:	7883      	ldrb	r3, [r0, #2]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b2db      	uxtb	r3, r3
		Buffer->Tail %= Buffer->Size;
 8001cac:	7801      	ldrb	r1, [r0, #0]
 8001cae:	fbb3 f2f1 	udiv	r2, r3, r1
 8001cb2:	fb01 3312 	mls	r3, r1, r2, r3
 8001cb6:	7083      	strb	r3, [r0, #2]

		Buffer->Elements--;
 8001cb8:	78c3      	ldrb	r3, [r0, #3]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	70c3      	strb	r3, [r0, #3]
	}
	return RB_OK;
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	4770      	bx	lr
		return RB_NOELEMENTS;
 8001cc2:	2004      	movs	r0, #4
}
 8001cc4:	4770      	bx	lr

08001cc6 <RB_ElementsAvailable>:

uint8_t RB_ElementsAvailable(RingBuffer *Buffer)
{
	return Buffer->Elements;
}
 8001cc6:	78c0      	ldrb	r0, [r0, #3]
 8001cc8:	4770      	bx	lr
	...

08001ccc <FLASH_ChipSelect>:

extern osMutexId SPIMutexHandle;



void FLASH_ChipSelect (void){
 8001ccc:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 8001cce:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <FLASH_ChipSelect+0x1c>)
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	f006 fa2f 	bl	8008138 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <FLASH_ChipSelect+0x20>)
 8001ce2:	f002 ffc7 	bl	8004c74 <HAL_GPIO_WritePin>
}
 8001ce6:	bd08      	pop	{r3, pc}
 8001ce8:	200030b0 	.word	0x200030b0
 8001cec:	40020400 	.word	0x40020400

08001cf0 <FLASH_ChipDeselect>:

void FLASH_ChipDeselect (void){
 8001cf0:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <FLASH_ChipDeselect+0x20>)
 8001cfa:	f002 ffbb 	bl	8004c74 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 8001cfe:	2300      	movs	r3, #0
 8001d00:	461a      	mov	r2, r3
 8001d02:	4619      	mov	r1, r3
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <FLASH_ChipDeselect+0x24>)
 8001d06:	6800      	ldr	r0, [r0, #0]
 8001d08:	f006 f820 	bl	8007d4c <xQueueGenericSend>
}
 8001d0c:	bd08      	pop	{r3, pc}
 8001d0e:	bf00      	nop
 8001d10:	40020400 	.word	0x40020400
 8001d14:	200030b0 	.word	0x200030b0

08001d18 <DataLogTask>:

void DataLogTask(void const * argument)
{
 8001d18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DataLog */
	W25qxx_Init();
 8001d1a:	f7ff fe4f 	bl	80019bc <W25qxx_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f005 fe29 	bl	8007976 <osDelay>
 8001d24:	e7fb      	b.n	8001d1e <DataLogTask+0x6>
	...

08001d28 <Nextion1_DataRcv>:
		}*/
	}
  /* USER CODE END UpdateLCD */
}

void Nextion1_DataRcv (void){
 8001d28:	b410      	push	{r4}
	uint8_t stopbyte = 0;
 8001d2a:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8001d2c:	e048      	b.n	8001dc0 <Nextion1_DataRcv+0x98>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e001      	b.n	8001d38 <Nextion1_DataRcv+0x10>
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	1d51      	adds	r1, r2, #5
 8001d3c:	428b      	cmp	r3, r1
 8001d3e:	da0a      	bge.n	8001d56 <Nextion1_DataRcv+0x2e>
					if(nextion_big_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8001d40:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8001d44:	492d      	ldr	r1, [pc, #180]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001d46:	4401      	add	r1, r0
 8001d48:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001d4c:	29ff      	cmp	r1, #255	; 0xff
 8001d4e:	d1f1      	bne.n	8001d34 <Nextion1_DataRcv+0xc>
						stopbyte ++;
 8001d50:	3401      	adds	r4, #1
 8001d52:	b2e4      	uxtb	r4, r4
 8001d54:	e7ee      	b.n	8001d34 <Nextion1_DataRcv+0xc>
					}
				}
				if(stopbyte == 3){
 8001d56:	2c03      	cmp	r4, #3
 8001d58:	d006      	beq.n	8001d68 <Nextion1_DataRcv+0x40>
							y = 4;
							break;
					}
					nextion_big_comm.UartBufferHead += y;
				}else{
					nextion_big_comm.UartBufferHead ++;
 8001d5a:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001d5c:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001d60:	3301      	adds	r3, #1
 8001d62:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8001d66:	e024      	b.n	8001db2 <Nextion1_DataRcv+0x8a>
					switch(nextion_big_comm.UART_Buffer[start]){
 8001d68:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d70:	2b1a      	cmp	r3, #26
 8001d72:	d011      	beq.n	8001d98 <Nextion1_DataRcv+0x70>
 8001d74:	2b66      	cmp	r3, #102	; 0x66
 8001d76:	d116      	bne.n	8001da6 <Nextion1_DataRcv+0x7e>
							nextion_big.display = nextion_big_comm.UART_Buffer[start + 1];
 8001d78:	3001      	adds	r0, #1
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001d7c:	4418      	add	r0, r3
 8001d7e:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <Nextion1_DataRcv+0xd8>)
 8001d84:	701a      	strb	r2, [r3, #0]
							y = 5;
 8001d86:	2305      	movs	r3, #5
					nextion_big_comm.UartBufferHead += y;
 8001d88:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001d8a:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8001d8e:	440b      	add	r3, r1
 8001d90:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8001d94:	2400      	movs	r4, #0
 8001d96:	e00c      	b.n	8001db2 <Nextion1_DataRcv+0x8a>
							command_correct[current_command] = 1;
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <Nextion1_DataRcv+0xdc>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <Nextion1_DataRcv+0xe0>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8001da2:	2304      	movs	r3, #4
							break;
 8001da4:	e7f0      	b.n	8001d88 <Nextion1_DataRcv+0x60>
							y = 4;
 8001da6:	2304      	movs	r3, #4
 8001da8:	e7ee      	b.n	8001d88 <Nextion1_DataRcv+0x60>
				}
			}

		}else{
			//if(nextion_big_comm.UART_Buffer[start] == 0 || nextion_big_comm.UART_Buffer[start] == 255){
				nextion_big_comm.UartBufferHead++;
 8001daa:	3201      	adds	r2, #1
 8001dac:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001dae:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_big_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001db4:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dbc:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_big_comm.UartBufferTail != nextion_big_comm.UartBufferHead){
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001dc2:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8001dc6:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8001dca:	4291      	cmp	r1, r2
 8001dcc:	d013      	beq.n	8001df6 <Nextion1_DataRcv+0xce>
		len = (nextion_big_comm.UartBufferTail - nextion_big_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8001dce:	b2d3      	uxtb	r3, r2
 8001dd0:	1ac9      	subs	r1, r1, r3
 8001dd2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8001dd6:	2903      	cmp	r1, #3
 8001dd8:	d9e7      	bls.n	8001daa <Nextion1_DataRcv+0x82>
			if(len > 9){
 8001dda:	2909      	cmp	r1, #9
 8001ddc:	d9a7      	bls.n	8001d2e <Nextion1_DataRcv+0x6>
				if(nextion_big_comm.UART_Buffer[start + 4] == 0x0A && nextion_big_comm.UART_Buffer[start + 4] == 0x0A){
 8001dde:	1d10      	adds	r0, r2, #4
 8001de0:	4906      	ldr	r1, [pc, #24]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001de2:	4401      	add	r1, r0
 8001de4:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001de8:	290a      	cmp	r1, #10
 8001dea:	d1a0      	bne.n	8001d2e <Nextion1_DataRcv+0x6>
					nextion_big_comm.UartBufferHead += 10;
 8001dec:	320a      	adds	r2, #10
 8001dee:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <Nextion1_DataRcv+0xd4>)
 8001df0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001df4:	e7dd      	b.n	8001db2 <Nextion1_DataRcv+0x8a>
	}
}
 8001df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	20002ab4 	.word	0x20002ab4
 8001e00:	20002a8c 	.word	0x20002a8c
 8001e04:	20002b64 	.word	0x20002b64
 8001e08:	20002a90 	.word	0x20002a90

08001e0c <Nextion2_DataRcv>:

void Nextion2_DataRcv (void){
 8001e0c:	b410      	push	{r4}
	uint8_t stopbyte = 0;
 8001e0e:	2400      	movs	r4, #0
	uint8_t len;
	uint16_t start;
	uint32_t number = 0;
	int32_t value = 0;

	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8001e10:	e05e      	b.n	8001ed0 <Nextion2_DataRcv+0xc4>
			}else {
				n = 1;
			}
			if(n){
				n = 0;
				for(i = start + 1; i < (start + 5); i++){
 8001e12:	3301      	adds	r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e001      	b.n	8001e1c <Nextion2_DataRcv+0x10>
 8001e18:	3301      	adds	r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	1d51      	adds	r1, r2, #5
 8001e20:	428b      	cmp	r3, r1
 8001e22:	da0a      	bge.n	8001e3a <Nextion2_DataRcv+0x2e>
					if(nextion_small_comm.UART_Buffer[i & (UART_BUFFER_SIZE - 1)] == 0xFF){
 8001e24:	f003 007f 	and.w	r0, r3, #127	; 0x7f
 8001e28:	4938      	ldr	r1, [pc, #224]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001e2a:	4401      	add	r1, r0
 8001e2c:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001e30:	29ff      	cmp	r1, #255	; 0xff
 8001e32:	d1f1      	bne.n	8001e18 <Nextion2_DataRcv+0xc>
						stopbyte ++;
 8001e34:	3401      	adds	r4, #1
 8001e36:	b2e4      	uxtb	r4, r4
 8001e38:	e7ee      	b.n	8001e18 <Nextion2_DataRcv+0xc>
					}
				}
				if(stopbyte == 3){
 8001e3a:	2c03      	cmp	r4, #3
 8001e3c:	d006      	beq.n	8001e4c <Nextion2_DataRcv+0x40>
							y = 4;
							break;
					}
					nextion_small_comm.UartBufferHead += y;
				}else{
					nextion_small_comm.UartBufferHead ++;
 8001e3e:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001e40:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001e44:	3301      	adds	r3, #1
 8001e46:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
 8001e4a:	e03a      	b.n	8001ec2 <Nextion2_DataRcv+0xb6>
					switch(nextion_small_comm.UART_Buffer[start]){
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001e54:	2b86      	cmp	r3, #134	; 0x86
 8001e56:	d024      	beq.n	8001ea2 <Nextion2_DataRcv+0x96>
 8001e58:	d813      	bhi.n	8001e82 <Nextion2_DataRcv+0x76>
 8001e5a:	2b1a      	cmp	r3, #26
 8001e5c:	d01a      	beq.n	8001e94 <Nextion2_DataRcv+0x88>
 8001e5e:	2b66      	cmp	r3, #102	; 0x66
 8001e60:	d129      	bne.n	8001eb6 <Nextion2_DataRcv+0xaa>
							nextion_small.display = nextion_small_comm.UART_Buffer[start + 1];
 8001e62:	3001      	adds	r0, #1
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001e66:	4418      	add	r0, r3
 8001e68:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8001e6c:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <Nextion2_DataRcv+0x104>)
 8001e6e:	701a      	strb	r2, [r3, #0]
							y = 5;
 8001e70:	2305      	movs	r3, #5
					nextion_small_comm.UartBufferHead += y;
 8001e72:	4a26      	ldr	r2, [pc, #152]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001e74:	f8b2 10a4 	ldrh.w	r1, [r2, #164]	; 0xa4
 8001e78:	440b      	add	r3, r1
 8001e7a:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
					stopbyte = 0;
 8001e7e:	2400      	movs	r4, #0
 8001e80:	e01f      	b.n	8001ec2 <Nextion2_DataRcv+0xb6>
					switch(nextion_small_comm.UART_Buffer[start]){
 8001e82:	2b87      	cmp	r3, #135	; 0x87
 8001e84:	d012      	beq.n	8001eac <Nextion2_DataRcv+0xa0>
 8001e86:	2b88      	cmp	r3, #136	; 0x88
 8001e88:	d115      	bne.n	8001eb6 <Nextion2_DataRcv+0xaa>
							nextion_small.ready = 1;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <Nextion2_DataRcv+0x104>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	70da      	strb	r2, [r3, #3]
							y = 4;
 8001e90:	2304      	movs	r3, #4
							break;
 8001e92:	e7ee      	b.n	8001e72 <Nextion2_DataRcv+0x66>
							command_correct[current_command] = 1;
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <Nextion2_DataRcv+0x108>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <Nextion2_DataRcv+0x10c>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	54d1      	strb	r1, [r2, r3]
							y = 4;
 8001e9e:	2304      	movs	r3, #4
							break;
 8001ea0:	e7e7      	b.n	8001e72 <Nextion2_DataRcv+0x66>
							nextion_small.sleep = 1;
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <Nextion2_DataRcv+0x104>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	709a      	strb	r2, [r3, #2]
							y = 4;
 8001ea8:	2304      	movs	r3, #4
							break;
 8001eaa:	e7e2      	b.n	8001e72 <Nextion2_DataRcv+0x66>
							nextion_small.sleep = 0;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <Nextion2_DataRcv+0x104>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	709a      	strb	r2, [r3, #2]
							y = 4;
 8001eb2:	2304      	movs	r3, #4
							break;
 8001eb4:	e7dd      	b.n	8001e72 <Nextion2_DataRcv+0x66>
							y = 4;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e7db      	b.n	8001e72 <Nextion2_DataRcv+0x66>
				}
			}

		}else{
			//if(nextion_small_comm.UART_Buffer[start] == 0 || nextion_small_comm.UART_Buffer[start] == 255){
				nextion_small_comm.UartBufferHead++;
 8001eba:	3201      	adds	r2, #1
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001ebe:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			//}
		}
		nextion_small_comm.UartBufferHead &= (UART_BUFFER_SIZE - 1);
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001ec4:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 8001ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ecc:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
	while(nextion_small_comm.UartBufferTail != nextion_small_comm.UartBufferHead){
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001ed2:	f8b3 10a6 	ldrh.w	r1, [r3, #166]	; 0xa6
 8001ed6:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
 8001eda:	4291      	cmp	r1, r2
 8001edc:	d013      	beq.n	8001f06 <Nextion2_DataRcv+0xfa>
		len = (nextion_small_comm.UartBufferTail - nextion_small_comm.UartBufferHead) & (UART_BUFFER_SIZE - 1);
 8001ede:	b2d3      	uxtb	r3, r2
 8001ee0:	1ac9      	subs	r1, r1, r3
 8001ee2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if(len > 3){
 8001ee6:	2903      	cmp	r1, #3
 8001ee8:	d9e7      	bls.n	8001eba <Nextion2_DataRcv+0xae>
			if(len > 9){
 8001eea:	2909      	cmp	r1, #9
 8001eec:	d991      	bls.n	8001e12 <Nextion2_DataRcv+0x6>
				if(nextion_small_comm.UART_Buffer[start + 4] == 0x0A && nextion_small_comm.UART_Buffer[start + 4] == 0x0A){
 8001eee:	1d10      	adds	r0, r2, #4
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001ef2:	4401      	add	r1, r0
 8001ef4:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8001ef8:	290a      	cmp	r1, #10
 8001efa:	d18a      	bne.n	8001e12 <Nextion2_DataRcv+0x6>
					nextion_small_comm.UartBufferHead += 10;
 8001efc:	320a      	adds	r2, #10
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <Nextion2_DataRcv+0x100>)
 8001f00:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8001f04:	e7dd      	b.n	8001ec2 <Nextion2_DataRcv+0xb6>
	}
}
 8001f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	20002b68 	.word	0x20002b68
 8001f10:	20002c18 	.word	0x20002c18
 8001f14:	20002b64 	.word	0x20002b64
 8001f18:	20002a90 	.word	0x20002a90

08001f1c <nextion_SendData>:
	if(cmd < NEX_COMMANDS_COUNT && cmd > -1){
 8001f1c:	2921      	cmp	r1, #33	; 0x21
 8001f1e:	d84a      	bhi.n	8001fb6 <nextion_SendData+0x9a>
static void nextion_SendData(UART_HandleTypeDef* uart, nextion_command cmd, int32_t value1, int32_t value2, int32_t value3){
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	b08c      	sub	sp, #48	; 0x30
 8001f24:	4606      	mov	r6, r0
		if(cmd == NEX_WAKE || cmd == NEX_SENDME || cmd == NEX_SETTINGS_SAVED || cmd == NEX_SETTINGS_NOT_SAVED
 8001f26:	2901      	cmp	r1, #1
 8001f28:	d919      	bls.n	8001f5e <nextion_SendData+0x42>
 8001f2a:	2911      	cmp	r1, #17
 8001f2c:	d017      	beq.n	8001f5e <nextion_SendData+0x42>
 8001f2e:	2912      	cmp	r1, #18
 8001f30:	d015      	beq.n	8001f5e <nextion_SendData+0x42>
			|| cmd == NEX_SETTINGS_LOCK || cmd == NEX_SETTINGS_UNLOCK){
 8001f32:	2921      	cmp	r1, #33	; 0x21
 8001f34:	d013      	beq.n	8001f5e <nextion_SendData+0x42>
 8001f36:	2920      	cmp	r1, #32
 8001f38:	d011      	beq.n	8001f5e <nextion_SendData+0x42>
			cmd == NEX_PHASE_CURRENT ||
 8001f3a:	f1a1 0018 	sub.w	r0, r1, #24
 8001f3e:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_VOLTAGE ||
 8001f40:	2802      	cmp	r0, #2
 8001f42:	d916      	bls.n	8001f72 <nextion_SendData+0x56>
			cmd == NEX_CWU_TEMP || cmd == NEX_CO_TEMP){
 8001f44:	f1a1 001b 	sub.w	r0, r1, #27
 8001f48:	b2c0      	uxtb	r0, r0
		}else if(cmd == NEX_PHASE_PRG_BAR ||
 8001f4a:	2804      	cmp	r0, #4
 8001f4c:	d81b      	bhi.n	8001f86 <nextion_SendData+0x6a>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2);
 8001f4e:	481a      	ldr	r0, [pc, #104]	; (8001fb8 <nextion_SendData+0x9c>)
 8001f50:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001f54:	a802      	add	r0, sp, #8
 8001f56:	f007 fe5d 	bl	8009c14 <siprintf>
 8001f5a:	b2c2      	uxtb	r2, r0
 8001f5c:	e006      	b.n	8001f6c <nextion_SendData+0x50>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd]);
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <nextion_SendData+0x9c>)
 8001f60:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f64:	a802      	add	r0, sp, #8
 8001f66:	f007 fe55 	bl	8009c14 <siprintf>
 8001f6a:	b2c2      	uxtb	r2, r0
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8001f6c:	4615      	mov	r5, r2
 8001f6e:	4613      	mov	r3, r2
 8001f70:	e017      	b.n	8001fa2 <nextion_SendData+0x86>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1, value2, value3);
 8001f72:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001f74:	9000      	str	r0, [sp, #0]
 8001f76:	4810      	ldr	r0, [pc, #64]	; (8001fb8 <nextion_SendData+0x9c>)
 8001f78:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8001f7c:	a802      	add	r0, sp, #8
 8001f7e:	f007 fe49 	bl	8009c14 <siprintf>
 8001f82:	b2c2      	uxtb	r2, r0
 8001f84:	e7f2      	b.n	8001f6c <nextion_SendData+0x50>
			buffor_to_send_size = sprintf(buffor_to_send, nextion_commands[cmd], value1);
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <nextion_SendData+0x9c>)
 8001f88:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f8c:	a802      	add	r0, sp, #8
 8001f8e:	f007 fe41 	bl	8009c14 <siprintf>
 8001f92:	b2c2      	uxtb	r2, r0
 8001f94:	e7ea      	b.n	8001f6c <nextion_SendData+0x50>
			buffor_to_send[i] = 0xFF;
 8001f96:	a90c      	add	r1, sp, #48	; 0x30
 8001f98:	4419      	add	r1, r3
 8001f9a:	24ff      	movs	r4, #255	; 0xff
 8001f9c:	f801 4c28 	strb.w	r4, [r1, #-40]
		for(int i = buffor_to_send_size; i < buffor_to_send_size + 3; i++){
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	1ce9      	adds	r1, r5, #3
 8001fa4:	4299      	cmp	r1, r3
 8001fa6:	dcf6      	bgt.n	8001f96 <nextion_SendData+0x7a>
		HAL_UART_Transmit(uart, (uint8_t*)buffor_to_send, buffor_to_send_size, 20);
 8001fa8:	2314      	movs	r3, #20
 8001faa:	a902      	add	r1, sp, #8
 8001fac:	4630      	mov	r0, r6
 8001fae:	f005 fa07 	bl	80073c0 <HAL_UART_Transmit>
}
 8001fb2:	b00c      	add	sp, #48	; 0x30
 8001fb4:	bd70      	pop	{r4, r5, r6, pc}
 8001fb6:	4770      	bx	lr
 8001fb8:	0800a4f0 	.word	0x0800a4f0

08001fbc <DisplayTask>:
{
 8001fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fc0:	b097      	sub	sp, #92	; 0x5c
	nextion_small.display = 30;
 8001fc2:	4aa6      	ldr	r2, [pc, #664]	; (800225c <DisplayTask+0x2a0>)
 8001fc4:	231e      	movs	r3, #30
 8001fc6:	7013      	strb	r3, [r2, #0]
	nextion_small.last_display = 30;
 8001fc8:	7053      	strb	r3, [r2, #1]
	nextion_big.display = 30;
 8001fca:	4fa5      	ldr	r7, [pc, #660]	; (8002260 <DisplayTask+0x2a4>)
 8001fcc:	703b      	strb	r3, [r7, #0]
	nextion_big.last_display = 30;
 8001fce:	707b      	strb	r3, [r7, #1]
	UARTDMA_Init(&nextion_small_comm, NEXTION_SMALL_UART);
 8001fd0:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8002280 <DisplayTask+0x2c4>
 8001fd4:	4ca3      	ldr	r4, [pc, #652]	; (8002264 <DisplayTask+0x2a8>)
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f000 fd88 	bl	8002aee <UARTDMA_Init>
	UARTDMA_Init(&nextion_big_comm, NEXTION_BIG_UART);
 8001fde:	f8df 829c 	ldr.w	r8, [pc, #668]	; 800227c <DisplayTask+0x2c0>
 8001fe2:	4da1      	ldr	r5, [pc, #644]	; (8002268 <DisplayTask+0x2ac>)
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f000 fd81 	bl	8002aee <UARTDMA_Init>
	nextion_big_comm.callback = Nextion1_DataRcv;
 8001fec:	4b9f      	ldr	r3, [pc, #636]	; (800226c <DisplayTask+0x2b0>)
 8001fee:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
	nextion_small_comm.callback = Nextion2_DataRcv;
 8001ff2:	4b9f      	ldr	r3, [pc, #636]	; (8002270 <DisplayTask+0x2b4>)
 8001ff4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	Config_GetConfig(&configuration);
 8001ff8:	a802      	add	r0, sp, #8
 8001ffa:	f7fe ff41 	bl	8000e80 <Config_GetConfig>
	vTaskDelay(1000);
 8001ffe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002002:	f006 fd57 	bl	8008ab4 <vTaskDelay>
	HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8002006:	4c9b      	ldr	r4, [pc, #620]	; (8002274 <DisplayTask+0x2b8>)
 8002008:	2200      	movs	r2, #0
 800200a:	a911      	add	r1, sp, #68	; 0x44
 800200c:	4620      	mov	r0, r4
 800200e:	f004 f928 	bl	8006262 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currDate, RTC_FORMAT_BIN);
 8002012:	2200      	movs	r2, #0
 8002014:	a910      	add	r1, sp, #64	; 0x40
 8002016:	4620      	mov	r0, r4
 8002018:	f004 f94e 	bl	80062b8 <HAL_RTC_GetDate>
	current_command = NEX_WAKE;
 800201c:	4e96      	ldr	r6, [pc, #600]	; (8002278 <DisplayTask+0x2bc>)
 800201e:	2400      	movs	r4, #0
 8002020:	7034      	strb	r4, [r6, #0]
	nextion_SendData(NEXTION_SMALL_UART, NEX_WAKE, 0, 0, 0);
 8002022:	9400      	str	r4, [sp, #0]
 8002024:	4623      	mov	r3, r4
 8002026:	4622      	mov	r2, r4
 8002028:	4621      	mov	r1, r4
 800202a:	4648      	mov	r0, r9
 800202c:	f7ff ff76 	bl	8001f1c <nextion_SendData>
	vTaskDelay(1);
 8002030:	2001      	movs	r0, #1
 8002032:	f006 fd3f 	bl	8008ab4 <vTaskDelay>
	current_command = NEX_SENDME;
 8002036:	2501      	movs	r5, #1
 8002038:	7035      	strb	r5, [r6, #0]
	nextion_SendData(NEXTION_SMALL_UART, NEX_SENDME, 0, 0, 0);
 800203a:	9400      	str	r4, [sp, #0]
 800203c:	4623      	mov	r3, r4
 800203e:	4622      	mov	r2, r4
 8002040:	4629      	mov	r1, r5
 8002042:	4648      	mov	r0, r9
 8002044:	f7ff ff6a 	bl	8001f1c <nextion_SendData>
	vTaskDelay(1);
 8002048:	4628      	mov	r0, r5
 800204a:	f006 fd33 	bl	8008ab4 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 800204e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002052:	4628      	mov	r0, r5
 8002054:	f006 ffb2 	bl	8008fbc <ulTaskNotifyTake>
	current_command = NEX_WAKE;
 8002058:	7034      	strb	r4, [r6, #0]
	nextion_SendData(NEXTION_BIG_UART, NEX_WAKE, 0, 0, 0);
 800205a:	9400      	str	r4, [sp, #0]
 800205c:	4623      	mov	r3, r4
 800205e:	4622      	mov	r2, r4
 8002060:	4621      	mov	r1, r4
 8002062:	4640      	mov	r0, r8
 8002064:	f7ff ff5a 	bl	8001f1c <nextion_SendData>
	vTaskDelay(1);
 8002068:	4628      	mov	r0, r5
 800206a:	f006 fd23 	bl	8008ab4 <vTaskDelay>
	current_command = NEX_SENDME;
 800206e:	7035      	strb	r5, [r6, #0]
	nextion_SendData(NEXTION_BIG_UART, NEX_SENDME, 0, 0, 0);
 8002070:	9400      	str	r4, [sp, #0]
 8002072:	4623      	mov	r3, r4
 8002074:	4622      	mov	r2, r4
 8002076:	4629      	mov	r1, r5
 8002078:	4640      	mov	r0, r8
 800207a:	f7ff ff4f 	bl	8001f1c <nextion_SendData>
	vTaskDelay(1);
 800207e:	4628      	mov	r0, r5
 8002080:	f006 fd18 	bl	8008ab4 <vTaskDelay>
	ulNotificationValue = ulTaskNotifyTake(pdTRUE, 1000);
 8002084:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002088:	4628      	mov	r0, r5
 800208a:	f006 ff97 	bl	8008fbc <ulTaskNotifyTake>
	if(nextion_big.display != 30 || nextion_small.display != 30){
 800208e:	783b      	ldrb	r3, [r7, #0]
 8002090:	2b1e      	cmp	r3, #30
 8002092:	d00b      	beq.n	80020ac <DisplayTask+0xf0>
		if(nextion_big.display != 30){
 8002094:	2b1e      	cmp	r3, #30
 8002096:	d10e      	bne.n	80020b6 <DisplayTask+0xfa>
		if(nextion_small.display != 30){
 8002098:	4b70      	ldr	r3, [pc, #448]	; (800225c <DisplayTask+0x2a0>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b1e      	cmp	r3, #30
 800209e:	d146      	bne.n	800212e <DisplayTask+0x172>
		if(nextion_big.display != 30){
 80020a0:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <DisplayTask+0x2a4>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b1e      	cmp	r3, #30
 80020a6:	f040 808d 	bne.w	80021c4 <DisplayTask+0x208>
 80020aa:	e7fe      	b.n	80020aa <DisplayTask+0xee>
	if(nextion_big.display != 30 || nextion_small.display != 30){
 80020ac:	4a6b      	ldr	r2, [pc, #428]	; (800225c <DisplayTask+0x2a0>)
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	2a1e      	cmp	r2, #30
 80020b2:	d1ef      	bne.n	8002094 <DisplayTask+0xd8>
 80020b4:	e7f9      	b.n	80020aa <DisplayTask+0xee>
			current_command = NEX_YEAR;
 80020b6:	4e70      	ldr	r6, [pc, #448]	; (8002278 <DisplayTask+0x2bc>)
 80020b8:	2102      	movs	r1, #2
 80020ba:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_YEAR, currDate.Year + 2000, 0, 0);
 80020bc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
 80020c0:	4d6e      	ldr	r5, [pc, #440]	; (800227c <DisplayTask+0x2c0>)
 80020c2:	2400      	movs	r4, #0
 80020c4:	9400      	str	r4, [sp, #0]
 80020c6:	4623      	mov	r3, r4
 80020c8:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80020cc:	4628      	mov	r0, r5
 80020ce:	f7ff ff25 	bl	8001f1c <nextion_SendData>
			current_command = NEX_MONTH;
 80020d2:	2103      	movs	r1, #3
 80020d4:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_MONTH, currDate.Month, 0, 0);
 80020d6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 80020da:	9400      	str	r4, [sp, #0]
 80020dc:	4623      	mov	r3, r4
 80020de:	4628      	mov	r0, r5
 80020e0:	f7ff ff1c 	bl	8001f1c <nextion_SendData>
			current_command = NEX_DAY;
 80020e4:	2104      	movs	r1, #4
 80020e6:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_DAY, currDate.Date, 0, 0);
 80020e8:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80020ec:	9400      	str	r4, [sp, #0]
 80020ee:	4623      	mov	r3, r4
 80020f0:	4628      	mov	r0, r5
 80020f2:	f7ff ff13 	bl	8001f1c <nextion_SendData>
			current_command = NEX_HOUR;
 80020f6:	2105      	movs	r1, #5
 80020f8:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_HOUR, currTime.Hours, 0, 0);
 80020fa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80020fe:	9400      	str	r4, [sp, #0]
 8002100:	4623      	mov	r3, r4
 8002102:	4628      	mov	r0, r5
 8002104:	f7ff ff0a 	bl	8001f1c <nextion_SendData>
			current_command = NEX_MINUTE;
 8002108:	2106      	movs	r1, #6
 800210a:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_MINUTE, currTime.Minutes, 0, 0);
 800210c:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
 8002110:	9400      	str	r4, [sp, #0]
 8002112:	4623      	mov	r3, r4
 8002114:	4628      	mov	r0, r5
 8002116:	f7ff ff01 	bl	8001f1c <nextion_SendData>
			current_command = NEX_SECONDS;
 800211a:	2107      	movs	r1, #7
 800211c:	7031      	strb	r1, [r6, #0]
			nextion_SendData(NEXTION_BIG_UART, NEX_SECONDS, currTime.Seconds, 0, 0);
 800211e:	f89d 2046 	ldrb.w	r2, [sp, #70]	; 0x46
 8002122:	9400      	str	r4, [sp, #0]
 8002124:	4623      	mov	r3, r4
 8002126:	4628      	mov	r0, r5
 8002128:	f7ff fef8 	bl	8001f1c <nextion_SendData>
 800212c:	e7b4      	b.n	8002098 <DisplayTask+0xdc>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CO_HIGH_TEMP, configuration.RegulationConfig.CO_hi_temp, 0, 0);
 800212e:	f99d 2018 	ldrsb.w	r2, [sp, #24]
 8002132:	4d53      	ldr	r5, [pc, #332]	; (8002280 <DisplayTask+0x2c4>)
 8002134:	2400      	movs	r4, #0
 8002136:	9400      	str	r4, [sp, #0]
 8002138:	4623      	mov	r3, r4
 800213a:	2108      	movs	r1, #8
 800213c:	4628      	mov	r0, r5
 800213e:	f7ff feed 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CO_LOW_TEMP, configuration.RegulationConfig.CO_lo_temp, 0, 0);
 8002142:	f99d 2019 	ldrsb.w	r2, [sp, #25]
 8002146:	9400      	str	r4, [sp, #0]
 8002148:	4623      	mov	r3, r4
 800214a:	2109      	movs	r1, #9
 800214c:	4628      	mov	r0, r5
 800214e:	f7ff fee5 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CO_HEATER_POWER, (int32_t)configuration.RegulationConfig.CO_heater_power, 0, 0);
 8002152:	9400      	str	r4, [sp, #0]
 8002154:	4623      	mov	r3, r4
 8002156:	eddd 7a03 	vldr	s15, [sp, #12]
 800215a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215e:	ee17 2a90 	vmov	r2, s15
 8002162:	210a      	movs	r1, #10
 8002164:	4628      	mov	r0, r5
 8002166:	f7ff fed9 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CWU_HIGH_TEMP, configuration.RegulationConfig.CWU_hi_temp, 0, 0);
 800216a:	f99d 201a 	ldrsb.w	r2, [sp, #26]
 800216e:	9400      	str	r4, [sp, #0]
 8002170:	4623      	mov	r3, r4
 8002172:	210b      	movs	r1, #11
 8002174:	4628      	mov	r0, r5
 8002176:	f7ff fed1 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CWU_LOW_TEMP, configuration.RegulationConfig.CWU_lo_temp, 0, 0);
 800217a:	f99d 201b 	ldrsb.w	r2, [sp, #27]
 800217e:	9400      	str	r4, [sp, #0]
 8002180:	4623      	mov	r3, r4
 8002182:	210c      	movs	r1, #12
 8002184:	4628      	mov	r0, r5
 8002186:	f7ff fec9 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_CWU_HEATER_POWER, (int32_t)configuration.RegulationConfig.CWU_heater_power, 0, 0);
 800218a:	9400      	str	r4, [sp, #0]
 800218c:	4623      	mov	r3, r4
 800218e:	eddd 7a02 	vldr	s15, [sp, #8]
 8002192:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002196:	ee17 2a90 	vmov	r2, s15
 800219a:	210d      	movs	r1, #13
 800219c:	4628      	mov	r0, r5
 800219e:	f7ff febd 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_ACC_COEFF, configuration.RegulationConfig.acumulated_power_coeff, 0, 0);
 80021a2:	f99d 2016 	ldrsb.w	r2, [sp, #22]
 80021a6:	9400      	str	r4, [sp, #0]
 80021a8:	4623      	mov	r3, r4
 80021aa:	210e      	movs	r1, #14
 80021ac:	4628      	mov	r0, r5
 80021ae:	f7ff feb5 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_SMALL_UART, NEX_HEATER_COEFF, configuration.RegulationConfig.heater_power_coeff, 0, 0);
 80021b2:	f99d 2017 	ldrsb.w	r2, [sp, #23]
 80021b6:	9400      	str	r4, [sp, #0]
 80021b8:	4623      	mov	r3, r4
 80021ba:	210f      	movs	r1, #15
 80021bc:	4628      	mov	r0, r5
 80021be:	f7ff fead 	bl	8001f1c <nextion_SendData>
 80021c2:	e76d      	b.n	80020a0 <DisplayTask+0xe4>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_HIGH_TEMP, configuration.RegulationConfig.CO_hi_temp, 0, 0);
 80021c4:	f99d 2018 	ldrsb.w	r2, [sp, #24]
 80021c8:	4d2c      	ldr	r5, [pc, #176]	; (800227c <DisplayTask+0x2c0>)
 80021ca:	2400      	movs	r4, #0
 80021cc:	9400      	str	r4, [sp, #0]
 80021ce:	4623      	mov	r3, r4
 80021d0:	2108      	movs	r1, #8
 80021d2:	4628      	mov	r0, r5
 80021d4:	f7ff fea2 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_LOW_TEMP, configuration.RegulationConfig.CO_lo_temp, 0, 0);
 80021d8:	f99d 2019 	ldrsb.w	r2, [sp, #25]
 80021dc:	9400      	str	r4, [sp, #0]
 80021de:	4623      	mov	r3, r4
 80021e0:	2109      	movs	r1, #9
 80021e2:	4628      	mov	r0, r5
 80021e4:	f7ff fe9a 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CO_HEATER_POWER, (int32_t)configuration.RegulationConfig.CO_heater_power, 0, 0);
 80021e8:	9400      	str	r4, [sp, #0]
 80021ea:	4623      	mov	r3, r4
 80021ec:	eddd 7a03 	vldr	s15, [sp, #12]
 80021f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f4:	ee17 2a90 	vmov	r2, s15
 80021f8:	210a      	movs	r1, #10
 80021fa:	4628      	mov	r0, r5
 80021fc:	f7ff fe8e 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HIGH_TEMP, configuration.RegulationConfig.CWU_hi_temp, 0, 0);
 8002200:	f99d 201a 	ldrsb.w	r2, [sp, #26]
 8002204:	9400      	str	r4, [sp, #0]
 8002206:	4623      	mov	r3, r4
 8002208:	210b      	movs	r1, #11
 800220a:	4628      	mov	r0, r5
 800220c:	f7ff fe86 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_LOW_TEMP, configuration.RegulationConfig.CWU_lo_temp, 0, 0);
 8002210:	f99d 201b 	ldrsb.w	r2, [sp, #27]
 8002214:	9400      	str	r4, [sp, #0]
 8002216:	4623      	mov	r3, r4
 8002218:	210c      	movs	r1, #12
 800221a:	4628      	mov	r0, r5
 800221c:	f7ff fe7e 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_CWU_HEATER_POWER, (int32_t)configuration.RegulationConfig.CWU_heater_power, 0, 0);
 8002220:	9400      	str	r4, [sp, #0]
 8002222:	4623      	mov	r3, r4
 8002224:	eddd 7a02 	vldr	s15, [sp, #8]
 8002228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222c:	ee17 2a90 	vmov	r2, s15
 8002230:	210d      	movs	r1, #13
 8002232:	4628      	mov	r0, r5
 8002234:	f7ff fe72 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_ACC_COEFF, configuration.RegulationConfig.acumulated_power_coeff, 0, 0);
 8002238:	f99d 2016 	ldrsb.w	r2, [sp, #22]
 800223c:	9400      	str	r4, [sp, #0]
 800223e:	4623      	mov	r3, r4
 8002240:	210e      	movs	r1, #14
 8002242:	4628      	mov	r0, r5
 8002244:	f7ff fe6a 	bl	8001f1c <nextion_SendData>
			nextion_SendData(NEXTION_BIG_UART, NEX_HEATER_COEFF, configuration.RegulationConfig.heater_power_coeff, 0, 0);
 8002248:	f99d 2017 	ldrsb.w	r2, [sp, #23]
 800224c:	9400      	str	r4, [sp, #0]
 800224e:	4623      	mov	r3, r4
 8002250:	210f      	movs	r1, #15
 8002252:	4628      	mov	r0, r5
 8002254:	f7ff fe62 	bl	8001f1c <nextion_SendData>
 8002258:	e727      	b.n	80020aa <DisplayTask+0xee>
 800225a:	bf00      	nop
 800225c:	20002c18 	.word	0x20002c18
 8002260:	20002a8c 	.word	0x20002a8c
 8002264:	20002b68 	.word	0x20002b68
 8002268:	20002ab4 	.word	0x20002ab4
 800226c:	08001d29 	.word	0x08001d29
 8002270:	08001e0d 	.word	0x08001e0d
 8002274:	20002f34 	.word	0x20002f34
 8002278:	20002b64 	.word	0x20002b64
 800227c:	20002f94 	.word	0x20002f94
 8002280:	20002eb0 	.word	0x20002eb0

08002284 <spi_wb>:
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
	return rbuf;
}

static void spi_wb(uint8_t b) {
 8002284:	b500      	push	{lr}
 8002286:	b083      	sub	sp, #12
 8002288:	a902      	add	r1, sp, #8
 800228a:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	2201      	movs	r2, #1
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <spi_wb+0x1c>)
 8002296:	f004 f939 	bl	800650c <HAL_SPI_Transmit>
}
 800229a:	b003      	add	sp, #12
 800229c:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a0:	20002fd4 	.word	0x20002fd4

080022a4 <spi_rb>:
static uint8_t spi_rb(void) {
 80022a4:	b500      	push	{lr}
 80022a6:	b083      	sub	sp, #12
	HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ac:	2201      	movs	r2, #1
 80022ae:	f10d 0107 	add.w	r1, sp, #7
 80022b2:	4804      	ldr	r0, [pc, #16]	; (80022c4 <spi_rb+0x20>)
 80022b4:	f004 fb0e 	bl	80068d4 <HAL_SPI_Receive>
}
 80022b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80022bc:	b003      	add	sp, #12
 80022be:	f85d fb04 	ldr.w	pc, [sp], #4
 80022c2:	bf00      	nop
 80022c4:	20002fd4 	.word	0x20002fd4

080022c8 <cs_desel>:
static void cs_desel() {
 80022c8:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET); //CS HIGH
 80022ca:	2201      	movs	r2, #1
 80022cc:	2110      	movs	r1, #16
 80022ce:	4805      	ldr	r0, [pc, #20]	; (80022e4 <cs_desel+0x1c>)
 80022d0:	f002 fcd0 	bl	8004c74 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 80022d4:	2300      	movs	r3, #0
 80022d6:	461a      	mov	r2, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	4803      	ldr	r0, [pc, #12]	; (80022e8 <cs_desel+0x20>)
 80022dc:	6800      	ldr	r0, [r0, #0]
 80022de:	f005 fd35 	bl	8007d4c <xQueueGenericSend>
}
 80022e2:	bd08      	pop	{r3, pc}
 80022e4:	40020000 	.word	0x40020000
 80022e8:	200030b0 	.word	0x200030b0

080022ec <cs_sel>:
static void cs_sel() {
 80022ec:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 80022ee:	f04f 31ff 	mov.w	r1, #4294967295
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <cs_sel+0x1c>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	f005 ff1f 	bl	8008138 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET); //CS LOW
 80022fa:	2200      	movs	r2, #0
 80022fc:	2110      	movs	r1, #16
 80022fe:	4803      	ldr	r0, [pc, #12]	; (800230c <cs_sel+0x20>)
 8002300:	f002 fcb8 	bl	8004c74 <HAL_GPIO_WritePin>
}
 8002304:	bd08      	pop	{r3, pc}
 8002306:	bf00      	nop
 8002308:	200030b0 	.word	0x200030b0
 800230c:	40020000 	.word	0x40020000

08002310 <EthernetTask>:

void EthernetTask(void const * argument)
{
 8002310:	b530      	push	{r4, r5, lr}
 8002312:	b08f      	sub	sp, #60	; 0x3c
  /* USER CODE BEGIN EthernetTask */
	uint8_t rcvBuf[20], bufSize[] = {2, 2, 2, 2, 2};
 8002314:	4b73      	ldr	r3, [pc, #460]	; (80024e4 <EthernetTask+0x1d4>)
 8002316:	e893 0003 	ldmia.w	r3, {r0, r1}
 800231a:	900c      	str	r0, [sp, #48]	; 0x30
 800231c:	f88d 1034 	strb.w	r1, [sp, #52]	; 0x34

	reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8002320:	4971      	ldr	r1, [pc, #452]	; (80024e8 <EthernetTask+0x1d8>)
 8002322:	4872      	ldr	r0, [pc, #456]	; (80024ec <EthernetTask+0x1dc>)
 8002324:	f7ff f93c 	bl	80015a0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8002328:	4971      	ldr	r1, [pc, #452]	; (80024f0 <EthernetTask+0x1e0>)
 800232a:	4872      	ldr	r0, [pc, #456]	; (80024f4 <EthernetTask+0x1e4>)
 800232c:	f7ff f94a 	bl	80015c4 <reg_wizchip_spi_cbfunc>
	wizchip_init(bufSize, bufSize);
 8002330:	a90c      	add	r1, sp, #48	; 0x30
 8002332:	4608      	mov	r0, r1
 8002334:	f7ff f99a 	bl	800166c <wizchip_init>
	wiz_NetInfo netInfo = {	.mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8002338:	2400      	movs	r4, #0
 800233a:	9406      	str	r4, [sp, #24]
 800233c:	9408      	str	r4, [sp, #32]
 800233e:	9409      	str	r4, [sp, #36]	; 0x24
 8002340:	940a      	str	r4, [sp, #40]	; 0x28
 8002342:	f8cd 402b 	str.w	r4, [sp, #43]	; 0x2b
 8002346:	2308      	movs	r3, #8
 8002348:	f88d 3019 	strb.w	r3, [sp, #25]
 800234c:	23dc      	movs	r3, #220	; 0xdc
 800234e:	f88d 301a 	strb.w	r3, [sp, #26]
 8002352:	23ab      	movs	r3, #171	; 0xab
 8002354:	f88d 301b 	strb.w	r3, [sp, #27]
 8002358:	23cd      	movs	r3, #205	; 0xcd
 800235a:	f88d 301c 	strb.w	r3, [sp, #28]
 800235e:	23ef      	movs	r3, #239	; 0xef
 8002360:	f88d 301d 	strb.w	r3, [sp, #29]
 8002364:	23c0      	movs	r3, #192	; 0xc0
 8002366:	f88d 301e 	strb.w	r3, [sp, #30]
 800236a:	21a8      	movs	r1, #168	; 0xa8
 800236c:	f88d 101f 	strb.w	r1, [sp, #31]
 8002370:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 800237a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800237e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8002382:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 8002386:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
 800238a:	2501      	movs	r5, #1
 800238c:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
		                  	 .ip 	= {192, 168, 0, 192},					// IP address
		                     .sn 	= {255, 255, 255, 0},					// Subnet mask
		                     .gw 	= {192, 168, 0, 1}};					// Gateway address
	wizchip_setnetinfo(&netInfo);
 8002390:	a806      	add	r0, sp, #24
 8002392:	f7ff f9eb 	bl	800176c <wizchip_setnetinfo>
	wizchip_setinterruptmask(0b0000000111000000);
 8002396:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
 800239a:	f7ff f9da 	bl	8001752 <wizchip_setinterruptmask>
	wizchip_getnetinfo(&netInfo);
 800239e:	a806      	add	r0, sp, #24
 80023a0:	f7ff fa12 	bl	80017c8 <wizchip_getnetinfo>

	// Modbus Port
	if(socket(0, Sn_MR_TCP, 502, 0) == 0) {
 80023a4:	4623      	mov	r3, r4
 80023a6:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80023aa:	4629      	mov	r1, r5
 80023ac:	4620      	mov	r0, r4
 80023ae:	f7fe ff53 	bl	8001258 <socket>
 80023b2:	b910      	cbnz	r0, 80023ba <EthernetTask+0xaa>
		  	  /* Put socket in LISTEN mode. This means we are creating a TCP server */
		if(listen(0) == SOCK_OK) {
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7fe fffb 	bl	80013b0 <listen>
		}
	}

	// HTTP Port (WebServer)
	if(socket(1, Sn_MR_TCP, 80, 0) == 0){
 80023ba:	2300      	movs	r3, #0
 80023bc:	2250      	movs	r2, #80	; 0x50
 80023be:	2101      	movs	r1, #1
 80023c0:	4608      	mov	r0, r1
 80023c2:	f7fe ff49 	bl	8001258 <socket>
 80023c6:	b910      	cbnz	r0, 80023ce <EthernetTask+0xbe>
		if(listen(1) == SOCK_OK) {
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7fe fff1 	bl	80013b0 <listen>
		}
	}

	// MQTT Port
	if(socket(2, Sn_MR_TCP, 1883, 0) == 0){
 80023ce:	2300      	movs	r3, #0
 80023d0:	f240 725b 	movw	r2, #1883	; 0x75b
 80023d4:	2101      	movs	r1, #1
 80023d6:	2002      	movs	r0, #2
 80023d8:	f7fe ff3e 	bl	8001258 <socket>

	}

	// Telnet Port (CLI, debug)
	if(socket(3, Sn_MR_TCP, 23, 0) == 0){
 80023dc:	2300      	movs	r3, #0
 80023de:	2217      	movs	r2, #23
 80023e0:	2101      	movs	r1, #1
 80023e2:	2003      	movs	r0, #3
 80023e4:	f7fe ff38 	bl	8001258 <socket>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d150      	bne.n	800248e <EthernetTask+0x17e>
		if(listen(3) == SOCK_OK) {
 80023ec:	2003      	movs	r0, #3
 80023ee:	f7fe ffdf 	bl	80013b0 <listen>
 80023f2:	e04c      	b.n	800248e <EthernetTask+0x17e>
			if(interruptSource & IK_IP_CONFLICT){

			}

			if(interruptSource & IK_SOCK_0){
				interrupt = getSn_IR(0);
 80023f4:	f44f 7002 	mov.w	r0, #520	; 0x208
 80023f8:	f7fe fdb0 	bl	8000f5c <WIZCHIP_READ>
				if(interrupt & Sn_IR_CON){
 80023fc:	f010 0f01 	tst.w	r0, #1
 8002400:	d054      	beq.n	80024ac <EthernetTask+0x19c>
					getsockopt(0, SO_DESTIP, &remoteIP[0]);
 8002402:	aa02      	add	r2, sp, #8
 8002404:	2104      	movs	r1, #4
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff f808 	bl	800141c <getsockopt>
					getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort[0]);
 800240c:	466a      	mov	r2, sp
 800240e:	2105      	movs	r1, #5
 8002410:	2000      	movs	r0, #0
 8002412:	f7ff f803 	bl	800141c <getsockopt>
 8002416:	e049      	b.n	80024ac <EthernetTask+0x19c>
				}
			}

			if(interruptSource & IK_SOCK_1){
				interrupt = getSn_IR(1);
 8002418:	f44f 700a 	mov.w	r0, #552	; 0x228
 800241c:	f7fe fd9e 	bl	8000f5c <WIZCHIP_READ>
				if(interrupt & Sn_IR_CON){
 8002420:	f010 0f01 	tst.w	r0, #1
 8002424:	d045      	beq.n	80024b2 <EthernetTask+0x1a2>
					getsockopt(1, SO_DESTIP, &remoteIP[1]);
 8002426:	aa03      	add	r2, sp, #12
 8002428:	2104      	movs	r1, #4
 800242a:	2001      	movs	r0, #1
 800242c:	f7fe fff6 	bl	800141c <getsockopt>
					getsockopt(1, SO_DESTPORT, (uint8_t*)&remotePort[1]);
 8002430:	f10d 0202 	add.w	r2, sp, #2
 8002434:	2105      	movs	r1, #5
 8002436:	2001      	movs	r0, #1
 8002438:	f7fe fff0 	bl	800141c <getsockopt>
 800243c:	e039      	b.n	80024b2 <EthernetTask+0x1a2>
				}
			}

			if(interruptSource & IK_SOCK_2){
				interrupt = getSn_IR(2);
 800243e:	f44f 7012 	mov.w	r0, #584	; 0x248
 8002442:	f7fe fd8b 	bl	8000f5c <WIZCHIP_READ>
 8002446:	e037      	b.n	80024b8 <EthernetTask+0x1a8>
			}

			if(interruptSource & IK_SOCK_3){
				interrupt = getSn_IR(3);
 8002448:	f44f 701a 	mov.w	r0, #616	; 0x268
 800244c:	f7fe fd86 	bl	8000f5c <WIZCHIP_READ>
				if(interrupt & Sn_IR_CON){
 8002450:	f010 0f01 	tst.w	r0, #1
 8002454:	d033      	beq.n	80024be <EthernetTask+0x1ae>
					getsockopt(3, SO_DESTIP, &remoteIP[3]);
 8002456:	aa05      	add	r2, sp, #20
 8002458:	2104      	movs	r1, #4
 800245a:	2003      	movs	r0, #3
 800245c:	f7fe ffde 	bl	800141c <getsockopt>
					getsockopt(3, SO_DESTPORT, (uint8_t*)&remotePort[3]);
 8002460:	f10d 0206 	add.w	r2, sp, #6
 8002464:	2105      	movs	r1, #5
 8002466:	2003      	movs	r0, #3
 8002468:	f7fe ffd8 	bl	800141c <getsockopt>
 800246c:	e027      	b.n	80024be <EthernetTask+0x1ae>
				}
			}

			if(interruptSource & IK_SOCK_4){
				interrupt = getSn_IR(4);
 800246e:	f44f 7022 	mov.w	r0, #648	; 0x288
 8002472:	f7fe fd73 	bl	8000f5c <WIZCHIP_READ>
 8002476:	e025      	b.n	80024c4 <EthernetTask+0x1b4>
			}

			if(interruptSource & IK_SOCK_5){
				interrupt = getSn_IR(5);
 8002478:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 800247c:	f7fe fd6e 	bl	8000f5c <WIZCHIP_READ>
 8002480:	e023      	b.n	80024ca <EthernetTask+0x1ba>

			if(interruptSource & IK_SOCK_6){
				interrupt = getSn_IR(6);
			}

			if(interruptSource & IK_SOCK_7){
 8002482:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8002486:	d128      	bne.n	80024da <EthernetTask+0x1ca>
				interrupt = getSn_IR(7);
			}

			wizchip_clrinterrupt(interruptSource);
 8002488:	4620      	mov	r0, r4
 800248a:	f7ff f934 	bl	80016f6 <wizchip_clrinterrupt>
		if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f006 fdcc 	bl	8009034 <xTaskNotifyWait>
 800249c:	2801      	cmp	r0, #1
 800249e:	d1f6      	bne.n	800248e <EthernetTask+0x17e>
			interruptSource = wizchip_getinterrupt();
 80024a0:	f7ff f946 	bl	8001730 <wizchip_getinterrupt>
 80024a4:	4604      	mov	r4, r0
			if(interruptSource & IK_SOCK_0){
 80024a6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80024aa:	d1a3      	bne.n	80023f4 <EthernetTask+0xe4>
			if(interruptSource & IK_SOCK_1){
 80024ac:	f414 7f00 	tst.w	r4, #512	; 0x200
 80024b0:	d1b2      	bne.n	8002418 <EthernetTask+0x108>
			if(interruptSource & IK_SOCK_2){
 80024b2:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80024b6:	d1c2      	bne.n	800243e <EthernetTask+0x12e>
			if(interruptSource & IK_SOCK_3){
 80024b8:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80024bc:	d1c4      	bne.n	8002448 <EthernetTask+0x138>
			if(interruptSource & IK_SOCK_4){
 80024be:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 80024c2:	d1d4      	bne.n	800246e <EthernetTask+0x15e>
			if(interruptSource & IK_SOCK_5){
 80024c4:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 80024c8:	d1d6      	bne.n	8002478 <EthernetTask+0x168>
			if(interruptSource & IK_SOCK_6){
 80024ca:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 80024ce:	d0d8      	beq.n	8002482 <EthernetTask+0x172>
				interrupt = getSn_IR(6);
 80024d0:	f44f 7032 	mov.w	r0, #712	; 0x2c8
 80024d4:	f7fe fd42 	bl	8000f5c <WIZCHIP_READ>
 80024d8:	e7d3      	b.n	8002482 <EthernetTask+0x172>
				interrupt = getSn_IR(7);
 80024da:	f44f 703a 	mov.w	r0, #744	; 0x2e8
 80024de:	f7fe fd3d 	bl	8000f5c <WIZCHIP_READ>
 80024e2:	e7d1      	b.n	8002488 <EthernetTask+0x178>
 80024e4:	0800a424 	.word	0x0800a424
 80024e8:	080022c9 	.word	0x080022c9
 80024ec:	080022ed 	.word	0x080022ed
 80024f0:	08002285 	.word	0x08002285
 80024f4:	080022a5 	.word	0x080022a5

080024f8 <NRF_ChipSelect>:

void NRF_ChipSelect (void);

void NRF_ChipDeselect (void);

void NRF_ChipSelect (void){
 80024f8:	b508      	push	{r3, lr}
	xSemaphoreTake(SPIMutexHandle, portMAX_DELAY);
 80024fa:	f04f 31ff 	mov.w	r1, #4294967295
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <NRF_ChipSelect+0x1c>)
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	f005 fe19 	bl	8008138 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8002506:	2200      	movs	r2, #0
 8002508:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <NRF_ChipSelect+0x20>)
 800250e:	f002 fbb1 	bl	8004c74 <HAL_GPIO_WritePin>
}
 8002512:	bd08      	pop	{r3, pc}
 8002514:	200030b0 	.word	0x200030b0
 8002518:	40020400 	.word	0x40020400

0800251c <NRF_ChipDeselect>:

void NRF_ChipDeselect (void){
 800251c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <NRF_ChipDeselect+0x20>)
 8002526:	f002 fba5 	bl	8004c74 <HAL_GPIO_WritePin>
	xSemaphoreGive(SPIMutexHandle);
 800252a:	2300      	movs	r3, #0
 800252c:	461a      	mov	r2, r3
 800252e:	4619      	mov	r1, r3
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <NRF_ChipDeselect+0x24>)
 8002532:	6800      	ldr	r0, [r0, #0]
 8002534:	f005 fc0a 	bl	8007d4c <xQueueGenericSend>
}
 8002538:	bd08      	pop	{r3, pc}
 800253a:	bf00      	nop
 800253c:	40020400 	.word	0x40020400
 8002540:	200030b0 	.word	0x200030b0

08002544 <RadioTask>:

void RadioTask(void const * argument)
{
 8002544:	b500      	push	{lr}
 8002546:	b083      	sub	sp, #12
	const uint8_t ecoIOinitMSG[] = "IsAlive";
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <RadioTask+0x38>)
 800254a:	466c      	mov	r4, sp
 800254c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002550:	e884 0003 	stmia.w	r4, {r0, r1}
  /* USER CODE BEGIN RadioComm */
	nRF24_Init(&hspi1);
 8002554:	480a      	ldr	r0, [pc, #40]	; (8002580 <RadioTask+0x3c>)
 8002556:	f001 fd89 	bl	800406c <nRF24_Init>
	//nRF24_SetRXAddress(0, "_ECOE");
	//nRF24_SetRXAddress(1, "_ECOI");
	//nRF24_SetTXAddress("_ECOM");
	//nRF24_TX_Mode();
	nRF24_SendData(ecoIOinitMSG, sizeof(ecoIOinitMSG));
 800255a:	2108      	movs	r1, #8
 800255c:	4620      	mov	r0, r4
 800255e:	f001 fcad 	bl	8003ebc <nRF24_SendData>

  /* Infinite loop */
  for(;;)
  {
	  if(pdTRUE == xTaskNotifyWait(0xFFFFFFFF, 0xFFFFFFFF, NULL, portMAX_DELAY)){
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	2200      	movs	r2, #0
 8002568:	4619      	mov	r1, r3
 800256a:	4618      	mov	r0, r3
 800256c:	f006 fd62 	bl	8009034 <xTaskNotifyWait>
 8002570:	2801      	cmp	r0, #1
 8002572:	d1f6      	bne.n	8002562 <RadioTask+0x1e>
		  nRF24_Event();
 8002574:	f001 fd4c 	bl	8004010 <nRF24_Event>
 8002578:	e7f3      	b.n	8002562 <RadioTask+0x1e>
 800257a:	bf00      	nop
 800257c:	0800a7dc 	.word	0x0800a7dc
 8002580:	20002fd4 	.word	0x20002fd4

08002584 <fModbusParseFloat>:
#define CO_C_STATE 					(IOsignals.signals.input10)

float fModbusParseFloat (uint8_t* in_data){
	union float_bytes buffor;

	buffor.bytes[3] = *in_data;
 8002584:	7802      	ldrb	r2, [r0, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	f362 631f 	bfi	r3, r2, #24, #8
	in_data ++;
	buffor.bytes[2] = *in_data;
 800258c:	7842      	ldrb	r2, [r0, #1]
 800258e:	f362 4317 	bfi	r3, r2, #16, #8
	in_data ++;
	buffor.bytes[1] = *in_data;
 8002592:	7882      	ldrb	r2, [r0, #2]
 8002594:	f362 230f 	bfi	r3, r2, #8, #8
	in_data ++;
	buffor.bytes[0] = *in_data;
 8002598:	78c2      	ldrb	r2, [r0, #3]
 800259a:	f362 0307 	bfi	r3, r2, #0, #8

	return buffor.value;
 800259e:	ee00 3a10 	vmov	s0, r3
}
 80025a2:	4770      	bx	lr

080025a4 <RegulationTask>:

void RegulationTask(void const * argument)
{
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	ed2d 8b04 	vpush	{d8-d9}
 80025aa:	b0ad      	sub	sp, #180	; 0xb4
	uint8_t counter_data_raw[36];
	uint8_t imported_exported_power_raw[8];
	uint8_t receieves = 0;
	uint8_t temperatures_raw[SENSOR_NUMBER * 2];

	configStatus = Config_GetRegConfig(&parameters);
 80025ac:	a821      	add	r0, sp, #132	; 0x84
 80025ae:	f7fe fc89 	bl	8000ec4 <Config_GetRegConfig>

	HAL_TIM_PWM_Init(&htim1);
 80025b2:	4ecc      	ldr	r6, [pc, #816]	; (80028e4 <RegulationTask+0x340>)
 80025b4:	4630      	mov	r0, r6
 80025b6:	f004 fbfc 	bl	8006db2 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 80025ba:	4dcb      	ldr	r5, [pc, #812]	; (80028e8 <RegulationTask+0x344>)
 80025bc:	4628      	mov	r0, r5
 80025be:	f004 fbf8 	bl	8006db2 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim3);
 80025c2:	4cca      	ldr	r4, [pc, #808]	; (80028ec <RegulationTask+0x348>)
 80025c4:	4620      	mov	r0, r4
 80025c6:	f004 fbf4 	bl	8006db2 <HAL_TIM_PWM_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80025ca:	2100      	movs	r1, #0
 80025cc:	4630      	mov	r0, r6
 80025ce:	f004 fcbb 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80025d2:	2104      	movs	r1, #4
 80025d4:	4630      	mov	r0, r6
 80025d6:	f004 fcb7 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80025da:	2108      	movs	r1, #8
 80025dc:	4630      	mov	r0, r6
 80025de:	f004 fcb3 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80025e2:	2100      	movs	r1, #0
 80025e4:	4628      	mov	r0, r5
 80025e6:	f004 fcaf 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80025ea:	2104      	movs	r1, #4
 80025ec:	4628      	mov	r0, r5
 80025ee:	f004 fcab 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80025f2:	2108      	movs	r1, #8
 80025f4:	4628      	mov	r0, r5
 80025f6:	f004 fca7 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80025fa:	2100      	movs	r1, #0
 80025fc:	4620      	mov	r0, r4
 80025fe:	f004 fca3 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002602:	2104      	movs	r1, #4
 8002604:	4620      	mov	r0, r4
 8002606:	f004 fc9f 	bl	8006f48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800260a:	2108      	movs	r1, #8
 800260c:	4620      	mov	r0, r4
 800260e:	f004 fc9b 	bl	8006f48 <HAL_TIM_PWM_Start>

	TIM1 -> CCR1 = 0;
 8002612:	4bb7      	ldr	r3, [pc, #732]	; (80028f0 <RegulationTask+0x34c>)
 8002614:	2400      	movs	r4, #0
 8002616:	635c      	str	r4, [r3, #52]	; 0x34
	TIM1 -> CCR2 = 0;
 8002618:	639c      	str	r4, [r3, #56]	; 0x38
	TIM1 -> CCR3 = 0;
 800261a:	63dc      	str	r4, [r3, #60]	; 0x3c

	TIM2 -> CCR1 = 0;
 800261c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002620:	635c      	str	r4, [r3, #52]	; 0x34
	TIM2 -> CCR2 = 0;
 8002622:	639c      	str	r4, [r3, #56]	; 0x38
	TIM2 -> CCR3 = 0;
 8002624:	63dc      	str	r4, [r3, #60]	; 0x3c

	TIM3 -> CCR1 = 0;
 8002626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800262a:	635c      	str	r4, [r3, #52]	; 0x34
	TIM3 -> CCR2 = 0;
 800262c:	639c      	str	r4, [r3, #56]	; 0x38
	TIM3 -> CCR3 = 0;
 800262e:	63dc      	str	r4, [r3, #60]	; 0x3c

	//Uchwyty i inne struktury
	mbPort.task =  xTaskGetCurrentTaskHandle();
 8002630:	f006 fb8c 	bl	8008d4c <xTaskGetCurrentTaskHandle>
 8002634:	902b      	str	r0, [sp, #172]	; 0xac

	mcp23017_init(&expander1, &hi2c1, 0b0100111);
 8002636:	4daf      	ldr	r5, [pc, #700]	; (80028f4 <RegulationTask+0x350>)
 8002638:	2227      	movs	r2, #39	; 0x27
 800263a:	49af      	ldr	r1, [pc, #700]	; (80028f8 <RegulationTask+0x354>)
 800263c:	4628      	mov	r0, r5
 800263e:	f7ff f8f1 	bl	8001824 <mcp23017_init>
	mcp23017_iodir(&expander1, 1, 0xFF);
 8002642:	22ff      	movs	r2, #255	; 0xff
 8002644:	2101      	movs	r1, #1
 8002646:	4628      	mov	r0, r5
 8002648:	f7ff f90e 	bl	8001868 <mcp23017_iodir>
	mcp23017_iodir(&expander1, 0, 0x03);
 800264c:	2203      	movs	r2, #3
 800264e:	4621      	mov	r1, r4
 8002650:	4628      	mov	r0, r5
 8002652:	f7ff f909 	bl	8001868 <mcp23017_iodir>
	expander1.gpio[0] = 0b11111100;
 8002656:	23fc      	movs	r3, #252	; 0xfc
 8002658:	71ab      	strb	r3, [r5, #6]
	mcp23017_write_gpio(&expander1, 0);
 800265a:	4621      	mov	r1, r4
 800265c:	4628      	mov	r0, r5
 800265e:	f7ff f920 	bl	80018a2 <mcp23017_write_gpio>
	vTaskDelay(1000);
 8002662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002666:	f006 fa25 	bl	8008ab4 <vTaskDelay>
	expander1.gpio[0] = 0;
 800266a:	71ac      	strb	r4, [r5, #6]
	mcp23017_write_gpio(&expander1, 0);
 800266c:	4621      	mov	r1, r4
 800266e:	4628      	mov	r0, r5
 8002670:	f7ff f917 	bl	80018a2 <mcp23017_write_gpio>
	vModbusInit(&mbPort, &huart2, 100);
 8002674:	2264      	movs	r2, #100	; 0x64
 8002676:	49a1      	ldr	r1, [pc, #644]	; (80028fc <RegulationTask+0x358>)
 8002678:	a829      	add	r0, sp, #164	; 0xa4
 800267a:	f7ff fa27 	bl	8001acc <vModbusInit>
	float exported_power = 0;
 800267e:	ed9f 8aa0 	vldr	s16, [pc, #640]	; 8002900 <RegulationTask+0x35c>
	float imported_power = 0;
 8002682:	eef0 8a48 	vmov.f32	s17, s16
 8002686:	e16e      	b.n	8002966 <RegulationTask+0x3c2>
		else CO_CONTACTOR_ERROR_RESET;

		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
			receieves += 1;
			for(uint8_t i = 0; i < 3; i++){
				counter.voltages[i] = fModbusParseFloat(counter_data_raw + i * 4);
 8002688:	00a6      	lsls	r6, r4, #2
 800268a:	ab0a      	add	r3, sp, #40	; 0x28
 800268c:	1998      	adds	r0, r3, r6
 800268e:	f7ff ff79 	bl	8002584 <fModbusParseFloat>
 8002692:	4d9c      	ldr	r5, [pc, #624]	; (8002904 <RegulationTask+0x360>)
 8002694:	f104 030c 	add.w	r3, r4, #12
 8002698:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800269c:	ed83 0a00 	vstr	s0, [r3]
				counter.currents[i] = fModbusParseFloat(counter_data_raw + 12 + i * 4);
 80026a0:	f106 000c 	add.w	r0, r6, #12
 80026a4:	ab0a      	add	r3, sp, #40	; 0x28
 80026a6:	4418      	add	r0, r3
 80026a8:	f7ff ff6c 	bl	8002584 <fModbusParseFloat>
 80026ac:	f104 030e 	add.w	r3, r4, #14
 80026b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80026b4:	ed83 0a01 	vstr	s0, [r3, #4]
				counter.powers[i] = fModbusParseFloat(counter_data_raw + 24 + 4 * i);
 80026b8:	f106 0018 	add.w	r0, r6, #24
 80026bc:	ab0a      	add	r3, sp, #40	; 0x28
 80026be:	4418      	add	r0, r3
 80026c0:	f7ff ff60 	bl	8002584 <fModbusParseFloat>
 80026c4:	f104 0312 	add.w	r3, r4, #18
 80026c8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80026cc:	ed85 0a00 	vstr	s0, [r5]
			for(uint8_t i = 0; i < 3; i++){
 80026d0:	3401      	adds	r4, #1
 80026d2:	b2e4      	uxtb	r4, r4
 80026d4:	2c02      	cmp	r4, #2
 80026d6:	d9d7      	bls.n	8002688 <RegulationTask+0xe4>
			receieves += 1;
 80026d8:	2501      	movs	r5, #1
 80026da:	e158      	b.n	800298e <RegulationTask+0x3ea>
			for(uint8_t i = 0; i < 3; i++){
 80026dc:	2400      	movs	r4, #0
 80026de:	e7f9      	b.n	80026d4 <RegulationTask+0x130>
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);

			if(counter.power_in_buffor > 0){
				counter.power_in_buffor -= (imported_power - last_imported_power);
			}else{
				counter.power_in_buffor = 0;
 80026e0:	4b88      	ldr	r3, [pc, #544]	; (8002904 <RegulationTask+0x360>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
 80026e6:	e174      	b.n	80029d2 <RegulationTask+0x42e>
			}
			counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
		}

		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
			receieves += 4;
 80026e8:	3504      	adds	r5, #4
 80026ea:	b2ed      	uxtb	r5, r5
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 80026ec:	2400      	movs	r4, #0
 80026ee:	e01b      	b.n	8002728 <RegulationTask+0x184>
				int16_t temp = temperatures_raw[i * 2];
 80026f0:	0063      	lsls	r3, r4, #1
 80026f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80026f4:	441a      	add	r2, r3
 80026f6:	f812 2ca4 	ldrb.w	r2, [r2, #-164]
				temp = temp << 8;
				temp += temperatures_raw[i*2 + 1];
 80026fa:	3301      	adds	r3, #1
 80026fc:	a92c      	add	r1, sp, #176	; 0xb0
 80026fe:	440b      	add	r3, r1
 8002700:	f813 0ca4 	ldrb.w	r0, [r3, #-164]
 8002704:	eb00 2002 	add.w	r0, r0, r2, lsl #8
				temperatures[i] = temp / DEC_PLACES;
 8002708:	b200      	sxth	r0, r0
 800270a:	f7fd ff0b 	bl	8000524 <__aeabi_i2d>
 800270e:	2200      	movs	r2, #0
 8002710:	4b7d      	ldr	r3, [pc, #500]	; (8002908 <RegulationTask+0x364>)
 8002712:	f7fe f89b 	bl	800084c <__aeabi_ddiv>
 8002716:	f7fe f9a1 	bl	8000a5c <__aeabi_d2f>
 800271a:	ab2c      	add	r3, sp, #176	; 0xb0
 800271c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002720:	f843 0c58 	str.w	r0, [r3, #-88]
			for(uint8_t i = 0; i < SENSOR_NUMBER; i++){
 8002724:	3401      	adds	r4, #1
 8002726:	b2e4      	uxtb	r4, r4
 8002728:	2c09      	cmp	r4, #9
 800272a:	d9e1      	bls.n	80026f0 <RegulationTask+0x14c>
			}
			memcpy(&counter.CWU_temps[0], &temperatures[0], 24);
 800272c:	4c77      	ldr	r4, [pc, #476]	; (800290c <RegulationTask+0x368>)
 800272e:	ae16      	add	r6, sp, #88	; 0x58
 8002730:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002734:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002738:	e884 0003 	stmia.w	r4, {r0, r1}
 800273c:	e165      	b.n	8002a0a <RegulationTask+0x466>
		counter.temperatures_present = 1;
		if(receieves == 7){
			for(uint8_t i = 0; i < 3; i ++){
				if(counter.voltages[i] > 200.0){
					if(counter.powers[i] > 0) available_power[i] = (PHASE_POWER - counter.powers[i]) * PHASE_POWER_COEFF;
					else available_power[i] = -counter.powers[i] * PHASE_POWER_COEFF;
 800273e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002900 <RegulationTask+0x35c>
 8002742:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8002746:	ab2c      	add	r3, sp, #176	; 0xb0
 8002748:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800274c:	ed43 7a19 	vstr	s15, [r3, #-100]	; 0xffffff9c
 8002750:	e057      	b.n	8002802 <RegulationTask+0x25e>
					counter.CWU_heater_max_power[i] = available_power[i] / CWU_HEATER_PHASE_POWER;

					if(counter.CO_heater_max_power[i] > 1.0) counter.CO_heater_max_power[i] = 1.0;
					if(counter.CWU_heater_max_power[i] > 1.0) counter.CWU_heater_max_power[i] = 1.0;

					counter.CO_heater_PWM[i] = (uint32_t)(counter.CO_heater_max_power[i] * 1000.0);
 8002752:	4e6c      	ldr	r6, [pc, #432]	; (8002904 <RegulationTask+0x360>)
 8002754:	1dab      	adds	r3, r5, #6
 8002756:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	f7fd fef4 	bl	8000548 <__aeabi_f2d>
 8002760:	2200      	movs	r2, #0
 8002762:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <RegulationTask+0x36c>)
 8002764:	f7fd ff48 	bl	80005f8 <__aeabi_dmul>
 8002768:	f7fe f958 	bl	8000a1c <__aeabi_d2uiz>
 800276c:	b283      	uxth	r3, r0
					counter.CO_heater_PWM[i] -= (counter.CO_heater_PWM[i] % 10);
 800276e:	f105 0208 	add.w	r2, r5, #8
 8002772:	4f68      	ldr	r7, [pc, #416]	; (8002914 <RegulationTask+0x370>)
 8002774:	fba7 1303 	umull	r1, r3, r7, r3
 8002778:	08db      	lsrs	r3, r3, #3
 800277a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800277e:	0059      	lsls	r1, r3, #1
 8002780:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]

					counter.CWU_heater_PWM[i] = (uint32_t)(counter.CWU_heater_max_power[i] * 1000.0);
 8002784:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8002788:	6850      	ldr	r0, [r2, #4]
 800278a:	f7fd fedd 	bl	8000548 <__aeabi_f2d>
 800278e:	2200      	movs	r2, #0
 8002790:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <RegulationTask+0x36c>)
 8002792:	f7fd ff31 	bl	80005f8 <__aeabi_dmul>
 8002796:	f7fe f941 	bl	8000a1c <__aeabi_d2uiz>
 800279a:	b283      	uxth	r3, r0
					counter.CWU_heater_PWM[i] -= (counter.CWU_heater_PWM[i] % 10);
 800279c:	3504      	adds	r5, #4
 800279e:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 80027a2:	fba7 2303 	umull	r2, r3, r7, r3
 80027a6:	08db      	lsrs	r3, r3, #3
 80027a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ac:	005a      	lsls	r2, r3, #1
 80027ae:	806a      	strh	r2, [r5, #2]
			for(uint8_t i = 0; i < 3; i ++){
 80027b0:	3401      	adds	r4, #1
 80027b2:	b2e4      	uxtb	r4, r4
 80027b4:	2c02      	cmp	r4, #2
 80027b6:	d85e      	bhi.n	8002876 <RegulationTask+0x2d2>
				if(counter.voltages[i] > 200.0){
 80027b8:	4625      	mov	r5, r4
 80027ba:	f104 030c 	add.w	r3, r4, #12
 80027be:	4a51      	ldr	r2, [pc, #324]	; (8002904 <RegulationTask+0x360>)
 80027c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8002918 <RegulationTask+0x374>
 80027cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	dd42      	ble.n	800285c <RegulationTask+0x2b8>
					if(counter.powers[i] > 0) available_power[i] = (PHASE_POWER - counter.powers[i]) * PHASE_POWER_COEFF;
 80027d6:	f104 0312 	add.w	r3, r4, #18
 80027da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ea:	dda8      	ble.n	800273e <RegulationTask+0x19a>
 80027ec:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002900 <RegulationTask+0x35c>
 80027f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f8:	ab2c      	add	r3, sp, #176	; 0xb0
 80027fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80027fe:	ed43 7a19 	vstr	s15, [r3, #-100]	; 0xffffff9c
					counter.CO_heater_max_power[i] = available_power[i] / CO_HEATER_PHASE_POWER;
 8002802:	ab2c      	add	r3, sp, #176	; 0xb0
 8002804:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002808:	ed53 7a19 	vldr	s15, [r3, #-100]	; 0xffffff9c
 800280c:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <RegulationTask+0x360>)
 800280e:	1daa      	adds	r2, r5, #6
 8002810:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8002814:	edc2 7a00 	vstr	s15, [r2]
					counter.CWU_heater_max_power[i] = available_power[i] / CWU_HEATER_PHASE_POWER;
 8002818:	f105 0208 	add.w	r2, r5, #8
 800281c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002820:	edc3 7a01 	vstr	s15, [r3, #4]
					if(counter.CO_heater_max_power[i] > 1.0) counter.CO_heater_max_power[i] = 1.0;
 8002824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002828:	eef4 7ac7 	vcmpe.f32	s15, s14
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	dd05      	ble.n	800283e <RegulationTask+0x29a>
 8002832:	1dab      	adds	r3, r5, #6
 8002834:	4a33      	ldr	r2, [pc, #204]	; (8002904 <RegulationTask+0x360>)
 8002836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800283a:	ed83 7a00 	vstr	s14, [r3]
					if(counter.CWU_heater_max_power[i] > 1.0) counter.CWU_heater_max_power[i] = 1.0;
 800283e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284a:	dd82      	ble.n	8002752 <RegulationTask+0x1ae>
 800284c:	f105 0308 	add.w	r3, r5, #8
 8002850:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <RegulationTask+0x360>)
 8002852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002856:	ed83 7a01 	vstr	s14, [r3, #4]
 800285a:	e77a      	b.n	8002752 <RegulationTask+0x1ae>
				}else{
					counter.CO_heater_PWM[i] = 0;
 800285c:	4b29      	ldr	r3, [pc, #164]	; (8002904 <RegulationTask+0x360>)
 800285e:	f104 0208 	add.w	r2, r4, #8
 8002862:	2100      	movs	r1, #0
 8002864:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					counter.CWU_heater_PWM[i] = 0;
 8002868:	1d22      	adds	r2, r4, #4
 800286a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800286e:	8059      	strh	r1, [r3, #2]
 8002870:	e79e      	b.n	80027b0 <RegulationTask+0x20c>
			for(uint8_t i = 0; i < 3; i ++){
 8002872:	2400      	movs	r4, #0
 8002874:	e79e      	b.n	80027b4 <RegulationTask+0x210>
 8002876:	2300      	movs	r3, #0
 8002878:	e00a      	b.n	8002890 <RegulationTask+0x2ec>
				}
			}else{
				CO_HEATER_RESET;
				CWU_HEATER_RESET;
				for(int i = 0; i < 3; i++){
					counter.CO_heater_PWM[i] = 0;
 800287a:	4a22      	ldr	r2, [pc, #136]	; (8002904 <RegulationTask+0x360>)
 800287c:	f103 0008 	add.w	r0, r3, #8
 8002880:	2100      	movs	r1, #0
 8002882:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
					counter.CWU_heater_PWM[i] = 0;
 8002886:	1d18      	adds	r0, r3, #4
 8002888:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800288c:	8051      	strh	r1, [r2, #2]
				for(int i = 0; i < 3; i++){
 800288e:	3301      	adds	r3, #1
 8002890:	2b02      	cmp	r3, #2
 8002892:	ddf2      	ble.n	800287a <RegulationTask+0x2d6>
			}

		}else{
			CO_HEATER_RESET;
			CWU_HEATER_RESET;
			for(int i = 0; i < 3; i++){
 8002894:	2300      	movs	r3, #0
 8002896:	e021      	b.n	80028dc <RegulationTask+0x338>
				counter.CO_heater_PWM[i] = 0;
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <RegulationTask+0x360>)
 800289a:	f103 0008 	add.w	r0, r3, #8
 800289e:	2100      	movs	r1, #0
 80028a0:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
				counter.CWU_heater_PWM[i] = 0;
 80028a4:	1d18      	adds	r0, r3, #4
 80028a6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80028aa:	8051      	strh	r1, [r2, #2]
			for(int i = 0; i < 3; i++){
 80028ac:	3301      	adds	r3, #1
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	ddf2      	ble.n	8002898 <RegulationTask+0x2f4>
			}

			if(!(receieves & 1) || !(receieves & 2)){
 80028b2:	f005 0303 	and.w	r3, r5, #3
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d002      	beq.n	80028c0 <RegulationTask+0x31c>
				counter.counter_present = 0;
 80028ba:	4b12      	ldr	r3, [pc, #72]	; (8002904 <RegulationTask+0x360>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
			}

			if(!(receieves & 4)){
 80028c0:	f015 0f04 	tst.w	r5, #4
 80028c4:	d1e6      	bne.n	8002894 <RegulationTask+0x2f0>
				counter.temperatures_present = 0;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <RegulationTask+0x360>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	709a      	strb	r2, [r3, #2]
 80028cc:	e7e2      	b.n	8002894 <RegulationTask+0x2f0>
		}

		if(!CWU_FUSE){
			CO_HEATER_RESET;
			for(int i = 0; i < 3; i++){
				counter.CWU_heater_PWM[i] = 0;
 80028ce:	1d19      	adds	r1, r3, #4
 80028d0:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <RegulationTask+0x360>)
 80028d2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80028d6:	2100      	movs	r1, #0
 80028d8:	8051      	strh	r1, [r2, #2]
			for(int i = 0; i < 3; i++){
 80028da:	3301      	adds	r3, #1
 80028dc:	2b02      	cmp	r3, #2
 80028de:	ddf6      	ble.n	80028ce <RegulationTask+0x32a>
			}
		}

		if(!CO_FUSE){
			CWU_HEATER_RESET;
			for(int i = 0; i < 3; i++){
 80028e0:	2300      	movs	r3, #0
 80028e2:	e022      	b.n	800292a <RegulationTask+0x386>
 80028e4:	20002f54 	.word	0x20002f54
 80028e8:	2000302c 	.word	0x2000302c
 80028ec:	20002dc8 	.word	0x20002dc8
 80028f0:	40010000 	.word	0x40010000
 80028f4:	20002c90 	.word	0x20002c90
 80028f8:	20002d6c 	.word	0x20002d6c
 80028fc:	2000306c 	.word	0x2000306c
 8002900:	00000000 	.word	0x00000000
 8002904:	20002c1c 	.word	0x20002c1c
 8002908:	40240000 	.word	0x40240000
 800290c:	20002c74 	.word	0x20002c74
 8002910:	408f4000 	.word	0x408f4000
 8002914:	cccccccd 	.word	0xcccccccd
 8002918:	43480000 	.word	0x43480000
				counter.CO_heater_PWM[i] = 0;
 800291c:	f103 0108 	add.w	r1, r3, #8
 8002920:	4a3e      	ldr	r2, [pc, #248]	; (8002a1c <RegulationTask+0x478>)
 8002922:	2000      	movs	r0, #0
 8002924:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
			for(int i = 0; i < 3; i++){
 8002928:	3301      	adds	r3, #1
 800292a:	2b02      	cmp	r3, #2
 800292c:	ddf6      	ble.n	800291c <RegulationTask+0x378>
			}
		}

		TIM3 -> CCR1 = counter.CWU_heater_PWM[0];
 800292e:	4b3b      	ldr	r3, [pc, #236]	; (8002a1c <RegulationTask+0x478>)
 8002930:	8959      	ldrh	r1, [r3, #10]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <RegulationTask+0x47c>)
 8002934:	6351      	str	r1, [r2, #52]	; 0x34
		TIM3 -> CCR2 = counter.CWU_heater_PWM[1];
 8002936:	8999      	ldrh	r1, [r3, #12]
 8002938:	6391      	str	r1, [r2, #56]	; 0x38
		TIM3 -> CCR3 = counter.CWU_heater_PWM[2];
 800293a:	89d9      	ldrh	r1, [r3, #14]
 800293c:	63d1      	str	r1, [r2, #60]	; 0x3c

		TIM1 -> CCR1 = counter.CO_heater_PWM[0];
 800293e:	8a19      	ldrh	r1, [r3, #16]
 8002940:	f502 427c 	add.w	r2, r2, #64512	; 0xfc00
 8002944:	6351      	str	r1, [r2, #52]	; 0x34
		TIM1 -> CCR2 = counter.CO_heater_PWM[1];
 8002946:	8a59      	ldrh	r1, [r3, #18]
 8002948:	6391      	str	r1, [r2, #56]	; 0x38
		TIM1 -> CCR3 = counter.CO_heater_PWM[2];
 800294a:	8a9b      	ldrh	r3, [r3, #20]
 800294c:	63d3      	str	r3, [r2, #60]	; 0x3c

		memcpy(&expander1.gpio, &IOsignals, 2);
 800294e:	4835      	ldr	r0, [pc, #212]	; (8002a24 <RegulationTask+0x480>)
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <RegulationTask+0x484>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	80c3      	strh	r3, [r0, #6]
		mcp23017_write_gpio(&expander1, MCP23017_PORTA);
 8002956:	2100      	movs	r1, #0
 8002958:	f7fe ffa3 	bl	80018a2 <mcp23017_write_gpio>
		vTaskDelayUntil(&xLastWakeTime, xDelay);
 800295c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002960:	a820      	add	r0, sp, #128	; 0x80
 8002962:	f006 f855 	bl	8008a10 <vTaskDelayUntil>
		mcp23017_read_gpio(&expander1, 1);
 8002966:	4c2f      	ldr	r4, [pc, #188]	; (8002a24 <RegulationTask+0x480>)
 8002968:	2101      	movs	r1, #1
 800296a:	4620      	mov	r0, r4
 800296c:	f7fe ff87 	bl	800187e <mcp23017_read_gpio>
		memcpy(&IOsignals, &expander1.gpio, 2);
 8002970:	88e2      	ldrh	r2, [r4, #6]
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <RegulationTask+0x484>)
 8002974:	801a      	strh	r2, [r3, #0]
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, L1_VOLTAGE, 18, counter_data_raw) == Modbus_OK){
 8002976:	ab0a      	add	r3, sp, #40	; 0x28
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2312      	movs	r3, #18
 800297c:	2200      	movs	r2, #0
 800297e:	2101      	movs	r1, #1
 8002980:	a829      	add	r0, sp, #164	; 0xa4
 8002982:	f7ff f8d9 	bl	8001b38 <vModbusReadInputRegisters>
 8002986:	2800      	cmp	r0, #0
 8002988:	f43f aea8 	beq.w	80026dc <RegulationTask+0x138>
		receieves = 0;
 800298c:	2500      	movs	r5, #0
		if(vModbusReadInputRegisters(&mbPort, COUNTER_ADDRESS, IMPORTED_ACTIVE_POWER, 4, imported_exported_power_raw) == Modbus_OK){
 800298e:	ab08      	add	r3, sp, #32
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2304      	movs	r3, #4
 8002994:	2248      	movs	r2, #72	; 0x48
 8002996:	2101      	movs	r1, #1
 8002998:	a829      	add	r0, sp, #164	; 0xa4
 800299a:	f7ff f8cd 	bl	8001b38 <vModbusReadInputRegisters>
 800299e:	bb48      	cbnz	r0, 80029f4 <RegulationTask+0x450>
			receieves += 2;
 80029a0:	3502      	adds	r5, #2
 80029a2:	b2ed      	uxtb	r5, r5
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 80029a4:	a808      	add	r0, sp, #32
 80029a6:	f7ff fded 	bl	8002584 <fModbusParseFloat>
 80029aa:	eeb0 9a40 	vmov.f32	s18, s0
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 80029ae:	a809      	add	r0, sp, #36	; 0x24
 80029b0:	f7ff fde8 	bl	8002584 <fModbusParseFloat>
			if(counter.power_in_buffor > 0){
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <RegulationTask+0x478>)
 80029b6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80029ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	f77f ae8d 	ble.w	80026e0 <RegulationTask+0x13c>
				counter.power_in_buffor -= (imported_power - last_imported_power);
 80029c6:	ee79 8a68 	vsub.f32	s17, s18, s17
 80029ca:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80029ce:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			counter.power_in_buffor += (exported_power - last_exported_power) * ACUMULATED_POWER_FACTOR;
 80029d2:	ee30 8a48 	vsub.f32	s16, s0, s16
 80029d6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8002a2c <RegulationTask+0x488>
 80029da:	ee68 7a27 	vmul.f32	s15, s16, s15
 80029de:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <RegulationTask+0x478>)
 80029e0:	ed93 8a15 	vldr	s16, [r3, #84]	; 0x54
 80029e4:	ee38 8a27 	vadd.f32	s16, s16, s15
 80029e8:	ed83 8a15 	vstr	s16, [r3, #84]	; 0x54
			exported_power = fModbusParseFloat(imported_exported_power_raw + 4);
 80029ec:	eeb0 8a40 	vmov.f32	s16, s0
			imported_power = fModbusParseFloat(imported_exported_power_raw);
 80029f0:	eef0 8a49 	vmov.f32	s17, s18
		if(vModbusReadInputRegisters(&mbPort, TEMPERATURE_ADDRESS, 0, SENSOR_NUMBER, temperatures_raw) == Modbus_OK){
 80029f4:	ab03      	add	r3, sp, #12
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	230a      	movs	r3, #10
 80029fa:	2200      	movs	r2, #0
 80029fc:	2102      	movs	r1, #2
 80029fe:	a829      	add	r0, sp, #164	; 0xa4
 8002a00:	f7ff f89a 	bl	8001b38 <vModbusReadInputRegisters>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	f43f ae6f 	beq.w	80026e8 <RegulationTask+0x144>
		counter.counter_present = 1;
 8002a0a:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <RegulationTask+0x478>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
		counter.temperatures_present = 1;
 8002a10:	709a      	strb	r2, [r3, #2]
		if(receieves == 7){
 8002a12:	2d07      	cmp	r5, #7
 8002a14:	f43f af2d 	beq.w	8002872 <RegulationTask+0x2ce>
			for(int i = 0; i < 3; i++){
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e748      	b.n	80028ae <RegulationTask+0x30a>
 8002a1c:	20002c1c 	.word	0x20002c1c
 8002a20:	40000400 	.word	0x40000400
 8002a24:	20002c90 	.word	0x20002c90
 8002a28:	20002c8c 	.word	0x20002c8c
 8002a2c:	00000000 	.word	0x00000000

08002a30 <TestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestTask */
void TestTask(void const * argument)
{
 8002a30:	b508      	push	{r3, lr}

  /* Infinite loop */
  for(;;)
  {

    vTaskDelay(1000);
 8002a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a36:	f006 f83d 	bl	8008ab4 <vTaskDelay>
 8002a3a:	e7fa      	b.n	8002a32 <TestTask+0x2>

08002a3c <UARTDMA_UartIrqHandler>:



void UARTDMA_UartIrqHandler(UARTDMA_HandleTypeDef *huartdma)
{
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 8002a3c:	6802      	ldr	r2, [r0, #0]
 8002a3e:	6813      	ldr	r3, [r2, #0]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	f011 0f10 	tst.w	r1, #16
 8002a46:	d00e      	beq.n	8002a66 <UARTDMA_UartIrqHandler+0x2a>
{
 8002a48:	b082      	sub	sp, #8
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	9101      	str	r1, [sp, #4]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	9301      	str	r3, [sp, #4]
		huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_EN; // Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8002a52:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6013      	str	r3, [r2, #0]
		tmp = tmp; // For unused warning
 8002a5e:	9b01      	ldr	r3, [sp, #4]
 8002a60:	9301      	str	r3, [sp, #4]
	}
}
 8002a62:	b002      	add	sp, #8
 8002a64:	4770      	bx	lr
 8002a66:	4770      	bx	lr

08002a68 <UARTDMA_DmaIrqHandler>:

void UARTDMA_DmaIrqHandler(UARTDMA_HandleTypeDef *huartdma){
 8002a68:	b570      	push	{r4, r5, r6, lr}
		__IO uint32_t ISR;   // DMA interrupt status register
		__IO uint32_t Reserved0;
		__IO uint32_t IFCR;  // DMA interrupt flag clear register
	} DMA_Base_Registers;

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->StreamBaseAddress; // Take registers base address
 8002a6a:	6803      	ldr	r3, [r0, #0]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	6d9d      	ldr	r5, [r3, #88]	; 0x58

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	f012 0f10 	tst.w	r2, #16
 8002a78:	d038      	beq.n	8002aec <UARTDMA_DmaIrqHandler+0x84>
	{
		DmaRegisters->IFCR = DMA_FLAG_TCIF0_4 << huartdma->huart->hdmarx->StreamIndex;	// Clear Transfer Complete flag
 8002a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	4093      	lsls	r3, r2
 8002a80:	60ab      	str	r3, [r5, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->NDTR; // Get the Length of transfered data
 8002a82:	6803      	ldr	r3, [r0, #0]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685e      	ldr	r6, [r3, #4]
 8002a8a:	f1c6 061e 	rsb	r6, r6, #30

		//huartdma->length += Length;
		huartdma->length = Length;
 8002a8e:	f880 60a2 	strb.w	r6, [r0, #162]	; 0xa2

		for(i = 0; i < Length; i++){
 8002a92:	2200      	movs	r2, #0
 8002a94:	e00c      	b.n	8002ab0 <UARTDMA_DmaIrqHandler+0x48>
			huartdma->UART_Buffer[huartdma->UartBufferTail] = huartdma->DMA_RX_Buffer[i];
 8002a96:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8002a9a:	1881      	adds	r1, r0, r2
 8002a9c:	790c      	ldrb	r4, [r1, #4]
 8002a9e:	18c1      	adds	r1, r0, r3
 8002aa0:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
			huartdma->UartBufferTail++;
 8002aa4:	3301      	adds	r3, #1
			huartdma->UartBufferTail &= 127;
 8002aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aaa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		for(i = 0; i < Length; i++){
 8002aae:	3201      	adds	r2, #1
 8002ab0:	42b2      	cmp	r2, r6
 8002ab2:	d3f0      	bcc.n	8002a96 <UARTDMA_DmaIrqHandler+0x2e>
 8002ab4:	4604      	mov	r4, r0
		}

		huartdma -> callback();
 8002ab6:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
 8002aba:	4798      	blx	r3

		DmaRegisters->IFCR = 0x3FU << huartdma->huart->hdmarx->StreamIndex; 		// Clear all interrupts
 8002abc:	4623      	mov	r3, r4
 8002abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ac4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002ac6:	223f      	movs	r2, #63	; 0x3f
 8002ac8:	408a      	lsls	r2, r1
 8002aca:	60aa      	str	r2, [r5, #8]
		huartdma->huart->hdmarx->Instance->M0AR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	60d3      	str	r3, [r2, #12]
		huartdma->huart->hdmarx->Instance->NDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	221e      	movs	r2, #30
 8002adc:	605a      	str	r2, [r3, #4]
		huartdma->huart->hdmarx->Instance->CR |= DMA_SxCR_EN;            	// Start DMA transfer
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	6813      	ldr	r3, [r2, #0]
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]
	}
}
 8002aec:	bd70      	pop	{r4, r5, r6, pc}

08002aee <UARTDMA_Init>:

void UARTDMA_Init(UARTDMA_HandleTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8002aee:	b510      	push	{r4, lr}
 8002af0:	4604      	mov	r4, r0
	huartdma->huart = huart;
 8002af2:	6001      	str	r1, [r0, #0]

	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8002af4:	680a      	ldr	r2, [r1, #0]
 8002af6:	68d3      	ldr	r3, [r2, #12]
 8002af8:	f043 0310 	orr.w	r3, r3, #16
 8002afc:	60d3      	str	r3, [r2, #12]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8002afe:	4601      	mov	r1, r0
 8002b00:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	6813      	ldr	r3, [r2, #0]
 8002b0a:	f043 0310 	orr.w	r3, r3, #16
 8002b0e:	6013      	str	r3, [r2, #0]

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8002b10:	221e      	movs	r2, #30
 8002b12:	6800      	ldr	r0, [r0, #0]
 8002b14:	f004 fcea 	bl	80074ec <HAL_UART_Receive_DMA>

	huartdma->huart->hdmarx->Instance->CR &= ~DMA_SxCR_HTIE; // Disable DMA Half Complete interrupt
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	f023 0308 	bic.w	r3, r3, #8
 8002b24:	6013      	str	r3, [r2, #0]
}
 8002b26:	bd10      	pop	{r4, pc}

08002b28 <configureTimerForRunTimeStats>:
/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{

}
 8002b28:	4770      	bx	lr

08002b2a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
return 0;
}
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	4770      	bx	lr
	...

08002b30 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002b30:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <vApplicationGetIdleTaskMemory+0x10>)
 8002b32:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <vApplicationGetIdleTaskMemory+0x14>)
 8002b36:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000320 	.word	0x20000320
 8002b44:	20000120 	.word	0x20000120

08002b48 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <vApplicationGetTimerTaskMemory+0x10>)
 8002b4a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <vApplicationGetTimerTaskMemory+0x14>)
 8002b4e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8002b56:	4770      	bx	lr
 8002b58:	20000784 	.word	0x20000784
 8002b5c:	20000384 	.word	0x20000384

08002b60 <ConfigSaveTmr>:
__weak void ConfigSaveTmr(void const * argument)
{
  /* USER CODE BEGIN ConfigSaveTmr */
  
  /* USER CODE END ConfigSaveTmr */
}
 8002b60:	4770      	bx	lr
	...

08002b64 <MX_GPIO_Init>:
{
 8002b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b68:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6a:	2400      	movs	r4, #0
 8002b6c:	9405      	str	r4, [sp, #20]
 8002b6e:	9406      	str	r4, [sp, #24]
 8002b70:	9407      	str	r4, [sp, #28]
 8002b72:	9408      	str	r4, [sp, #32]
 8002b74:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b76:	9401      	str	r4, [sp, #4]
 8002b78:	4b4a      	ldr	r3, [pc, #296]	; (8002ca4 <MX_GPIO_Init+0x140>)
 8002b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7c:	f042 0204 	orr.w	r2, r2, #4
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
 8002b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b84:	f002 0204 	and.w	r2, r2, #4
 8002b88:	9201      	str	r2, [sp, #4]
 8002b8a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b8c:	9402      	str	r4, [sp, #8]
 8002b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
 8002b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b98:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002b9c:	9202      	str	r2, [sp, #8]
 8002b9e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba0:	9403      	str	r4, [sp, #12]
 8002ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba4:	f042 0201 	orr.w	r2, r2, #1
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8002baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bac:	f002 0201 	and.w	r2, r2, #1
 8002bb0:	9203      	str	r2, [sp, #12]
 8002bb2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	9404      	str	r4, [sp, #16]
 8002bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb8:	f042 0202 	orr.w	r2, r2, #2
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	9304      	str	r3, [sp, #16]
 8002bc6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_RESET);
 8002bc8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8002cb8 <MX_GPIO_Init+0x154>
 8002bcc:	4622      	mov	r2, r4
 8002bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bd2:	4640      	mov	r0, r8
 8002bd4:	f002 f84e 	bl	8004c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 8002bd8:	4e33      	ldr	r6, [pc, #204]	; (8002ca8 <MX_GPIO_Init+0x144>)
 8002bda:	4622      	mov	r2, r4
 8002bdc:	2102      	movs	r1, #2
 8002bde:	4630      	mov	r0, r6
 8002be0:	f002 f848 	bl	8004c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8002be4:	2201      	movs	r2, #1
 8002be6:	2110      	movs	r1, #16
 8002be8:	4630      	mov	r0, r6
 8002bea:	f002 f843 	bl	8004c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin, GPIO_PIN_SET);
 8002bee:	4d2f      	ldr	r5, [pc, #188]	; (8002cac <MX_GPIO_Init+0x148>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f246 0104 	movw	r1, #24580	; 0x6004
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f002 f83c 	bl	8004c74 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8002bfc:	4622      	mov	r2, r4
 8002bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c02:	4628      	mov	r0, r5
 8002c04:	f002 f836 	bl	8004c74 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUILT_IN_LED_Pin;
 8002c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0e:	2701      	movs	r7, #1
 8002c10:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c14:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(BUILT_IN_LED_GPIO_Port, &GPIO_InitStruct);
 8002c16:	a905      	add	r1, sp, #20
 8002c18:	4640      	mov	r0, r8
 8002c1a:	f001 ff59 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MASTER_TE_Pin|ETH_CS_Pin;
 8002c1e:	2312      	movs	r3, #18
 8002c20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c22:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	a905      	add	r1, sp, #20
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f001 ff50 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ETH_INT_Pin;
 8002c30:	2302      	movs	r3, #2
 8002c32:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <MX_GPIO_Init+0x14c>)
 8002c36:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c38:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	a905      	add	r1, sp, #20
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f001 ff47 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC_CS_Pin|FLASH_CS_Pin|NRF_CS_Pin|NRF_CE_Pin;
 8002c42:	f24e 0304 	movw	r3, #57348	; 0xe004
 8002c46:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c48:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4e:	a905      	add	r1, sp, #20
 8002c50:	4628      	mov	r0, r5
 8002c52:	f001 ff3d 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PG24V_Pin;
 8002c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PG24V_GPIO_Port, &GPIO_InitStruct);
 8002c60:	a905      	add	r1, sp, #20
 8002c62:	4628      	mov	r0, r5
 8002c64:	f001 ff34 	bl	8004ad0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NRF_INT_Pin;
 8002c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_GPIO_Init+0x150>)
 8002c70:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(NRF_INT_GPIO_Port, &GPIO_InitStruct);
 8002c74:	a905      	add	r1, sp, #20
 8002c76:	4630      	mov	r0, r6
 8002c78:	f001 ff2a 	bl	8004ad0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	2105      	movs	r1, #5
 8002c80:	2007      	movs	r0, #7
 8002c82:	f001 fc57 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002c86:	2007      	movs	r0, #7
 8002c88:	f001 fc88 	bl	800459c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	2105      	movs	r1, #5
 8002c90:	2028      	movs	r0, #40	; 0x28
 8002c92:	f001 fc4f 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c96:	2028      	movs	r0, #40	; 0x28
 8002c98:	f001 fc80 	bl	800459c <HAL_NVIC_EnableIRQ>
}
 8002c9c:	b00a      	add	sp, #40	; 0x28
 8002c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	10210000 	.word	0x10210000
 8002cb4:	10110000 	.word	0x10110000
 8002cb8:	40020800 	.word	0x40020800

08002cbc <MX_DMA_Init>:
{
 8002cbc:	b510      	push	{r4, lr}
 8002cbe:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002cc0:	2400      	movs	r4, #0
 8002cc2:	9400      	str	r4, [sp, #0]
 8002cc4:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <MX_DMA_Init+0x64>)
 8002cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002cd4:	9200      	str	r2, [sp, #0]
 8002cd6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cd8:	9401      	str	r4, [sp, #4]
 8002cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cdc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002cec:	4622      	mov	r2, r4
 8002cee:	2105      	movs	r1, #5
 8002cf0:	2010      	movs	r0, #16
 8002cf2:	f001 fc1f 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cf6:	2010      	movs	r0, #16
 8002cf8:	f001 fc50 	bl	800459c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	2105      	movs	r1, #5
 8002d00:	2039      	movs	r0, #57	; 0x39
 8002d02:	f001 fc17 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002d06:	2039      	movs	r0, #57	; 0x39
 8002d08:	f001 fc48 	bl	800459c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	2105      	movs	r1, #5
 8002d10:	203a      	movs	r0, #58	; 0x3a
 8002d12:	f001 fc0f 	bl	8004534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002d16:	203a      	movs	r0, #58	; 0x3a
 8002d18:	f001 fc40 	bl	800459c <HAL_NVIC_EnableIRQ>
}
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd10      	pop	{r4, pc}
 8002d20:	40023800 	.word	0x40023800

08002d24 <MX_I2C1_Init>:
{
 8002d24:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8002d26:	4809      	ldr	r0, [pc, #36]	; (8002d4c <MX_I2C1_Init+0x28>)
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <MX_I2C1_Init+0x2c>)
 8002d2a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <MX_I2C1_Init+0x30>)
 8002d2e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d30:	2300      	movs	r3, #0
 8002d32:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d34:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d3a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d3c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d3e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d40:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d42:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d44:	f002 f9f6 	bl	8005134 <HAL_I2C_Init>
}
 8002d48:	bd08      	pop	{r3, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20002d6c 	.word	0x20002d6c
 8002d50:	40005400 	.word	0x40005400
 8002d54:	000186a0 	.word	0x000186a0

08002d58 <MX_SPI1_Init>:
{
 8002d58:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8002d5a:	480c      	ldr	r0, [pc, #48]	; (8002d8c <MX_SPI1_Init+0x34>)
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <MX_SPI1_Init+0x38>)
 8002d5e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d60:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002d64:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d66:	2300      	movs	r3, #0
 8002d68:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d6a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d6c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d6e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d74:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d76:	2218      	movs	r2, #24
 8002d78:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d7a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d7c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d80:	230a      	movs	r3, #10
 8002d82:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d84:	f003 fb82 	bl	800648c <HAL_SPI_Init>
}
 8002d88:	bd08      	pop	{r3, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20002fd4 	.word	0x20002fd4
 8002d90:	40013000 	.word	0x40013000

08002d94 <MX_TIM1_Init>:
{
 8002d94:	b530      	push	{r4, r5, lr}
 8002d96:	b093      	sub	sp, #76	; 0x4c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d98:	2400      	movs	r4, #0
 8002d9a:	9410      	str	r4, [sp, #64]	; 0x40
 8002d9c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d9e:	9409      	str	r4, [sp, #36]	; 0x24
 8002da0:	940a      	str	r4, [sp, #40]	; 0x28
 8002da2:	940b      	str	r4, [sp, #44]	; 0x2c
 8002da4:	940c      	str	r4, [sp, #48]	; 0x30
 8002da6:	940d      	str	r4, [sp, #52]	; 0x34
 8002da8:	940e      	str	r4, [sp, #56]	; 0x38
 8002daa:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dac:	2220      	movs	r2, #32
 8002dae:	4621      	mov	r1, r4
 8002db0:	a801      	add	r0, sp, #4
 8002db2:	f006 ff26 	bl	8009c02 <memset>
  htim1.Instance = TIM1;
 8002db6:	4d20      	ldr	r5, [pc, #128]	; (8002e38 <MX_TIM1_Init+0xa4>)
 8002db8:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <MX_TIM1_Init+0xa8>)
 8002dba:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 42000-1;
 8002dbc:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8002dc0:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 999;
 8002dc4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002dc8:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dce:	612b      	str	r3, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dd0:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f003 ffec 	bl	8006db2 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dda:	9410      	str	r4, [sp, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ddc:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dde:	a910      	add	r1, sp, #64	; 0x40
 8002de0:	4628      	mov	r0, r5
 8002de2:	f004 f8cf 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de6:	2360      	movs	r3, #96	; 0x60
 8002de8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002dea:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dec:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dee:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df0:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002df2:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002df4:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df6:	4622      	mov	r2, r4
 8002df8:	a909      	add	r1, sp, #36	; 0x24
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f004 f824 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e00:	2204      	movs	r2, #4
 8002e02:	a909      	add	r1, sp, #36	; 0x24
 8002e04:	4628      	mov	r0, r5
 8002e06:	f004 f81f 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	a909      	add	r1, sp, #36	; 0x24
 8002e0e:	4628      	mov	r0, r5
 8002e10:	f004 f81a 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e14:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e16:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e18:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e1a:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e1c:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e22:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e24:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e26:	a901      	add	r1, sp, #4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f004 f8e7 	bl	8006ffc <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8002e2e:	4628      	mov	r0, r5
 8002e30:	f000 fbda 	bl	80035e8 <HAL_TIM_MspPostInit>
}
 8002e34:	b013      	add	sp, #76	; 0x4c
 8002e36:	bd30      	pop	{r4, r5, pc}
 8002e38:	20002f54 	.word	0x20002f54
 8002e3c:	40010000 	.word	0x40010000

08002e40 <MX_TIM3_Init>:
{
 8002e40:	b530      	push	{r4, r5, lr}
 8002e42:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e44:	2400      	movs	r4, #0
 8002e46:	9408      	str	r4, [sp, #32]
 8002e48:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e4a:	9401      	str	r4, [sp, #4]
 8002e4c:	9402      	str	r4, [sp, #8]
 8002e4e:	9403      	str	r4, [sp, #12]
 8002e50:	9404      	str	r4, [sp, #16]
 8002e52:	9405      	str	r4, [sp, #20]
 8002e54:	9406      	str	r4, [sp, #24]
 8002e56:	9407      	str	r4, [sp, #28]
  htim3.Instance = TIM3;
 8002e58:	4d18      	ldr	r5, [pc, #96]	; (8002ebc <MX_TIM3_Init+0x7c>)
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <MX_TIM3_Init+0x80>)
 8002e5c:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 42000 - 1;
 8002e5e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8002e62:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e64:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 999;
 8002e66:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002e6a:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e70:	612b      	str	r3, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e72:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e74:	4628      	mov	r0, r5
 8002e76:	f003 ff9c 	bl	8006db2 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e7a:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e7e:	a908      	add	r1, sp, #32
 8002e80:	4628      	mov	r0, r5
 8002e82:	f004 f87f 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e86:	2360      	movs	r3, #96	; 0x60
 8002e88:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002e8a:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e8c:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e8e:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e90:	4622      	mov	r2, r4
 8002e92:	a901      	add	r1, sp, #4
 8002e94:	4628      	mov	r0, r5
 8002e96:	f003 ffd7 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	eb0d 0102 	add.w	r1, sp, r2
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	f003 ffd1 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	a901      	add	r1, sp, #4
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f003 ffcc 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f000 fb99 	bl	80035e8 <HAL_TIM_MspPostInit>
}
 8002eb6:	b00b      	add	sp, #44	; 0x2c
 8002eb8:	bd30      	pop	{r4, r5, pc}
 8002eba:	bf00      	nop
 8002ebc:	20002dc8 	.word	0x20002dc8
 8002ec0:	40000400 	.word	0x40000400

08002ec4 <MX_TIM2_Init>:
{
 8002ec4:	b530      	push	{r4, r5, lr}
 8002ec6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec8:	2400      	movs	r4, #0
 8002eca:	9408      	str	r4, [sp, #32]
 8002ecc:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ece:	9401      	str	r4, [sp, #4]
 8002ed0:	9402      	str	r4, [sp, #8]
 8002ed2:	9403      	str	r4, [sp, #12]
 8002ed4:	9404      	str	r4, [sp, #16]
 8002ed6:	9405      	str	r4, [sp, #20]
 8002ed8:	9406      	str	r4, [sp, #24]
 8002eda:	9407      	str	r4, [sp, #28]
  htim2.Instance = TIM2;
 8002edc:	4d15      	ldr	r5, [pc, #84]	; (8002f34 <MX_TIM2_Init+0x70>)
 8002ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ee2:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 0;
 8002ee4:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8002ee8:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eea:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eec:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002eee:	4628      	mov	r0, r5
 8002ef0:	f003 ff5f 	bl	8006db2 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef4:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ef8:	a908      	add	r1, sp, #32
 8002efa:	4628      	mov	r0, r5
 8002efc:	f004 f842 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f00:	2360      	movs	r3, #96	; 0x60
 8002f02:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8002f04:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f06:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f08:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	a901      	add	r1, sp, #4
 8002f0e:	4628      	mov	r0, r5
 8002f10:	f003 ff9a 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f14:	2204      	movs	r2, #4
 8002f16:	eb0d 0102 	add.w	r1, sp, r2
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f003 ff94 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f20:	2208      	movs	r2, #8
 8002f22:	a901      	add	r1, sp, #4
 8002f24:	4628      	mov	r0, r5
 8002f26:	f003 ff8f 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f000 fb5c 	bl	80035e8 <HAL_TIM_MspPostInit>
}
 8002f30:	b00b      	add	sp, #44	; 0x2c
 8002f32:	bd30      	pop	{r4, r5, pc}
 8002f34:	2000302c 	.word	0x2000302c

08002f38 <MX_USART1_UART_Init>:
{
 8002f38:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002f3a:	4808      	ldr	r0, [pc, #32]	; (8002f5c <MX_USART1_UART_Init+0x24>)
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <MX_USART1_UART_Init+0x28>)
 8002f3e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002f40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f44:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	2300      	movs	r3, #0
 8002f48:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f4a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f4c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f4e:	220c      	movs	r2, #12
 8002f50:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f54:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f56:	f004 fa04 	bl	8007362 <HAL_UART_Init>
}
 8002f5a:	bd08      	pop	{r3, pc}
 8002f5c:	20002eb0 	.word	0x20002eb0
 8002f60:	40011000 	.word	0x40011000

08002f64 <MX_USART2_UART_Init>:
{
 8002f64:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002f66:	4808      	ldr	r0, [pc, #32]	; (8002f88 <MX_USART2_UART_Init+0x24>)
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <MX_USART2_UART_Init+0x28>)
 8002f6a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002f6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002f70:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f72:	2300      	movs	r3, #0
 8002f74:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f76:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f78:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f7e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f80:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f82:	f004 f9ee 	bl	8007362 <HAL_UART_Init>
}
 8002f86:	bd08      	pop	{r3, pc}
 8002f88:	2000306c 	.word	0x2000306c
 8002f8c:	40004400 	.word	0x40004400

08002f90 <MX_USART6_UART_Init>:
{
 8002f90:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8002f92:	4808      	ldr	r0, [pc, #32]	; (8002fb4 <MX_USART6_UART_Init+0x24>)
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <MX_USART6_UART_Init+0x28>)
 8002f96:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 19200;
 8002f98:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8002f9c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002fa2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002fa4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fae:	f004 f9d8 	bl	8007362 <HAL_UART_Init>
}
 8002fb2:	bd08      	pop	{r3, pc}
 8002fb4:	20002f94 	.word	0x20002f94
 8002fb8:	40011400 	.word	0x40011400

08002fbc <MX_ADC1_Init>:
{
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8002fc0:	2500      	movs	r5, #0
 8002fc2:	9500      	str	r5, [sp, #0]
 8002fc4:	9501      	str	r5, [sp, #4]
 8002fc6:	9502      	str	r5, [sp, #8]
 8002fc8:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 8002fca:	4c10      	ldr	r4, [pc, #64]	; (800300c <MX_ADC1_Init+0x50>)
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <MX_ADC1_Init+0x54>)
 8002fce:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fd4:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fd6:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002fd8:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fda:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fdc:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fe0:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <MX_ADC1_Init+0x58>)
 8002fe4:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fe6:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002fe8:	2601      	movs	r6, #1
 8002fea:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002fec:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ff0:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f001 f998 	bl	8004328 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8002ffc:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ffe:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003000:	4669      	mov	r1, sp
 8003002:	4620      	mov	r0, r4
 8003004:	f001 f9bc 	bl	8004380 <HAL_ADC_ConfigChannel>
}
 8003008:	b004      	add	sp, #16
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	20002e08 	.word	0x20002e08
 8003010:	40012000 	.word	0x40012000
 8003014:	0f000001 	.word	0x0f000001

08003018 <MX_RTC_Init>:
{
 8003018:	b530      	push	{r4, r5, lr}
 800301a:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 800301c:	2400      	movs	r4, #0
 800301e:	9401      	str	r4, [sp, #4]
 8003020:	9402      	str	r4, [sp, #8]
 8003022:	9403      	str	r4, [sp, #12]
 8003024:	9404      	str	r4, [sp, #16]
 8003026:	9405      	str	r4, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 8003028:	9400      	str	r4, [sp, #0]
  hrtc.Instance = RTC;
 800302a:	4d15      	ldr	r5, [pc, #84]	; (8003080 <MX_RTC_Init+0x68>)
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <MX_RTC_Init+0x6c>)
 800302e:	602b      	str	r3, [r5, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003030:	606c      	str	r4, [r5, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003032:	237f      	movs	r3, #127	; 0x7f
 8003034:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = 255;
 8003036:	23ff      	movs	r3, #255	; 0xff
 8003038:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800303a:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800303c:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800303e:	61ac      	str	r4, [r5, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003040:	4628      	mov	r0, r5
 8003042:	f002 ffac 	bl	8005f9e <HAL_RTC_Init>
  sTime.Hours = 0x0;
 8003046:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 800304a:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 800304e:	f88d 4006 	strb.w	r4, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003052:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003054:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003056:	2201      	movs	r2, #1
 8003058:	a901      	add	r1, sp, #4
 800305a:	4628      	mov	r0, r5
 800305c:	f003 f80c 	bl	8006078 <HAL_RTC_SetTime>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003060:	2201      	movs	r2, #1
 8003062:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8003066:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800306a:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800306e:	f88d 4003 	strb.w	r4, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003072:	4669      	mov	r1, sp
 8003074:	4628      	mov	r0, r5
 8003076:	f003 f87e 	bl	8006176 <HAL_RTC_SetDate>
}
 800307a:	b007      	add	sp, #28
 800307c:	bd30      	pop	{r4, r5, pc}
 800307e:	bf00      	nop
 8003080:	20002f34 	.word	0x20002f34
 8003084:	40002800 	.word	0x40002800

08003088 <MX_CRC_Init>:
{
 8003088:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800308a:	4803      	ldr	r0, [pc, #12]	; (8003098 <MX_CRC_Init+0x10>)
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <MX_CRC_Init+0x14>)
 800308e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003090:	f001 fa92 	bl	80045b8 <HAL_CRC_Init>
}
 8003094:	bd08      	pop	{r3, pc}
 8003096:	bf00      	nop
 8003098:	20002dc0 	.word	0x20002dc0
 800309c:	40023000 	.word	0x40023000

080030a0 <MX_TIM11_Init>:
{
 80030a0:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 80030a2:	4807      	ldr	r0, [pc, #28]	; (80030c0 <MX_TIM11_Init+0x20>)
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <MX_TIM11_Init+0x24>)
 80030a6:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ac:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 8400 - 1;
 80030ae:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80030b2:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b4:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030b6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80030b8:	f003 fe62 	bl	8006d80 <HAL_TIM_Base_Init>
}
 80030bc:	bd08      	pop	{r3, pc}
 80030be:	bf00      	nop
 80030c0:	20002ef0 	.word	0x20002ef0
 80030c4:	40014800 	.word	0x40014800

080030c8 <StartDefaultTask>:
{
 80030c8:	b508      	push	{r3, lr}
    osDelay(1);
 80030ca:	2001      	movs	r0, #1
 80030cc:	f004 fc53 	bl	8007976 <osDelay>
 80030d0:	e7fb      	b.n	80030ca <StartDefaultTask+0x2>
	...

080030d4 <SystemClock_Config>:
{
 80030d4:	b530      	push	{r4, r5, lr}
 80030d6:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030d8:	2230      	movs	r2, #48	; 0x30
 80030da:	2100      	movs	r1, #0
 80030dc:	eb0d 0002 	add.w	r0, sp, r2
 80030e0:	f006 fd8f 	bl	8009c02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030e4:	2400      	movs	r4, #0
 80030e6:	9407      	str	r4, [sp, #28]
 80030e8:	9408      	str	r4, [sp, #32]
 80030ea:	9409      	str	r4, [sp, #36]	; 0x24
 80030ec:	940a      	str	r4, [sp, #40]	; 0x28
 80030ee:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030f0:	9402      	str	r4, [sp, #8]
 80030f2:	9403      	str	r4, [sp, #12]
 80030f4:	9404      	str	r4, [sp, #16]
 80030f6:	9405      	str	r4, [sp, #20]
 80030f8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fa:	9400      	str	r4, [sp, #0]
 80030fc:	4b21      	ldr	r3, [pc, #132]	; (8003184 <SystemClock_Config+0xb0>)
 80030fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003100:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003110:	9401      	str	r4, [sp, #4]
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <SystemClock_Config+0xb4>)
 8003114:	6813      	ldr	r3, [r2, #0]
 8003116:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800311a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800312a:	2305      	movs	r3, #5
 800312c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800312e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003132:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003134:	2301      	movs	r3, #1
 8003136:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003138:	2502      	movs	r5, #2
 800313a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800313c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003140:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003142:	2319      	movs	r3, #25
 8003144:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003146:	23a8      	movs	r3, #168	; 0xa8
 8003148:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800314a:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800314c:	2304      	movs	r3, #4
 800314e:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003150:	a80c      	add	r0, sp, #48	; 0x30
 8003152:	f002 fae5 	bl	8005720 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003156:	230f      	movs	r3, #15
 8003158:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800315a:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800315c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800315e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003162:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003164:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003166:	4629      	mov	r1, r5
 8003168:	a807      	add	r0, sp, #28
 800316a:	f002 fd25 	bl	8005bb8 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800316e:	9502      	str	r5, [sp, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003174:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003176:	a802      	add	r0, sp, #8
 8003178:	f002 fe26 	bl	8005dc8 <HAL_RCCEx_PeriphCLKConfig>
  HAL_RCC_EnableCSS();
 800317c:	f002 fcc2 	bl	8005b04 <HAL_RCC_EnableCSS>
}
 8003180:	b019      	add	sp, #100	; 0x64
 8003182:	bd30      	pop	{r4, r5, pc}
 8003184:	40023800 	.word	0x40023800
 8003188:	40007000 	.word	0x40007000

0800318c <main>:
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b0b6      	sub	sp, #216	; 0xd8
  HAL_Init();
 8003190:	f001 f804 	bl	800419c <HAL_Init>
  SystemClock_Config();
 8003194:	f7ff ff9e 	bl	80030d4 <SystemClock_Config>
  MX_GPIO_Init();
 8003198:	f7ff fce4 	bl	8002b64 <MX_GPIO_Init>
  MX_DMA_Init();
 800319c:	f7ff fd8e 	bl	8002cbc <MX_DMA_Init>
  MX_I2C1_Init();
 80031a0:	f7ff fdc0 	bl	8002d24 <MX_I2C1_Init>
  MX_SPI1_Init();
 80031a4:	f7ff fdd8 	bl	8002d58 <MX_SPI1_Init>
  MX_TIM1_Init();
 80031a8:	f7ff fdf4 	bl	8002d94 <MX_TIM1_Init>
  MX_TIM3_Init();
 80031ac:	f7ff fe48 	bl	8002e40 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80031b0:	f7ff fec2 	bl	8002f38 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031b4:	f7ff fed6 	bl	8002f64 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80031b8:	f7ff feea 	bl	8002f90 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80031bc:	f7ff fe82 	bl	8002ec4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80031c0:	f7ff fefc 	bl	8002fbc <MX_ADC1_Init>
  MX_RTC_Init();
 80031c4:	f7ff ff28 	bl	8003018 <MX_RTC_Init>
  MX_CRC_Init();
 80031c8:	f7ff ff5e 	bl	8003088 <MX_CRC_Init>
  MX_TIM11_Init();
 80031cc:	f7ff ff68 	bl	80030a0 <MX_TIM11_Init>
  Config_Init(&hi2c1);
 80031d0:	483f      	ldr	r0, [pc, #252]	; (80032d0 <main+0x144>)
 80031d2:	f7fd fe35 	bl	8000e40 <Config_Init>
  osMutexDef(SPIMutex);
 80031d6:	2500      	movs	r5, #0
 80031d8:	9534      	str	r5, [sp, #208]	; 0xd0
 80031da:	9535      	str	r5, [sp, #212]	; 0xd4
  SPIMutexHandle = osMutexCreate(osMutex(SPIMutex));
 80031dc:	a834      	add	r0, sp, #208	; 0xd0
 80031de:	f004 fbf5 	bl	80079cc <osMutexCreate>
 80031e2:	4b3c      	ldr	r3, [pc, #240]	; (80032d4 <main+0x148>)
 80031e4:	6018      	str	r0, [r3, #0]
  osTimerDef(Config, ConfigSaveTmr);
 80031e6:	4b3c      	ldr	r3, [pc, #240]	; (80032d8 <main+0x14c>)
 80031e8:	9332      	str	r3, [sp, #200]	; 0xc8
 80031ea:	9533      	str	r5, [sp, #204]	; 0xcc
  ConfigHandle = osTimerCreate(osTimer(Config), osTimerOnce, NULL);
 80031ec:	462a      	mov	r2, r5
 80031ee:	4629      	mov	r1, r5
 80031f0:	a832      	add	r0, sp, #200	; 0xc8
 80031f2:	f004 fbc9 	bl	8007988 <osTimerCreate>
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <main+0x150>)
 80031f8:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80031fa:	4c39      	ldr	r4, [pc, #228]	; (80032e0 <main+0x154>)
 80031fc:	ae2b      	add	r6, sp, #172	; 0xac
 80031fe:	4627      	mov	r7, r4
 8003200:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003202:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003204:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003208:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800320c:	4629      	mov	r1, r5
 800320e:	a82b      	add	r0, sp, #172	; 0xac
 8003210:	f004 fb7b 	bl	800790a <osThreadCreate>
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <main+0x158>)
 8003216:	6018      	str	r0, [r3, #0]
  osThreadDef(PowerRegulation, RegulationTask, osPriorityRealtime, 0, 256);
 8003218:	ae24      	add	r6, sp, #144	; 0x90
 800321a:	f104 071c 	add.w	r7, r4, #28
 800321e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003220:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003222:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003226:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PowerRegulationHandle = osThreadCreate(osThread(PowerRegulation), NULL);
 800322a:	4629      	mov	r1, r5
 800322c:	a824      	add	r0, sp, #144	; 0x90
 800322e:	f004 fb6c 	bl	800790a <osThreadCreate>
 8003232:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <main+0x15c>)
 8003234:	6018      	str	r0, [r3, #0]
  osThreadDef(Diplays, DisplayTask, osPriorityNormal, 0, 256);
 8003236:	ae1d      	add	r6, sp, #116	; 0x74
 8003238:	f104 0738 	add.w	r7, r4, #56	; 0x38
 800323c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800323e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003240:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003244:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DiplaysHandle = osThreadCreate(osThread(Diplays), NULL);
 8003248:	4629      	mov	r1, r5
 800324a:	a81d      	add	r0, sp, #116	; 0x74
 800324c:	f004 fb5d 	bl	800790a <osThreadCreate>
 8003250:	4b26      	ldr	r3, [pc, #152]	; (80032ec <main+0x160>)
 8003252:	6018      	str	r0, [r3, #0]
  osThreadDef(Test, TestTask, osPriorityLow, 0, 128);
 8003254:	ae16      	add	r6, sp, #88	; 0x58
 8003256:	f104 0754 	add.w	r7, r4, #84	; 0x54
 800325a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800325c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800325e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003262:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TestHandle = osThreadCreate(osThread(Test), NULL);
 8003266:	4629      	mov	r1, r5
 8003268:	a816      	add	r0, sp, #88	; 0x58
 800326a:	f004 fb4e 	bl	800790a <osThreadCreate>
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <main+0x164>)
 8003270:	6018      	str	r0, [r3, #0]
  osThreadDef(Ethernet, EthernetTask, osPriorityHigh, 0, 256);
 8003272:	ae0f      	add	r6, sp, #60	; 0x3c
 8003274:	f104 0770 	add.w	r7, r4, #112	; 0x70
 8003278:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800327a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800327c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003280:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  EthernetHandle = osThreadCreate(osThread(Ethernet), NULL);
 8003284:	4629      	mov	r1, r5
 8003286:	a80f      	add	r0, sp, #60	; 0x3c
 8003288:	f004 fb3f 	bl	800790a <osThreadCreate>
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <main+0x168>)
 800328e:	6018      	str	r0, [r3, #0]
  osThreadDef(nRF24L01, RadioTask, osPriorityAboveNormal, 0, 256);
 8003290:	ae08      	add	r6, sp, #32
 8003292:	f104 078c 	add.w	r7, r4, #140	; 0x8c
 8003296:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003298:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800329a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800329e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  nRF24L01Handle = osThreadCreate(osThread(nRF24L01), NULL);
 80032a2:	4629      	mov	r1, r5
 80032a4:	a808      	add	r0, sp, #32
 80032a6:	f004 fb30 	bl	800790a <osThreadCreate>
 80032aa:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <main+0x16c>)
 80032ac:	6018      	str	r0, [r3, #0]
  osThreadDef(DataLog, DataLogTask, osPriorityBelowNormal, 0, 256);
 80032ae:	ae01      	add	r6, sp, #4
 80032b0:	34a8      	adds	r4, #168	; 0xa8
 80032b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80032b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032ba:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DataLogHandle = osThreadCreate(osThread(DataLog), NULL);
 80032be:	4629      	mov	r1, r5
 80032c0:	a801      	add	r0, sp, #4
 80032c2:	f004 fb22 	bl	800790a <osThreadCreate>
 80032c6:	4b0d      	ldr	r3, [pc, #52]	; (80032fc <main+0x170>)
 80032c8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80032ca:	f004 fb19 	bl	8007900 <osKernelStart>
 80032ce:	e7fe      	b.n	80032ce <main+0x142>
 80032d0:	20002d6c 	.word	0x20002d6c
 80032d4:	200030b0 	.word	0x200030b0
 80032d8:	08002b61 	.word	0x08002b61
 80032dc:	20002d68 	.word	0x20002d68
 80032e0:	0800a42c 	.word	0x0800a42c
 80032e4:	20002ca0 	.word	0x20002ca0
 80032e8:	20002d64 	.word	0x20002d64
 80032ec:	200030ac 	.word	0x200030ac
 80032f0:	20002f30 	.word	0x20002f30
 80032f4:	200030b8 	.word	0x200030b8
 80032f8:	20002c98 	.word	0x20002c98
 80032fc:	20002c9c 	.word	0x20002c9c

08003300 <HAL_UART_RxCpltCallback>:
}
 8003300:	4770      	bx	lr
	...

08003304 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003304:	b508      	push	{r3, lr}
	if(huart -> Instance == USART2){
 8003306:	6802      	ldr	r2, [r0, #0]
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_UART_TxCpltCallback+0x24>)
 800330a:	429a      	cmp	r2, r3
 800330c:	d000      	beq.n	8003310 <HAL_UART_TxCpltCallback+0xc>
}
 800330e:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(BUILT_IN_LED_GPIO_Port, BUILT_IN_LED_Pin, GPIO_PIN_SET);
 8003310:	2201      	movs	r2, #1
 8003312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003316:	4805      	ldr	r0, [pc, #20]	; (800332c <HAL_UART_TxCpltCallback+0x28>)
 8003318:	f001 fcac 	bl	8004c74 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MASTER_TE_GPIO_Port, MASTER_TE_Pin, GPIO_PIN_RESET);
 800331c:	2200      	movs	r2, #0
 800331e:	2102      	movs	r1, #2
 8003320:	4803      	ldr	r0, [pc, #12]	; (8003330 <HAL_UART_TxCpltCallback+0x2c>)
 8003322:	f001 fca7 	bl	8004c74 <HAL_GPIO_WritePin>
}
 8003326:	e7f2      	b.n	800330e <HAL_UART_TxCpltCallback+0xa>
 8003328:	40004400 	.word	0x40004400
 800332c:	40020800 	.word	0x40020800
 8003330:	40020000 	.word	0x40020000

08003334 <HAL_GPIO_EXTI_Callback>:
}
 8003334:	4770      	bx	lr
	...

08003338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM11){
 800333a:	6802      	ldr	r2, [r0, #0]
 800333c:	4b07      	ldr	r3, [pc, #28]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800333e:	429a      	cmp	r2, r3
 8003340:	d004      	beq.n	800334c <HAL_TIM_PeriodElapsedCallback+0x14>
		ulHighFreqTimerTicks ++;
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8003342:	6802      	ldr	r2, [r0, #0]
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003346:	429a      	cmp	r2, r3
 8003348:	d005      	beq.n	8003356 <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800334a:	bd08      	pop	{r3, pc}
		ulHighFreqTimerTicks ++;
 800334c:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e7f5      	b.n	8003342 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
 8003356:	f000 ff3b 	bl	80041d0 <HAL_IncTick>
}
 800335a:	e7f6      	b.n	800334a <HAL_TIM_PeriodElapsedCallback+0x12>
 800335c:	40014800 	.word	0x40014800
 8003360:	40014400 	.word	0x40014400
 8003364:	200030b4 	.word	0x200030b4

08003368 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//while(1);
  /* USER CODE END Error_Handler_Debug */
}
 8003368:	4770      	bx	lr
	...

0800336c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b500      	push	{lr}
 800336e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003370:	2200      	movs	r2, #0
 8003372:	9200      	str	r2, [sp, #0]
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_MspInit+0x40>)
 8003376:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003378:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800337c:	6459      	str	r1, [r3, #68]	; 0x44
 800337e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003380:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003384:	9100      	str	r1, [sp, #0]
 8003386:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	9201      	str	r2, [sp, #4]
 800338a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800338c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003390:	6419      	str	r1, [r3, #64]	; 0x40
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800339c:	210f      	movs	r1, #15
 800339e:	f06f 0001 	mvn.w	r0, #1
 80033a2:	f001 f8c7 	bl	8004534 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a6:	b003      	add	sp, #12
 80033a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80033ac:	40023800 	.word	0x40023800

080033b0 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80033b0:	6802      	ldr	r2, [r0, #0]
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_ADC_MspInit+0x28>)
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d000      	beq.n	80033ba <HAL_ADC_MspInit+0xa>
 80033b8:	4770      	bx	lr
{
 80033ba:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_ADC_MspInit+0x2c>)
 80033c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033d4:	b002      	add	sp, #8
 80033d6:	4770      	bx	lr
 80033d8:	40012000 	.word	0x40012000
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80033e0:	6802      	ldr	r2, [r0, #0]
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <HAL_CRC_MspInit+0x28>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d000      	beq.n	80033ea <HAL_CRC_MspInit+0xa>
 80033e8:	4770      	bx	lr
{
 80033ea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_CRC_MspInit+0x2c>)
 80033f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003404:	b002      	add	sp, #8
 8003406:	4770      	bx	lr
 8003408:	40023000 	.word	0x40023000
 800340c:	40023800 	.word	0x40023800

08003410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003410:	b530      	push	{r4, r5, lr}
 8003412:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	2300      	movs	r3, #0
 8003416:	9303      	str	r3, [sp, #12]
 8003418:	9304      	str	r3, [sp, #16]
 800341a:	9305      	str	r3, [sp, #20]
 800341c:	9306      	str	r3, [sp, #24]
 800341e:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8003420:	6802      	ldr	r2, [r0, #0]
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_I2C_MspInit+0x68>)
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003428:	b009      	add	sp, #36	; 0x24
 800342a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342c:	2500      	movs	r5, #0
 800342e:	9501      	str	r5, [sp, #4]
 8003430:	4c12      	ldr	r4, [pc, #72]	; (800347c <HAL_I2C_MspInit+0x6c>)
 8003432:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003434:	f043 0302 	orr.w	r3, r3, #2
 8003438:	6323      	str	r3, [r4, #48]	; 0x30
 800343a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003448:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800344a:	2312      	movs	r3, #18
 800344c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800344e:	2301      	movs	r3, #1
 8003450:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003456:	2304      	movs	r3, #4
 8003458:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345a:	a903      	add	r1, sp, #12
 800345c:	4808      	ldr	r0, [pc, #32]	; (8003480 <HAL_I2C_MspInit+0x70>)
 800345e:	f001 fb37 	bl	8004ad0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003462:	9502      	str	r5, [sp, #8]
 8003464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800346a:	6423      	str	r3, [r4, #64]	; 0x40
 800346c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800346e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	9b02      	ldr	r3, [sp, #8]
}
 8003476:	e7d7      	b.n	8003428 <HAL_I2C_MspInit+0x18>
 8003478:	40005400 	.word	0x40005400
 800347c:	40023800 	.word	0x40023800
 8003480:	40020400 	.word	0x40020400

08003484 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003484:	6802      	ldr	r2, [r0, #0]
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <HAL_RTC_MspInit+0x14>)
 8003488:	429a      	cmp	r2, r3
 800348a:	d000      	beq.n	800348e <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800348c:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800348e:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RTC_MspInit+0x18>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	e7fa      	b.n	800348c <HAL_RTC_MspInit+0x8>
 8003496:	bf00      	nop
 8003498:	40002800 	.word	0x40002800
 800349c:	42470e3c 	.word	0x42470e3c

080034a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034a0:	b500      	push	{lr}
 80034a2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	2300      	movs	r3, #0
 80034a6:	9303      	str	r3, [sp, #12]
 80034a8:	9304      	str	r3, [sp, #16]
 80034aa:	9305      	str	r3, [sp, #20]
 80034ac:	9306      	str	r3, [sp, #24]
 80034ae:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80034b0:	6802      	ldr	r2, [r0, #0]
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_SPI_MspInit+0x68>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d002      	beq.n	80034be <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034b8:	b009      	add	sp, #36	; 0x24
 80034ba:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034be:	2100      	movs	r1, #0
 80034c0:	9101      	str	r1, [sp, #4]
 80034c2:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80034c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
 80034ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80034d4:	9201      	str	r2, [sp, #4]
 80034d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d8:	9102      	str	r1, [sp, #8]
 80034da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	9302      	str	r3, [sp, #8]
 80034ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034ec:	23e0      	movs	r3, #224	; 0xe0
 80034ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034f8:	2305      	movs	r3, #5
 80034fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fc:	a903      	add	r1, sp, #12
 80034fe:	4803      	ldr	r0, [pc, #12]	; (800350c <HAL_SPI_MspInit+0x6c>)
 8003500:	f001 fae6 	bl	8004ad0 <HAL_GPIO_Init>
}
 8003504:	e7d8      	b.n	80034b8 <HAL_SPI_MspInit+0x18>
 8003506:	bf00      	nop
 8003508:	40013000 	.word	0x40013000
 800350c:	40020000 	.word	0x40020000

08003510 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003510:	b510      	push	{r4, lr}
 8003512:	b084      	sub	sp, #16
  if(htim_pwm->Instance==TIM1)
 8003514:	6803      	ldr	r3, [r0, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_TIM_PWM_MspInit+0x8c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d007      	beq.n	800352c <HAL_TIM_PWM_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d021      	beq.n	8003566 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 8003522:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_TIM_PWM_MspInit+0x90>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02b      	beq.n	8003580 <HAL_TIM_PWM_MspInit+0x70>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003528:	b004      	add	sp, #16
 800352a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800352c:	2400      	movs	r4, #0
 800352e:	9401      	str	r4, [sp, #4]
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_TIM_PWM_MspInit+0x94>)
 8003532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003544:	4622      	mov	r2, r4
 8003546:	4621      	mov	r1, r4
 8003548:	2019      	movs	r0, #25
 800354a:	f000 fff3 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800354e:	2019      	movs	r0, #25
 8003550:	f001 f824 	bl	800459c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003554:	4622      	mov	r2, r4
 8003556:	2105      	movs	r1, #5
 8003558:	201a      	movs	r0, #26
 800355a:	f000 ffeb 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800355e:	201a      	movs	r0, #26
 8003560:	f001 f81c 	bl	800459c <HAL_NVIC_EnableIRQ>
 8003564:	e7e0      	b.n	8003528 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_TIM_PWM_MspInit+0x94>)
 800356c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	9302      	str	r3, [sp, #8]
 800357c:	9b02      	ldr	r3, [sp, #8]
 800357e:	e7d3      	b.n	8003528 <HAL_TIM_PWM_MspInit+0x18>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003580:	2300      	movs	r3, #0
 8003582:	9303      	str	r3, [sp, #12]
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_TIM_PWM_MspInit+0x94>)
 8003586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003588:	f042 0202 	orr.w	r2, r2, #2
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	9b03      	ldr	r3, [sp, #12]
}
 8003598:	e7c6      	b.n	8003528 <HAL_TIM_PWM_MspInit+0x18>
 800359a:	bf00      	nop
 800359c:	40010000 	.word	0x40010000
 80035a0:	40000400 	.word	0x40000400
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 80035a8:	6802      	ldr	r2, [r0, #0]
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_TIM_Base_MspInit+0x3c>)
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d000      	beq.n	80035b2 <HAL_TIM_Base_MspInit+0xa>
 80035b0:	4770      	bx	lr
{
 80035b2:	b500      	push	{lr}
 80035b4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80035b6:	2200      	movs	r2, #0
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 80035be:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80035c0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80035c4:	6459      	str	r1, [r3, #68]	; 0x44
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	9b01      	ldr	r3, [sp, #4]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80035d0:	2105      	movs	r1, #5
 80035d2:	201a      	movs	r0, #26
 80035d4:	f000 ffae 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035d8:	201a      	movs	r0, #26
 80035da:	f000 ffdf 	bl	800459c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80035de:	b003      	add	sp, #12
 80035e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80035e4:	40014800 	.word	0x40014800

080035e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ec:	2300      	movs	r3, #0
 80035ee:	9305      	str	r3, [sp, #20]
 80035f0:	9306      	str	r3, [sp, #24]
 80035f2:	9307      	str	r3, [sp, #28]
 80035f4:	9308      	str	r3, [sp, #32]
 80035f6:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim->Instance==TIM1)
 80035f8:	6803      	ldr	r3, [r0, #0]
 80035fa:	4a32      	ldr	r2, [pc, #200]	; (80036c4 <HAL_TIM_MspPostInit+0xdc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d007      	beq.n	8003610 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8003600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003604:	d01c      	beq.n	8003640 <HAL_TIM_MspPostInit+0x58>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 8003606:	4a30      	ldr	r2, [pc, #192]	; (80036c8 <HAL_TIM_MspPostInit+0xe0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d045      	beq.n	8003698 <HAL_TIM_MspPostInit+0xb0>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800360c:	b00a      	add	sp, #40	; 0x28
 800360e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003610:	2300      	movs	r3, #0
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	4b2d      	ldr	r3, [pc, #180]	; (80036cc <HAL_TIM_MspPostInit+0xe4>)
 8003616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003628:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800362c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362e:	2302      	movs	r3, #2
 8003630:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003632:	2301      	movs	r3, #1
 8003634:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	a905      	add	r1, sp, #20
 8003638:	4825      	ldr	r0, [pc, #148]	; (80036d0 <HAL_TIM_MspPostInit+0xe8>)
 800363a:	f001 fa49 	bl	8004ad0 <HAL_GPIO_Init>
 800363e:	e7e5      	b.n	800360c <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	2400      	movs	r4, #0
 8003642:	9402      	str	r4, [sp, #8]
 8003644:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003652:	f002 0201 	and.w	r2, r2, #1
 8003656:	9202      	str	r2, [sp, #8]
 8003658:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	9403      	str	r4, [sp, #12]
 800365c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365e:	f042 0202 	orr.w	r2, r2, #2
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	9303      	str	r3, [sp, #12]
 800366c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800366e:	2501      	movs	r5, #1
 8003670:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	2602      	movs	r6, #2
 8003674:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003676:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003678:	a905      	add	r1, sp, #20
 800367a:	4815      	ldr	r0, [pc, #84]	; (80036d0 <HAL_TIM_MspPostInit+0xe8>)
 800367c:	f001 fa28 	bl	8004ad0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8003680:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8003684:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003688:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800368c:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368e:	a905      	add	r1, sp, #20
 8003690:	4810      	ldr	r0, [pc, #64]	; (80036d4 <HAL_TIM_MspPostInit+0xec>)
 8003692:	f001 fa1d 	bl	8004ad0 <HAL_GPIO_Init>
 8003696:	e7b9      	b.n	800360c <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003698:	2300      	movs	r3, #0
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_TIM_MspPostInit+0xe4>)
 800369e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a0:	f042 0202 	orr.w	r2, r2, #2
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	9304      	str	r3, [sp, #16]
 80036ae:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80036b0:	2331      	movs	r3, #49	; 0x31
 80036b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b4:	2302      	movs	r3, #2
 80036b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036b8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	a905      	add	r1, sp, #20
 80036bc:	4805      	ldr	r0, [pc, #20]	; (80036d4 <HAL_TIM_MspPostInit+0xec>)
 80036be:	f001 fa07 	bl	8004ad0 <HAL_GPIO_Init>
}
 80036c2:	e7a3      	b.n	800360c <HAL_TIM_MspPostInit+0x24>
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400

080036d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036d8:	b530      	push	{r4, r5, lr}
 80036da:	b08d      	sub	sp, #52	; 0x34
 80036dc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036de:	2300      	movs	r3, #0
 80036e0:	9307      	str	r3, [sp, #28]
 80036e2:	9308      	str	r3, [sp, #32]
 80036e4:	9309      	str	r3, [sp, #36]	; 0x24
 80036e6:	930a      	str	r3, [sp, #40]	; 0x28
 80036e8:	930b      	str	r3, [sp, #44]	; 0x2c
  if(huart->Instance==USART1)
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_UART_MspInit+0x1d0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d008      	beq.n	8003704 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80036f2:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_UART_MspInit+0x1d4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d04b      	beq.n	8003790 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80036f8:	4a6d      	ldr	r2, [pc, #436]	; (80038b0 <HAL_UART_MspInit+0x1d8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	f000 808c 	beq.w	8003818 <HAL_UART_MspInit+0x140>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003700:	b00d      	add	sp, #52	; 0x34
 8003702:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003704:	2500      	movs	r5, #0
 8003706:	9501      	str	r5, [sp, #4]
 8003708:	4b6a      	ldr	r3, [pc, #424]	; (80038b4 <HAL_UART_MspInit+0x1dc>)
 800370a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800370c:	f042 0210 	orr.w	r2, r2, #16
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
 8003712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003714:	f002 0210 	and.w	r2, r2, #16
 8003718:	9201      	str	r2, [sp, #4]
 800371a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371c:	9502      	str	r5, [sp, #8]
 800371e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003720:	f042 0202 	orr.w	r2, r2, #2
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003730:	23c0      	movs	r3, #192	; 0xc0
 8003732:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003738:	2303      	movs	r3, #3
 800373a:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800373c:	2307      	movs	r3, #7
 800373e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003740:	a907      	add	r1, sp, #28
 8003742:	485d      	ldr	r0, [pc, #372]	; (80038b8 <HAL_UART_MspInit+0x1e0>)
 8003744:	f001 f9c4 	bl	8004ad0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003748:	485c      	ldr	r0, [pc, #368]	; (80038bc <HAL_UART_MspInit+0x1e4>)
 800374a:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_UART_MspInit+0x1e8>)
 800374c:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800374e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003752:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003754:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003756:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375c:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800375e:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003760:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003766:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003768:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800376a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800376c:	f000 ffc8 	bl	8004700 <HAL_DMA_Init>
 8003770:	b958      	cbnz	r0, 800378a <HAL_UART_MspInit+0xb2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003772:	4b52      	ldr	r3, [pc, #328]	; (80038bc <HAL_UART_MspInit+0x1e4>)
 8003774:	6363      	str	r3, [r4, #52]	; 0x34
 8003776:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2105      	movs	r1, #5
 800377c:	2025      	movs	r0, #37	; 0x25
 800377e:	f000 fed9 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003782:	2025      	movs	r0, #37	; 0x25
 8003784:	f000 ff0a 	bl	800459c <HAL_NVIC_EnableIRQ>
 8003788:	e7ba      	b.n	8003700 <HAL_UART_MspInit+0x28>
      Error_Handler();
 800378a:	f7ff fded 	bl	8003368 <Error_Handler>
 800378e:	e7f0      	b.n	8003772 <HAL_UART_MspInit+0x9a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003790:	2500      	movs	r5, #0
 8003792:	9503      	str	r5, [sp, #12]
 8003794:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_UART_MspInit+0x1dc>)
 8003796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003798:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
 800379e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037a0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80037a4:	9203      	str	r2, [sp, #12]
 80037a6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a8:	9504      	str	r5, [sp, #16]
 80037aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	9304      	str	r3, [sp, #16]
 80037ba:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037bc:	230c      	movs	r3, #12
 80037be:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c0:	2302      	movs	r3, #2
 80037c2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c4:	2303      	movs	r3, #3
 80037c6:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037c8:	2307      	movs	r3, #7
 80037ca:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037cc:	a907      	add	r1, sp, #28
 80037ce:	483d      	ldr	r0, [pc, #244]	; (80038c4 <HAL_UART_MspInit+0x1ec>)
 80037d0:	f001 f97e 	bl	8004ad0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80037d4:	483c      	ldr	r0, [pc, #240]	; (80038c8 <HAL_UART_MspInit+0x1f0>)
 80037d6:	4b3d      	ldr	r3, [pc, #244]	; (80038cc <HAL_UART_MspInit+0x1f4>)
 80037d8:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80037da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037de:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037e0:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e2:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e8:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037ea:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ec:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80037ee:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037f0:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037f2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037f4:	f000 ff84 	bl	8004700 <HAL_DMA_Init>
 80037f8:	b958      	cbnz	r0, 8003812 <HAL_UART_MspInit+0x13a>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037fa:	4b33      	ldr	r3, [pc, #204]	; (80038c8 <HAL_UART_MspInit+0x1f0>)
 80037fc:	6363      	str	r3, [r4, #52]	; 0x34
 80037fe:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003800:	2200      	movs	r2, #0
 8003802:	2105      	movs	r1, #5
 8003804:	2026      	movs	r0, #38	; 0x26
 8003806:	f000 fe95 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800380a:	2026      	movs	r0, #38	; 0x26
 800380c:	f000 fec6 	bl	800459c <HAL_NVIC_EnableIRQ>
 8003810:	e776      	b.n	8003700 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8003812:	f7ff fda9 	bl	8003368 <Error_Handler>
 8003816:	e7f0      	b.n	80037fa <HAL_UART_MspInit+0x122>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003818:	2500      	movs	r5, #0
 800381a:	9505      	str	r5, [sp, #20]
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <HAL_UART_MspInit+0x1dc>)
 800381e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003820:	f042 0220 	orr.w	r2, r2, #32
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
 8003826:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003828:	f002 0220 	and.w	r2, r2, #32
 800382c:	9205      	str	r2, [sp, #20]
 800382e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003830:	9506      	str	r5, [sp, #24]
 8003832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003834:	f042 0201 	orr.w	r2, r2, #1
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	9306      	str	r3, [sp, #24]
 8003842:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003844:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003848:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384e:	2303      	movs	r3, #3
 8003850:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003852:	2308      	movs	r3, #8
 8003854:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003856:	a907      	add	r1, sp, #28
 8003858:	481a      	ldr	r0, [pc, #104]	; (80038c4 <HAL_UART_MspInit+0x1ec>)
 800385a:	f001 f939 	bl	8004ad0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800385e:	481c      	ldr	r0, [pc, #112]	; (80038d0 <HAL_UART_MspInit+0x1f8>)
 8003860:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <HAL_UART_MspInit+0x1fc>)
 8003862:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003864:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8003868:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800386a:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800386c:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800386e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003872:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003874:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003876:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8003878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800387c:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800387e:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003880:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003882:	f000 ff3d 	bl	8004700 <HAL_DMA_Init>
 8003886:	b958      	cbnz	r0, 80038a0 <HAL_UART_MspInit+0x1c8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <HAL_UART_MspInit+0x1f8>)
 800388a:	6363      	str	r3, [r4, #52]	; 0x34
 800388c:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2105      	movs	r1, #5
 8003892:	2047      	movs	r0, #71	; 0x47
 8003894:	f000 fe4e 	bl	8004534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003898:	2047      	movs	r0, #71	; 0x47
 800389a:	f000 fe7f 	bl	800459c <HAL_NVIC_EnableIRQ>
}
 800389e:	e72f      	b.n	8003700 <HAL_UART_MspInit+0x28>
      Error_Handler();
 80038a0:	f7ff fd62 	bl	8003368 <Error_Handler>
 80038a4:	e7f0      	b.n	8003888 <HAL_UART_MspInit+0x1b0>
 80038a6:	bf00      	nop
 80038a8:	40011000 	.word	0x40011000
 80038ac:	40004400 	.word	0x40004400
 80038b0:	40011400 	.word	0x40011400
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40020400 	.word	0x40020400
 80038bc:	20002e50 	.word	0x20002e50
 80038c0:	40026440 	.word	0x40026440
 80038c4:	40020000 	.word	0x40020000
 80038c8:	20002ca4 	.word	0x20002ca4
 80038cc:	40026088 	.word	0x40026088
 80038d0:	20002d04 	.word	0x20002d04
 80038d4:	40026428 	.word	0x40026428

080038d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d8:	b510      	push	{r4, lr}
 80038da:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80038dc:	2200      	movs	r2, #0
 80038de:	4601      	mov	r1, r0
 80038e0:	2019      	movs	r0, #25
 80038e2:	f000 fe27 	bl	8004534 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80038e6:	2019      	movs	r0, #25
 80038e8:	f000 fe58 	bl	800459c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80038ec:	2400      	movs	r4, #0
 80038ee:	9401      	str	r4, [sp, #4]
 80038f0:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_InitTick+0x68>)
 80038f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003904:	a902      	add	r1, sp, #8
 8003906:	a803      	add	r0, sp, #12
 8003908:	f002 fa2c 	bl	8005d64 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800390c:	f002 fa1a 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_InitTick+0x6c>)
 8003912:	fba3 2300 	umull	r2, r3, r3, r0
 8003916:	0c9b      	lsrs	r3, r3, #18
 8003918:	3b01      	subs	r3, #1
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800391a:	480b      	ldr	r0, [pc, #44]	; (8003948 <HAL_InitTick+0x70>)
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <HAL_InitTick+0x74>)
 800391e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8003920:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003924:	60c2      	str	r2, [r0, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8003926:	6043      	str	r3, [r0, #4]
  htim10.Init.ClockDivision = 0;
 8003928:	6104      	str	r4, [r0, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392a:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800392c:	f003 fa28 	bl	8006d80 <HAL_TIM_Base_Init>
 8003930:	b110      	cbz	r0, 8003938 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003932:	2001      	movs	r0, #1
}
 8003934:	b008      	add	sp, #32
 8003936:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim10);
 8003938:	4803      	ldr	r0, [pc, #12]	; (8003948 <HAL_InitTick+0x70>)
 800393a:	f003 f901 	bl	8006b40 <HAL_TIM_Base_Start_IT>
 800393e:	e7f9      	b.n	8003934 <HAL_InitTick+0x5c>
 8003940:	40023800 	.word	0x40023800
 8003944:	431bde83 	.word	0x431bde83
 8003948:	200030bc 	.word	0x200030bc
 800394c:	40014400 	.word	0x40014400

08003950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003952:	f002 fa27 	bl	8005da4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003956:	bd08      	pop	{r3, pc}

08003958 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003958:	e7fe      	b.n	8003958 <HardFault_Handler>

0800395a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800395a:	e7fe      	b.n	800395a <MemManage_Handler>

0800395c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800395c:	e7fe      	b.n	800395c <BusFault_Handler>

0800395e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800395e:	e7fe      	b.n	800395e <UsageFault_Handler>

08003960 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003960:	4770      	bx	lr

08003962 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003962:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003964:	2002      	movs	r0, #2
 8003966:	f001 f98b 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800396a:	bd08      	pop	{r3, pc}

0800396c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800396c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800396e:	4802      	ldr	r0, [pc, #8]	; (8003978 <DMA1_Stream5_IRQHandler+0xc>)
 8003970:	f000 ffbe 	bl	80048f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003974:	bd08      	pop	{r3, pc}
 8003976:	bf00      	nop
 8003978:	20002ca4 	.word	0x20002ca4

0800397c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800397c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800397e:	4803      	ldr	r0, [pc, #12]	; (800398c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003980:	f003 f8f3 	bl	8006b6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003986:	f003 f8f0 	bl	8006b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800398a:	bd08      	pop	{r3, pc}
 800398c:	20002f54 	.word	0x20002f54
 8003990:	200030bc 	.word	0x200030bc

08003994 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003994:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003996:	4803      	ldr	r0, [pc, #12]	; (80039a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003998:	f003 f8e7 	bl	8006b6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800399e:	f003 f8e4 	bl	8006b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80039a2:	bd08      	pop	{r3, pc}
 80039a4:	20002f54 	.word	0x20002f54
 80039a8:	20002ef0 	.word	0x20002ef0

080039ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_small_comm);
 80039ae:	4802      	ldr	r0, [pc, #8]	; (80039b8 <USART1_IRQHandler+0xc>)
 80039b0:	f7ff f844 	bl	8002a3c <UARTDMA_UartIrqHandler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039b4:	bd08      	pop	{r3, pc}
 80039b6:	bf00      	nop
 80039b8:	20002b68 	.word	0x20002b68

080039bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039be:	4802      	ldr	r0, [pc, #8]	; (80039c8 <USART2_IRQHandler+0xc>)
 80039c0:	f003 febc 	bl	800773c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039c4:	bd08      	pop	{r3, pc}
 80039c6:	bf00      	nop
 80039c8:	2000306c 	.word	0x2000306c

080039cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80039ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80039d2:	f001 f955 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039d6:	bd08      	pop	{r3, pc}

080039d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80039d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_big_comm);
 80039da:	4802      	ldr	r0, [pc, #8]	; (80039e4 <DMA2_Stream1_IRQHandler+0xc>)
 80039dc:	f7ff f844 	bl	8002a68 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80039e0:	bd08      	pop	{r3, pc}
 80039e2:	bf00      	nop
 80039e4:	20002ab4 	.word	0x20002ab4

080039e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80039e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	UARTDMA_DmaIrqHandler(&nextion_small_comm);
 80039ea:	4802      	ldr	r0, [pc, #8]	; (80039f4 <DMA2_Stream2_IRQHandler+0xc>)
 80039ec:	f7ff f83c 	bl	8002a68 <UARTDMA_DmaIrqHandler>
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80039f0:	bd08      	pop	{r3, pc}
 80039f2:	bf00      	nop
 80039f4:	20002b68 	.word	0x20002b68

080039f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80039f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */
	UARTDMA_UartIrqHandler(&nextion_big_comm);
 80039fa:	4802      	ldr	r0, [pc, #8]	; (8003a04 <USART6_IRQHandler+0xc>)
 80039fc:	f7ff f81e 	bl	8002a3c <UARTDMA_UartIrqHandler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a00:	bd08      	pop	{r3, pc}
 8003a02:	bf00      	nop
 8003a04:	20002ab4 	.word	0x20002ab4

08003a08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003a08:	b508      	push	{r3, lr}
 8003a0a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a0c:	4a0b      	ldr	r2, [pc, #44]	; (8003a3c <_sbrk+0x34>)
 8003a0e:	6812      	ldr	r2, [r2, #0]
 8003a10:	b142      	cbz	r2, 8003a24 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <_sbrk+0x34>)
 8003a14:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003a16:	4403      	add	r3, r0
 8003a18:	466a      	mov	r2, sp
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d806      	bhi.n	8003a2c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003a1e:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <_sbrk+0x34>)
 8003a20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003a22:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003a24:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <_sbrk+0x34>)
 8003a26:	4906      	ldr	r1, [pc, #24]	; (8003a40 <_sbrk+0x38>)
 8003a28:	6011      	str	r1, [r2, #0]
 8003a2a:	e7f2      	b.n	8003a12 <_sbrk+0xa>
		errno = ENOMEM;
 8003a2c:	f006 f8b4 	bl	8009b98 <__errno>
 8003a30:	230c      	movs	r3, #12
 8003a32:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	e7f3      	b.n	8003a22 <_sbrk+0x1a>
 8003a3a:	bf00      	nop
 8003a3c:	200007e8 	.word	0x200007e8
 8003a40:	20003148 	.word	0x20003148

08003a44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <SystemInit+0x18>)
 8003a46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a4a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a56:	609a      	str	r2, [r3, #8]
#endif
}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <nRF24_Delay_ms>:

#define NRF24_CE_HIGH		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET)
#define NRF24_CE_LOW		HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET)

static void nRF24_Delay_ms(uint8_t Time)
{
 8003a60:	b508      	push	{r3, lr}
	vTaskDelay(Time);
 8003a62:	f005 f827 	bl	8008ab4 <vTaskDelay>
}
 8003a66:	bd08      	pop	{r3, pc}

08003a68 <nRF24_SendSpi>:

static void nRF24_SendSpi(uint8_t *Data, uint8_t Length)
{
 8003a68:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(hspi_nrf, Data, Length, 1000);
 8003a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a6e:	460a      	mov	r2, r1
 8003a70:	4601      	mov	r1, r0
 8003a72:	4802      	ldr	r0, [pc, #8]	; (8003a7c <nRF24_SendSpi+0x14>)
 8003a74:	6800      	ldr	r0, [r0, #0]
 8003a76:	f002 fd49 	bl	800650c <HAL_SPI_Transmit>
}
 8003a7a:	bd08      	pop	{r3, pc}
 8003a7c:	20000800 	.word	0x20000800

08003a80 <nRF24_WriteRegister>:

	NRF24_CSN_HIGH;
}

static void nRF24_WriteRegister(uint8_t reg, uint8_t val)
{
 8003a80:	b500      	push	{lr}
 8003a82:	b083      	sub	sp, #12
	uint8_t tmp[2];

	tmp[0] = NRF24_CMD_W_REGISTER | reg;
 8003a84:	f040 0020 	orr.w	r0, r0, #32
 8003a88:	f88d 0004 	strb.w	r0, [sp, #4]
	tmp[1] = val;
 8003a8c:	f88d 1005 	strb.w	r1, [sp, #5]

	NRF24_CSN_LOW;
 8003a90:	f7fe fd32 	bl	80024f8 <NRF_ChipSelect>

	nRF24_SendSpi(tmp, 2);
 8003a94:	2102      	movs	r1, #2
 8003a96:	a801      	add	r0, sp, #4
 8003a98:	f7ff ffe6 	bl	8003a68 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8003a9c:	f7fe fd3e 	bl	800251c <NRF_ChipDeselect>
}
 8003aa0:	b003      	add	sp, #12
 8003aa2:	f85d fb04 	ldr.w	pc, [sp], #4

08003aa6 <nRF24_WriteRegisters>:

static void nRF24_WriteRegisters(uint8_t reg, uint8_t* val, uint8_t len)
{
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	460d      	mov	r5, r1
 8003aac:	4616      	mov	r6, r2
	reg = NRF24_CMD_W_REGISTER | reg;
 8003aae:	f040 0020 	orr.w	r0, r0, #32
 8003ab2:	ac02      	add	r4, sp, #8
 8003ab4:	f804 0d01 	strb.w	r0, [r4, #-1]!

	NRF24_CSN_LOW;
 8003ab8:	f7fe fd1e 	bl	80024f8 <NRF_ChipSelect>

	nRF24_SendSpi(&reg, 1);
 8003abc:	2101      	movs	r1, #1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f7ff ffd2 	bl	8003a68 <nRF24_SendSpi>
	nRF24_SendSpi(val, len);
 8003ac4:	4631      	mov	r1, r6
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f7ff ffce 	bl	8003a68 <nRF24_SendSpi>

	NRF24_CSN_HIGH;
 8003acc:	f7fe fd26 	bl	800251c <NRF_ChipDeselect>
}
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}

08003ad4 <nRF24_ReadSpi>:
{
 8003ad4:	b508      	push	{r3, lr}
	HAL_SPI_Receive(hspi_nrf, Data, Length, 1000);
 8003ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ada:	460a      	mov	r2, r1
 8003adc:	4601      	mov	r1, r0
 8003ade:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <nRF24_ReadSpi+0x14>)
 8003ae0:	6800      	ldr	r0, [r0, #0]
 8003ae2:	f002 fef7 	bl	80068d4 <HAL_SPI_Receive>
}
 8003ae6:	bd08      	pop	{r3, pc}
 8003ae8:	20000800 	.word	0x20000800

08003aec <nRF24_ReadRegister>:
{
 8003aec:	b510      	push	{r4, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	ac04      	add	r4, sp, #16
 8003af2:	f804 0d09 	strb.w	r0, [r4, #-9]!
	NRF24_CSN_LOW;
 8003af6:	f7fe fcff 	bl	80024f8 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8003afa:	2101      	movs	r1, #1
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff ffb3 	bl	8003a68 <nRF24_SendSpi>
	nRF24_ReadSpi(&result, 1);
 8003b02:	2101      	movs	r1, #1
 8003b04:	f10d 000f 	add.w	r0, sp, #15
 8003b08:	f7ff ffe4 	bl	8003ad4 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8003b0c:	f7fe fd06 	bl	800251c <NRF_ChipDeselect>
}
 8003b10:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003b14:	b004      	add	sp, #16
 8003b16:	bd10      	pop	{r4, pc}

08003b18 <nRF24_ReadRegisters>:
{
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	460d      	mov	r5, r1
 8003b1e:	4616      	mov	r6, r2
 8003b20:	ac02      	add	r4, sp, #8
 8003b22:	f804 0d01 	strb.w	r0, [r4, #-1]!
	NRF24_CSN_LOW;
 8003b26:	f7fe fce7 	bl	80024f8 <NRF_ChipSelect>
	nRF24_SendSpi(&reg, 1);
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff ff9b 	bl	8003a68 <nRF24_SendSpi>
	nRF24_ReadSpi(ret, len);
 8003b32:	4631      	mov	r1, r6
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7ff ffcd 	bl	8003ad4 <nRF24_ReadSpi>
	NRF24_CSN_HIGH;
 8003b3a:	f7fe fcef 	bl	800251c <NRF_ChipDeselect>
}
 8003b3e:	b002      	add	sp, #8
 8003b40:	bd70      	pop	{r4, r5, r6, pc}

08003b42 <nRF24_ReadConfig>:

	nRF24_Delay_ms(1);
}

uint8_t nRF24_ReadConfig(void)
{
 8003b42:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_CONFIG));
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7ff ffd1 	bl	8003aec <nRF24_ReadRegister>
}
 8003b4a:	bd08      	pop	{r3, pc}

08003b4c <nRF24_WriteConfig>:

void nRF24_WriteConfig(uint8_t conf)
{
 8003b4c:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_CONFIG, conf);
 8003b4e:	4601      	mov	r1, r0
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7ff ff95 	bl	8003a80 <nRF24_WriteRegister>
}
 8003b56:	bd08      	pop	{r3, pc}

08003b58 <nRF24_SetPALevel>:

void nRF24_SetPALevel(uint8_t lev)
{
 8003b58:	b510      	push	{r4, lr}
 8003b5a:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8003b5c:	2006      	movs	r0, #6
 8003b5e:	f7ff ffc5 	bl	8003aec <nRF24_ReadRegister>
	rf_setup &= 0xF8; // Clear PWR bits
 8003b62:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	rf_setup |= (lev<<1);
 8003b66:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8003b6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
 8003b6e:	2006      	movs	r0, #6
 8003b70:	f7ff ff86 	bl	8003a80 <nRF24_WriteRegister>
}
 8003b74:	bd10      	pop	{r4, pc}

08003b76 <nRF24_SetDataRate>:

void nRF24_SetDataRate(uint8_t dr)
{
 8003b76:	b510      	push	{r4, lr}
 8003b78:	4604      	mov	r4, r0
	uint8_t rf_setup = nRF24_ReadRegister(NRF24_RF_SETUP);
 8003b7a:	2006      	movs	r0, #6
 8003b7c:	f7ff ffb6 	bl	8003aec <nRF24_ReadRegister>
	rf_setup &= 0xD7; // Clear DR bits (1MBPS)
 8003b80:	f000 01d7 	and.w	r1, r0, #215	; 0xd7
	if(dr == NRF24_RF_DR_250KBPS)
 8003b84:	2c02      	cmp	r4, #2
 8003b86:	d005      	beq.n	8003b94 <nRF24_SetDataRate+0x1e>
		rf_setup |= (1<<NRF24_RF_DR_LOW);
	else if(dr == NRF24_RF_DR_2MBPS)
 8003b88:	2c01      	cmp	r4, #1
 8003b8a:	d006      	beq.n	8003b9a <nRF24_SetDataRate+0x24>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
	nRF24_WriteRegister(NRF24_RF_SETUP, rf_setup);
 8003b8c:	2006      	movs	r0, #6
 8003b8e:	f7ff ff77 	bl	8003a80 <nRF24_WriteRegister>
}
 8003b92:	bd10      	pop	{r4, pc}
		rf_setup |= (1<<NRF24_RF_DR_LOW);
 8003b94:	f041 0120 	orr.w	r1, r1, #32
 8003b98:	e7f8      	b.n	8003b8c <nRF24_SetDataRate+0x16>
		rf_setup |= (1<<NRF24_RF_DR_HIGH);
 8003b9a:	f041 0108 	orr.w	r1, r1, #8
 8003b9e:	e7f5      	b.n	8003b8c <nRF24_SetDataRate+0x16>

08003ba0 <nRF24_ReadStatus>:

uint8_t nRF24_ReadStatus(void)
{
 8003ba0:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_STATUS));
 8003ba2:	2007      	movs	r0, #7
 8003ba4:	f7ff ffa2 	bl	8003aec <nRF24_ReadRegister>
}
 8003ba8:	bd08      	pop	{r3, pc}

08003baa <nRF24_WriteStatus>:

void nRF24_WriteStatus(uint8_t st)
{
 8003baa:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_STATUS, st);
 8003bac:	4601      	mov	r1, r0
 8003bae:	2007      	movs	r0, #7
 8003bb0:	f7ff ff66 	bl	8003a80 <nRF24_WriteRegister>
}
 8003bb4:	bd08      	pop	{r3, pc}

08003bb6 <nRF24_ReadFifoStatus>:
//
// FIFO Status
//

uint8_t nRF24_ReadFifoStatus(void)
{
 8003bb6:	b508      	push	{r3, lr}
	return (nRF24_ReadRegister(NRF24_FIFO_STATUS));
 8003bb8:	2017      	movs	r0, #23
 8003bba:	f7ff ff97 	bl	8003aec <nRF24_ReadRegister>
}
 8003bbe:	bd08      	pop	{r3, pc}

08003bc0 <nRF24_IsBitSetInFifoStatus>:
{
	nRF24_WriteRegister(NRF24_FIFO_STATUS, st);
}

uint8_t nRF24_IsBitSetInFifoStatus(uint8_t Bit)
{
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4604      	mov	r4, r0
	uint8_t FifoStatus;

	FifoStatus = nRF24_ReadFifoStatus();
 8003bc4:	f7ff fff7 	bl	8003bb6 <nRF24_ReadFifoStatus>

	if(FifoStatus & (1<<Bit))
 8003bc8:	4120      	asrs	r0, r4
 8003bca:	f010 0f01 	tst.w	r0, #1
 8003bce:	d101      	bne.n	8003bd4 <nRF24_IsBitSetInFifoStatus+0x14>
	{
		return 1;
	}

	return 0;
 8003bd0:	2000      	movs	r0, #0
}
 8003bd2:	bd10      	pop	{r4, pc}
		return 1;
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	e7fc      	b.n	8003bd2 <nRF24_IsBitSetInFifoStatus+0x12>

08003bd8 <nRF24_IsRxEmpty>:
{
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_FULL);
}

uint8_t nRF24_IsRxEmpty(void)
{
 8003bd8:	b508      	push	{r3, lr}
	return nRF24_IsBitSetInFifoStatus(NRF24_RX_EMPTY);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7ff fff0 	bl	8003bc0 <nRF24_IsBitSetInFifoStatus>
}
 8003be0:	bd08      	pop	{r3, pc}

08003be2 <nRF24_FlushRX>:

void nRF24_FlushRX(void)
{
 8003be2:	b510      	push	{r4, lr}
 8003be4:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_RX;
 8003be6:	ac02      	add	r4, sp, #8
 8003be8:	23e2      	movs	r3, #226	; 0xe2
 8003bea:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8003bee:	f7fe fc83 	bl	80024f8 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff ff37 	bl	8003a68 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8003bfa:	f7fe fc8f 	bl	800251c <NRF_ChipDeselect>
}
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd10      	pop	{r4, pc}

08003c02 <nRF24_FlushTX>:

void nRF24_FlushTX(void)
{
 8003c02:	b510      	push	{r4, lr}
 8003c04:	b082      	sub	sp, #8
	uint8_t command = NRF24_CMD_FLUSH_TX;
 8003c06:	ac02      	add	r4, sp, #8
 8003c08:	23e1      	movs	r3, #225	; 0xe1
 8003c0a:	f804 3d01 	strb.w	r3, [r4, #-1]!

	NRF24_CSN_LOW;
 8003c0e:	f7fe fc73 	bl	80024f8 <NRF_ChipSelect>
	nRF24_SendSpi(&command, 1);
 8003c12:	2101      	movs	r1, #1
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7ff ff27 	bl	8003a68 <nRF24_SendSpi>
	NRF24_CSN_HIGH;
 8003c1a:	f7fe fc7f 	bl	800251c <NRF_ChipDeselect>
}
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd10      	pop	{r4, pc}
	...

08003c24 <nRF24_TX_Mode>:
{
 8003c24:	b508      	push	{r3, lr}
	NRF24_CE_LOW;
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c2c:	480a      	ldr	r0, [pc, #40]	; (8003c58 <nRF24_TX_Mode+0x34>)
 8003c2e:	f001 f821 	bl	8004c74 <HAL_GPIO_WritePin>
	uint8_t config = nRF24_ReadConfig();
 8003c32:	f7ff ff86 	bl	8003b42 <nRF24_ReadConfig>
 8003c36:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	nRF24_WriteConfig(config);
 8003c3a:	f040 0002 	orr.w	r0, r0, #2
 8003c3e:	f7ff ff85 	bl	8003b4c <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8003c42:	2070      	movs	r0, #112	; 0x70
 8003c44:	f7ff ffb1 	bl	8003baa <nRF24_WriteStatus>
	nRF24_FlushRX();
 8003c48:	f7ff ffcb 	bl	8003be2 <nRF24_FlushRX>
	nRF24_FlushTX();
 8003c4c:	f7ff ffd9 	bl	8003c02 <nRF24_FlushTX>
	nRF24_Delay_ms(1);
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7ff ff05 	bl	8003a60 <nRF24_Delay_ms>
}
 8003c56:	bd08      	pop	{r3, pc}
 8003c58:	40020400 	.word	0x40020400

08003c5c <nRF24_EnableCRC>:

void nRF24_EnableCRC(uint8_t onoff)
{
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003c60:	f7ff ff6f 	bl	8003b42 <nRF24_ReadConfig>

	if(onoff)
 8003c64:	b924      	cbnz	r4, 8003c70 <nRF24_EnableCRC+0x14>
		config |= (1<<NRF24_EN_CRC);
	else
		config &= ~(1<<NRF24_EN_CRC);
 8003c66:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
	nRF24_WriteConfig(config);
 8003c6a:	f7ff ff6f 	bl	8003b4c <nRF24_WriteConfig>
}
 8003c6e:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_EN_CRC);
 8003c70:	f040 0008 	orr.w	r0, r0, #8
 8003c74:	b2c0      	uxtb	r0, r0
 8003c76:	e7f8      	b.n	8003c6a <nRF24_EnableCRC+0xe>

08003c78 <nRF24_SetCRCLength>:

void nRF24_SetCRCLength(uint8_t crcl)
{
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003c7c:	f7ff ff61 	bl	8003b42 <nRF24_ReadConfig>
	if(crcl == NRF24_CRC_WIDTH_2B)
 8003c80:	2c01      	cmp	r4, #1
 8003c82:	d004      	beq.n	8003c8e <nRF24_SetCRCLength+0x16>
		config |= (1<<NRF24_CRCO);
	else
		config &= ~(1<<NRF24_CRCO);
 8003c84:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
	nRF24_WriteConfig(config);
 8003c88:	f7ff ff60 	bl	8003b4c <nRF24_WriteConfig>
}
 8003c8c:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_CRCO);
 8003c8e:	f040 0004 	orr.w	r0, r0, #4
 8003c92:	b2c0      	uxtb	r0, r0
 8003c94:	e7f8      	b.n	8003c88 <nRF24_SetCRCLength+0x10>

08003c96 <nRF24_SetRetries>:

void nRF24_SetRetries(uint8_t ard, uint8_t arc)
{
 8003c96:	b508      	push	{r3, lr}
	// ard * 250us, arc repeats
	nRF24_WriteRegister(NRF24_SETUP_RETR, (((ard & 0x0F)<<NRF24_ARD) | ((arc & 0x0F)<<NRF24_ARC)));
 8003c98:	f001 010f 	and.w	r1, r1, #15
 8003c9c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8003ca0:	b2c9      	uxtb	r1, r1
 8003ca2:	2004      	movs	r0, #4
 8003ca4:	f7ff feec 	bl	8003a80 <nRF24_WriteRegister>
}
 8003ca8:	bd08      	pop	{r3, pc}

08003caa <nRF24_SetRFChannel>:

void nRF24_SetRFChannel(uint8_t channel)
{
 8003caa:	b508      	push	{r3, lr}
	nRF24_WriteRegister(NRF24_RF_CH, (channel & 0x7F));
 8003cac:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8003cb0:	2005      	movs	r0, #5
 8003cb2:	f7ff fee5 	bl	8003a80 <nRF24_WriteRegister>
}
 8003cb6:	bd08      	pop	{r3, pc}

08003cb8 <nRF24_EnablePipe>:
		pipe = 5; // Block too high pipe number
	nRF24_WriteRegister(NRF24_RX_PW_P0 + pipe , (size & 0x3F));
}

void nRF24_EnablePipe(uint8_t pipe, uint8_t onoff)
{
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4604      	mov	r4, r0
 8003cbc:	460d      	mov	r5, r1
	if(pipe > 5)
 8003cbe:	2805      	cmp	r0, #5
 8003cc0:	d900      	bls.n	8003cc4 <nRF24_EnablePipe+0xc>
		pipe = 5; // Block too high pipe number
 8003cc2:	2405      	movs	r4, #5
	uint8_t enable_pipe = nRF24_ReadRegister(NRF24_EN_RXADDR);
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f7ff ff11 	bl	8003aec <nRF24_ReadRegister>
	if(onoff == 1)
 8003cca:	2d01      	cmp	r5, #1
 8003ccc:	d008      	beq.n	8003ce0 <nRF24_EnablePipe+0x28>
		enable_pipe |= (1<<pipe);
	else
		enable_pipe &= ~(1<<pipe);
 8003cce:	2101      	movs	r1, #1
 8003cd0:	40a1      	lsls	r1, r4
 8003cd2:	ea20 0101 	bic.w	r1, r0, r1
 8003cd6:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_RXADDR, enable_pipe);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	f7ff fed1 	bl	8003a80 <nRF24_WriteRegister>
}
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
		enable_pipe |= (1<<pipe);
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	40a1      	lsls	r1, r4
 8003ce4:	4301      	orrs	r1, r0
 8003ce6:	b2c9      	uxtb	r1, r1
 8003ce8:	e7f6      	b.n	8003cd8 <nRF24_EnablePipe+0x20>

08003cea <nRF24_AutoACK>:

void nRF24_AutoACK(uint8_t pipe, uint8_t onoff)
{
 8003cea:	b538      	push	{r3, r4, r5, lr}
 8003cec:	4604      	mov	r4, r0
 8003cee:	460d      	mov	r5, r1
	if(pipe > 5)
 8003cf0:	2805      	cmp	r0, #5
 8003cf2:	d900      	bls.n	8003cf6 <nRF24_AutoACK+0xc>
		pipe = 5; // Block too high pipe number
 8003cf4:	2405      	movs	r4, #5
	uint8_t enaa = nRF24_ReadRegister(NRF24_EN_AA);
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7ff fef8 	bl	8003aec <nRF24_ReadRegister>
	if(onoff == 1)
 8003cfc:	2d01      	cmp	r5, #1
 8003cfe:	d008      	beq.n	8003d12 <nRF24_AutoACK+0x28>
		enaa |= (1<<pipe);
	else
		enaa &= ~(1<<pipe);
 8003d00:	2101      	movs	r1, #1
 8003d02:	40a1      	lsls	r1, r4
 8003d04:	ea20 0101 	bic.w	r1, r0, r1
 8003d08:	b2c9      	uxtb	r1, r1
	nRF24_WriteRegister(NRF24_EN_AA, enaa);
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f7ff feb8 	bl	8003a80 <nRF24_WriteRegister>
}
 8003d10:	bd38      	pop	{r3, r4, r5, pc}
		enaa |= (1<<pipe);
 8003d12:	2101      	movs	r1, #1
 8003d14:	40a1      	lsls	r1, r4
 8003d16:	4301      	orrs	r1, r0
 8003d18:	b2c9      	uxtb	r1, r1
 8003d1a:	e7f6      	b.n	8003d0a <nRF24_AutoACK+0x20>

08003d1c <nRF24_SetAddressWidth>:

void nRF24_SetAddressWidth(uint8_t size)
{
 8003d1c:	b508      	push	{r3, lr}
	if(size > 5)
 8003d1e:	2805      	cmp	r0, #5
 8003d20:	d803      	bhi.n	8003d2a <nRF24_SetAddressWidth+0xe>
		size = 5; // Maximum are 5 bytes
	if(size < 3)
 8003d22:	2802      	cmp	r0, #2
 8003d24:	d802      	bhi.n	8003d2c <nRF24_SetAddressWidth+0x10>
		size = 3; // Minimum are 3 bytes
 8003d26:	2003      	movs	r0, #3
 8003d28:	e000      	b.n	8003d2c <nRF24_SetAddressWidth+0x10>
		size = 5; // Maximum are 5 bytes
 8003d2a:	2005      	movs	r0, #5
	nRF24_WriteRegister(NRF24_SETUP_AW, ((size-2) & 0x03));
 8003d2c:	1e81      	subs	r1, r0, #2
 8003d2e:	f001 0103 	and.w	r1, r1, #3
 8003d32:	2003      	movs	r0, #3
 8003d34:	f7ff fea4 	bl	8003a80 <nRF24_WriteRegister>
}
 8003d38:	bd08      	pop	{r3, pc}

08003d3a <nRF24_SetRXAddress>:

void nRF24_SetRXAddress(uint8_t pipe, uint8_t* address)
{
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	b082      	sub	sp, #8
	// pipe 0 and pipe 1 are fully 40-bits storaged
	// pipe 2-5 is storaged only with last byte. Rest are as same as pipe 1
	// pipe 0 and 1 are LSByte first so they are needed to reverse address
	if((pipe == 0) || (pipe == 1))
 8003d3e:	2801      	cmp	r0, #1
 8003d40:	d815      	bhi.n	8003d6e <nRF24_SetRXAddress+0x34>
	{
		uint8_t i;
		uint8_t address_rev[NRF24_ADDR_SIZE];
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	e009      	b.n	8003d5a <nRF24_SetRXAddress+0x20>
			address_rev[NRF24_ADDR_SIZE - 1 - i] = address[i];
 8003d46:	f1c3 0204 	rsb	r2, r3, #4
 8003d4a:	5ccc      	ldrb	r4, [r1, r3]
 8003d4c:	f10d 0c08 	add.w	ip, sp, #8
 8003d50:	4462      	add	r2, ip
 8003d52:	f802 4c08 	strb.w	r4, [r2, #-8]
		for(i = 0; i<NRF24_ADDR_SIZE; i++)
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d9f3      	bls.n	8003d46 <nRF24_SetRXAddress+0xc>
		nRF24_WriteRegisters(NRF24_RX_ADDR_P0 + pipe, address_rev, NRF24_ADDR_SIZE);
 8003d5e:	300a      	adds	r0, #10
 8003d60:	2205      	movs	r2, #5
 8003d62:	4669      	mov	r1, sp
 8003d64:	b2c0      	uxtb	r0, r0
 8003d66:	f7ff fe9e 	bl	8003aa6 <nRF24_WriteRegisters>
	}
	else
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
}
 8003d6a:	b002      	add	sp, #8
 8003d6c:	bd10      	pop	{r4, pc}
		nRF24_WriteRegister(NRF24_RX_ADDR_P0 + pipe, address[NRF24_ADDR_SIZE-1]);
 8003d6e:	300a      	adds	r0, #10
 8003d70:	7909      	ldrb	r1, [r1, #4]
 8003d72:	b2c0      	uxtb	r0, r0
 8003d74:	f7ff fe84 	bl	8003a80 <nRF24_WriteRegister>
}
 8003d78:	e7f7      	b.n	8003d6a <nRF24_SetRXAddress+0x30>
	...

08003d7c <nRF24_RX_Mode>:
{
 8003d7c:	b510      	push	{r4, lr}
	uint8_t config = nRF24_ReadConfig();
 8003d7e:	f7ff fee0 	bl	8003b42 <nRF24_ReadConfig>
 8003d82:	4604      	mov	r4, r0
	nRF24_SetRXAddress(0, addr_p0_backup);
 8003d84:	490c      	ldr	r1, [pc, #48]	; (8003db8 <nRF24_RX_Mode+0x3c>)
 8003d86:	2000      	movs	r0, #0
 8003d88:	f7ff ffd7 	bl	8003d3a <nRF24_SetRXAddress>
	config |= (1<<NRF24_PRIM_RX);
 8003d8c:	f044 0003 	orr.w	r0, r4, #3
	nRF24_WriteConfig(config);
 8003d90:	b2c0      	uxtb	r0, r0
 8003d92:	f7ff fedb 	bl	8003b4c <nRF24_WriteConfig>
	nRF24_WriteStatus((1<<NRF24_RX_DR)|(1<<NRF24_TX_DS)|(1<<NRF24_MAX_RT));
 8003d96:	2070      	movs	r0, #112	; 0x70
 8003d98:	f7ff ff07 	bl	8003baa <nRF24_WriteStatus>
	nRF24_FlushRX();
 8003d9c:	f7ff ff21 	bl	8003be2 <nRF24_FlushRX>
	nRF24_FlushTX();
 8003da0:	f7ff ff2f 	bl	8003c02 <nRF24_FlushTX>
	NRF24_CE_HIGH;
 8003da4:	2201      	movs	r2, #1
 8003da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003daa:	4804      	ldr	r0, [pc, #16]	; (8003dbc <nRF24_RX_Mode+0x40>)
 8003dac:	f000 ff62 	bl	8004c74 <HAL_GPIO_WritePin>
	nRF24_Delay_ms(1);
 8003db0:	2001      	movs	r0, #1
 8003db2:	f7ff fe55 	bl	8003a60 <nRF24_Delay_ms>
}
 8003db6:	bd10      	pop	{r4, pc}
 8003db8:	200007f8 	.word	0x200007f8
 8003dbc:	40020400 	.word	0x40020400

08003dc0 <nRF24_ClearInterrupts>:
	nRF24_WriteRegisters(NRF24_RX_ADDR_P0, address_rev, NRF24_ADDR_SIZE); // Pipe 0 must be same for auto ACk
	nRF24_WriteRegisters(NRF24_TX_ADDR, address_rev, NRF24_ADDR_SIZE);
}

void nRF24_ClearInterrupts(void)
{
 8003dc0:	b508      	push	{r3, lr}
	uint8_t status = nRF24_ReadStatus();
 8003dc2:	f7ff feed 	bl	8003ba0 <nRF24_ReadStatus>
	status |= (7<<4); // Clear bits 4, 5, 6.
 8003dc6:	f040 0070 	orr.w	r0, r0, #112	; 0x70
	nRF24_WriteStatus(status);
 8003dca:	b2c0      	uxtb	r0, r0
 8003dcc:	f7ff feed 	bl	8003baa <nRF24_WriteStatus>
}
 8003dd0:	bd08      	pop	{r3, pc}

08003dd2 <nRF24_GetDynamicPayloadSize>:

uint8_t nRF24_GetDynamicPayloadSize(void)
{
 8003dd2:	b508      	push	{r3, lr}
    uint8_t result = 0;

    result = nRF24_ReadRegister(NRF24_CMD_R_RX_PL_WID);
 8003dd4:	2060      	movs	r0, #96	; 0x60
 8003dd6:	f7ff fe89 	bl	8003aec <nRF24_ReadRegister>

    if (result > 32) // Something went wrong :)
 8003dda:	2820      	cmp	r0, #32
 8003ddc:	d800      	bhi.n	8003de0 <nRF24_GetDynamicPayloadSize+0xe>
        nRF24_FlushRX();
        nRF24_Delay_ms(2);
        return 0;
    }
    return result;
}
 8003dde:	bd08      	pop	{r3, pc}
        nRF24_FlushRX();
 8003de0:	f7ff feff 	bl	8003be2 <nRF24_FlushRX>
        nRF24_Delay_ms(2);
 8003de4:	2002      	movs	r0, #2
 8003de6:	f7ff fe3b 	bl	8003a60 <nRF24_Delay_ms>
        return 0;
 8003dea:	2000      	movs	r0, #0
 8003dec:	e7f7      	b.n	8003dde <nRF24_GetDynamicPayloadSize+0xc>

08003dee <nRF24_EnableRXDataReadyIRQ>:

void nRF24_EnableRXDataReadyIRQ(uint8_t onoff)
{
 8003dee:	b510      	push	{r4, lr}
 8003df0:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003df2:	f7ff fea6 	bl	8003b42 <nRF24_ReadConfig>

	if(!onoff)
 8003df6:	b124      	cbz	r4, 8003e02 <nRF24_EnableRXDataReadyIRQ+0x14>
		config |= (1<<NRF24_RX_DR);
	else
		config &= ~(1<<NRF24_RX_DR);
 8003df8:	f000 00bf 	and.w	r0, r0, #191	; 0xbf

	nRF24_WriteConfig(config);
 8003dfc:	f7ff fea6 	bl	8003b4c <nRF24_WriteConfig>
}
 8003e00:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_RX_DR);
 8003e02:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8003e06:	b2c0      	uxtb	r0, r0
 8003e08:	e7f8      	b.n	8003dfc <nRF24_EnableRXDataReadyIRQ+0xe>

08003e0a <nRF24_EnableTXDataSentIRQ>:

void nRF24_EnableTXDataSentIRQ(uint8_t onoff)
{
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003e0e:	f7ff fe98 	bl	8003b42 <nRF24_ReadConfig>

	if(!onoff)
 8003e12:	b124      	cbz	r4, 8003e1e <nRF24_EnableTXDataSentIRQ+0x14>
		config |= (1<<NRF24_TX_DS);
	else
		config &= ~(1<<NRF24_TX_DS);
 8003e14:	f000 00df 	and.w	r0, r0, #223	; 0xdf

	nRF24_WriteConfig(config);
 8003e18:	f7ff fe98 	bl	8003b4c <nRF24_WriteConfig>
}
 8003e1c:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_TX_DS);
 8003e1e:	f040 0020 	orr.w	r0, r0, #32
 8003e22:	b2c0      	uxtb	r0, r0
 8003e24:	e7f8      	b.n	8003e18 <nRF24_EnableTXDataSentIRQ+0xe>

08003e26 <nRF24_EnableMaxRetransmitIRQ>:

void nRF24_EnableMaxRetransmitIRQ(uint8_t onoff)
{
 8003e26:	b510      	push	{r4, lr}
 8003e28:	4604      	mov	r4, r0
	uint8_t config = nRF24_ReadConfig();
 8003e2a:	f7ff fe8a 	bl	8003b42 <nRF24_ReadConfig>

	if(!onoff)
 8003e2e:	b124      	cbz	r4, 8003e3a <nRF24_EnableMaxRetransmitIRQ+0x14>
		config |= (1<<NRF24_MAX_RT);
	else
		config &= ~(1<<NRF24_MAX_RT);
 8003e30:	f000 00ef 	and.w	r0, r0, #239	; 0xef

	nRF24_WriteConfig(config);
 8003e34:	f7ff fe8a 	bl	8003b4c <nRF24_WriteConfig>
}
 8003e38:	bd10      	pop	{r4, pc}
		config |= (1<<NRF24_MAX_RT);
 8003e3a:	f040 0010 	orr.w	r0, r0, #16
 8003e3e:	b2c0      	uxtb	r0, r0
 8003e40:	e7f8      	b.n	8003e34 <nRF24_EnableMaxRetransmitIRQ+0xe>

08003e42 <nRF24_WriteTXPayload>:

void nRF24_WriteTXPayload(uint8_t * data, uint8_t size)
{
 8003e42:	b508      	push	{r3, lr}
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, size);
 8003e44:	460a      	mov	r2, r1
 8003e46:	4601      	mov	r1, r0
 8003e48:	20a0      	movs	r0, #160	; 0xa0
 8003e4a:	f7ff fe2c 	bl	8003aa6 <nRF24_WriteRegisters>
#else
	nRF24_WriteRegisters(NRF24_CMD_W_TX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
}
 8003e4e:	bd08      	pop	{r3, pc}

08003e50 <nRF24_ReadRXPaylaod>:
		status = nRF24_ReadStatus();
	}while(!((status & (1<<NRF24_MAX_RT)) || (status & (1<<NRF24_TX_DS))));
}

void nRF24_ReadRXPaylaod(uint8_t *data, uint8_t *size)
{
 8003e50:	b538      	push	{r3, r4, r5, lr}
 8003e52:	4604      	mov	r4, r0
 8003e54:	460d      	mov	r5, r1
#if (NRF24_DYNAMIC_PAYLOAD == 1)
	*size = nRF24_GetDynamicPayloadSize();
 8003e56:	f7ff ffbc 	bl	8003dd2 <nRF24_GetDynamicPayloadSize>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	7028      	strb	r0, [r5, #0]
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, *size);
 8003e5e:	4621      	mov	r1, r4
 8003e60:	2061      	movs	r0, #97	; 0x61
 8003e62:	f7ff fe59 	bl	8003b18 <nRF24_ReadRegisters>
#else
	nRF24_ReadRegisters(NRF24_CMD_R_RX_PAYLOAD, data, NRF24_PAYLOAD_SIZE);
#endif
#if (NRF24_INTERRUPT_MODE == 0)
	nRF24_WriteRegister(NRF24_STATUS, (1<NRF24_RX_DR));
 8003e66:	2101      	movs	r1, #1
 8003e68:	2007      	movs	r0, #7
 8003e6a:	f7ff fe09 	bl	8003a80 <nRF24_WriteRegister>
	if(nRF24_ReadStatus() & (1<<NRF24_TX_DS))
 8003e6e:	f7ff fe97 	bl	8003ba0 <nRF24_ReadStatus>
 8003e72:	f010 0f20 	tst.w	r0, #32
 8003e76:	d100      	bne.n	8003e7a <nRF24_ReadRXPaylaod+0x2a>
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
#endif
}
 8003e78:	bd38      	pop	{r3, r4, r5, pc}
		nRF24_WriteRegister(NRF24_STATUS, (1<<NRF24_TX_DS));
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	2007      	movs	r0, #7
 8003e7e:	f7ff fdff 	bl	8003a80 <nRF24_WriteRegister>
}
 8003e82:	e7f9      	b.n	8003e78 <nRF24_ReadRXPaylaod+0x28>

08003e84 <nRF24_SendPacket>:

nRF24_TX_Status nRF24_SendPacket(uint8_t* Data, uint8_t Size)
{
	if(Size > 32)
 8003e84:	2920      	cmp	r1, #32
 8003e86:	d901      	bls.n	8003e8c <nRF24_SendPacket+0x8>
		return NRF24_NO_TRANSMITTED_PACKET;
 8003e88:	2001      	movs	r0, #1
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_WaitTX();
#endif

	return NRF24_TRANSMITTED_PACKET;
}
 8003e8a:	4770      	bx	lr
{
 8003e8c:	b508      	push	{r3, lr}
	nRF24_WriteTXPayload(Data, Size);
 8003e8e:	f7ff ffd8 	bl	8003e42 <nRF24_WriteTXPayload>
	return NRF24_TRANSMITTED_PACKET;
 8003e92:	2000      	movs	r0, #0
}
 8003e94:	bd08      	pop	{r3, pc}
	...

08003e98 <nRF24_IsSomtehingToSend>:
{
	return RB_ElementsAvailable(RXBuffer)?1:0;
}

uint8_t nRF24_IsSomtehingToSend(void)
{
 8003e98:	b508      	push	{r3, lr}
	return RB_ElementsAvailable(TXBuffer)?1:0;
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <nRF24_IsSomtehingToSend+0x14>)
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	f7fd ff12 	bl	8001cc6 <RB_ElementsAvailable>
}
 8003ea2:	3000      	adds	r0, #0
 8003ea4:	bf18      	it	ne
 8003ea6:	2001      	movne	r0, #1
 8003ea8:	bd08      	pop	{r3, pc}
 8003eaa:	bf00      	nop
 8003eac:	200007f4 	.word	0x200007f4

08003eb0 <nRF24_ReceivePacket>:
	return nRF24_IsSomtehingToRead();
#endif
}

nRF24_RX_Status nRF24_ReceivePacket(uint8_t* Data, uint8_t *Size)
{
 8003eb0:	b508      	push	{r3, lr}
#if (NRF24_USE_INTERRUPT == 0)
	if(nRF24_RXAvailable())
	{
#endif
		nRF24_ReadRXPaylaod(Data, Size);
 8003eb2:	f7ff ffcd 	bl	8003e50 <nRF24_ReadRXPaylaod>
#if (NRF24_USE_INTERRUPT == 0)
	}
	return NRF24_NO_RECEIVED_PACKET;
#endif

}
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	bd08      	pop	{r3, pc}
	...

08003ebc <nRF24_SendData>:

nRF24_TX_Status nRF24_SendData(uint8_t* Data, uint8_t Size)
{
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	460c      	mov	r4, r1
#if (NRF24_USE_RINGBUFFER != 1) // (NRF24_USE_INTERRUPT any)
	return nRF24_SendPacket(Data, Size);
#endif
#if (NRF24_USE_RINGBUFFER == 1)
	uint8_t i = 0;
 8003ec2:	2200      	movs	r2, #0

	while(Size > 0)
 8003ec4:	b154      	cbz	r4, 8003edc <nRF24_SendData+0x20>
	{
		if(RB_OK == RB_WriteToBuffer(&TXBuffer, Data[i++]))
 8003ec6:	1c53      	adds	r3, r2, #1
 8003ec8:	b2dd      	uxtb	r5, r3
 8003eca:	5cb1      	ldrb	r1, [r6, r2]
 8003ecc:	4805      	ldr	r0, [pc, #20]	; (8003ee4 <nRF24_SendData+0x28>)
 8003ece:	f7fd fec6 	bl	8001c5e <RB_WriteToBuffer>
 8003ed2:	b928      	cbnz	r0, 8003ee0 <nRF24_SendData+0x24>
		{
			Size--;
 8003ed4:	3c01      	subs	r4, #1
 8003ed6:	b2e4      	uxtb	r4, r4
		if(RB_OK == RB_WriteToBuffer(&TXBuffer, Data[i++]))
 8003ed8:	462a      	mov	r2, r5
 8003eda:	e7f3      	b.n	8003ec4 <nRF24_SendData+0x8>
		else
		{
			return NRF24_NO_TRANSMITTED_PACKET;
		}
	}
	return NRF24_TRANSMITTED_PACKET;
 8003edc:	2000      	movs	r0, #0
#endif
}
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
			return NRF24_NO_TRANSMITTED_PACKET;
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	e7fc      	b.n	8003ede <nRF24_SendData+0x22>
 8003ee4:	200007f4 	.word	0x200007f4

08003ee8 <nRF24_CheckTXAndSend>:
#if (NRF24_USE_RINGBUFFER == 1)
void nRF24_CheckTXAndSend(void)
{
 8003ee8:	b530      	push	{r4, r5, lr}
 8003eea:	b089      	sub	sp, #36	; 0x24
	uint8_t i, DataCounter;
	uint8_t TXPacket[32];

	if(nRF24_IsSomtehingToSend() && Nrf24TXFreeFlag)
 8003eec:	f7ff ffd4 	bl	8003e98 <nRF24_IsSomtehingToSend>
 8003ef0:	b110      	cbz	r0, 8003ef8 <nRF24_CheckTXAndSend+0x10>
 8003ef2:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <nRF24_CheckTXAndSend+0x70>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b91b      	cbnz	r3, 8003f00 <nRF24_CheckTXAndSend+0x18>
		nRF24_SendPacket(TXPacket, DataCounter);
		NRF24_CE_HIGH;
		nRF24_Delay_ms(1);
		NRF24_CE_LOW;
	}else{
		nRF24_RX_Mode();
 8003ef8:	f7ff ff40 	bl	8003d7c <nRF24_RX_Mode>
	}
}
 8003efc:	b009      	add	sp, #36	; 0x24
 8003efe:	bd30      	pop	{r4, r5, pc}
		nRF24_TX_Mode();
 8003f00:	f7ff fe90 	bl	8003c24 <nRF24_TX_Mode>
		Nrf24TXFreeFlag = 0;
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <nRF24_CheckTXAndSend+0x70>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	701a      	strb	r2, [r3, #0]
		DataCounter = RB_ElementsAvailable(&TXBuffer);
 8003f0a:	4814      	ldr	r0, [pc, #80]	; (8003f5c <nRF24_CheckTXAndSend+0x74>)
 8003f0c:	f7fd fedb 	bl	8001cc6 <RB_ElementsAvailable>
 8003f10:	4605      	mov	r5, r0
		if(DataCounter > 32)
 8003f12:	2820      	cmp	r0, #32
 8003f14:	d900      	bls.n	8003f18 <nRF24_CheckTXAndSend+0x30>
			DataCounter = 32; // Max Payload
 8003f16:	2520      	movs	r5, #32
		for(i = 0; i < DataCounter; i++)
 8003f18:	2400      	movs	r4, #0
 8003f1a:	e006      	b.n	8003f2a <nRF24_CheckTXAndSend+0x42>
			RB_ReadFromBuffer(&TXBuffer, &TXPacket[i]);
 8003f1c:	eb0d 0104 	add.w	r1, sp, r4
 8003f20:	480e      	ldr	r0, [pc, #56]	; (8003f5c <nRF24_CheckTXAndSend+0x74>)
 8003f22:	f7fd feb9 	bl	8001c98 <RB_ReadFromBuffer>
		for(i = 0; i < DataCounter; i++)
 8003f26:	3401      	adds	r4, #1
 8003f28:	b2e4      	uxtb	r4, r4
 8003f2a:	42ac      	cmp	r4, r5
 8003f2c:	d3f6      	bcc.n	8003f1c <nRF24_CheckTXAndSend+0x34>
		nRF24_SendPacket(TXPacket, DataCounter);
 8003f2e:	4629      	mov	r1, r5
 8003f30:	4668      	mov	r0, sp
 8003f32:	f7ff ffa7 	bl	8003e84 <nRF24_SendPacket>
		NRF24_CE_HIGH;
 8003f36:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <nRF24_CheckTXAndSend+0x78>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 fe98 	bl	8004c74 <HAL_GPIO_WritePin>
		nRF24_Delay_ms(1);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff fd8b 	bl	8003a60 <nRF24_Delay_ms>
		NRF24_CE_LOW;
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 fe8f 	bl	8004c74 <HAL_GPIO_WritePin>
 8003f56:	e7d1      	b.n	8003efc <nRF24_CheckTXAndSend+0x14>
 8003f58:	200007ed 	.word	0x200007ed
 8003f5c:	200007f4 	.word	0x200007f4
 8003f60:	40020400 	.word	0x40020400

08003f64 <nRF24_ReceiveData>:
#endif
#if (NRF24_USE_INTERRUPT == 1)
void nRF24_ReceiveData(void)
{
 8003f64:	b510      	push	{r4, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	e010      	b.n	8003f8c <nRF24_ReceiveData+0x28>
	{
		nRF24_ReceivePacket(RXPacket, &DataCounter);

		for(i = 0; i < DataCounter; i++)
		{
			RB_WriteToBuffer(RXBuffer, RXPacket[i]);
 8003f6a:	ab0a      	add	r3, sp, #40	; 0x28
 8003f6c:	4423      	add	r3, r4
 8003f6e:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <nRF24_ReceiveData+0x3c>)
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	f7fd fe72 	bl	8001c5e <RB_WriteToBuffer>
		for(i = 0; i < DataCounter; i++)
 8003f7a:	3401      	adds	r4, #1
 8003f7c:	b2e4      	uxtb	r4, r4
 8003f7e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	d8f1      	bhi.n	8003f6a <nRF24_ReceiveData+0x6>
		}

	}while(!nRF24_IsRxEmpty());
 8003f86:	f7ff fe27 	bl	8003bd8 <nRF24_IsRxEmpty>
 8003f8a:	b930      	cbnz	r0, 8003f9a <nRF24_ReceiveData+0x36>
		nRF24_ReceivePacket(RXPacket, &DataCounter);
 8003f8c:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8003f90:	a801      	add	r0, sp, #4
 8003f92:	f7ff ff8d 	bl	8003eb0 <nRF24_ReceivePacket>
		for(i = 0; i < DataCounter; i++)
 8003f96:	2400      	movs	r4, #0
 8003f98:	e7f1      	b.n	8003f7e <nRF24_ReceiveData+0x1a>
#endif
#if (NRF24_USE_RINGBUFFER == 0)
	nRF24_ReceivePacket(RXBuffer, &RXDataCounter);
#endif
}
 8003f9a:	b00a      	add	sp, #40	; 0x28
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200007f0 	.word	0x200007f0

08003fa4 <nRF24_IRQ_Read>:
{
	Nrf24InterruptFlag = 1;
}

void nRF24_IRQ_Read(void)
{
 8003fa4:	b508      	push	{r3, lr}
	if(Nrf24InterruptFlag == 1)
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <nRF24_IRQ_Read+0x54>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d000      	beq.n	8003fb2 <nRF24_IRQ_Read+0xe>
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
		}

		nRF24_WriteStatus(ClearIrq);
	}
}
 8003fb0:	bd08      	pop	{r3, pc}
		Nrf24InterruptFlag = 0;
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <nRF24_IRQ_Read+0x54>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
		uint8_t status = nRF24_ReadStatus();
 8003fb8:	f7ff fdf2 	bl	8003ba0 <nRF24_ReadStatus>
 8003fbc:	4603      	mov	r3, r0
		if ((status & (1 << NRF24_RX_DR)))
 8003fbe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fc2:	d016      	beq.n	8003ff2 <nRF24_IRQ_Read+0x4e>
			nrf24_rx_flag = 1;
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <nRF24_IRQ_Read+0x58>)
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_RX_DR); // Interrupt flag clear
 8003fca:	2040      	movs	r0, #64	; 0x40
		if ((status & (1 << NRF24_TX_DS)))
 8003fcc:	f013 0f20 	tst.w	r3, #32
 8003fd0:	d004      	beq.n	8003fdc <nRF24_IRQ_Read+0x38>
			nrf24_tx_flag = 1;
 8003fd2:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <nRF24_IRQ_Read+0x5c>)
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	7011      	strb	r1, [r2, #0]
			ClearIrq |= (1<<NRF24_TX_DS); // Interrupt flag clear
 8003fd8:	f040 0020 	orr.w	r0, r0, #32
		if ((status & (1 << NRF24_MAX_RT)))
 8003fdc:	f013 0f10 	tst.w	r3, #16
 8003fe0:	d004      	beq.n	8003fec <nRF24_IRQ_Read+0x48>
			nrf24_mr_flag = 1;
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <nRF24_IRQ_Read+0x60>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
			ClearIrq |= (1<<NRF24_MAX_RT); // Interrupt flag clear
 8003fe8:	f040 0010 	orr.w	r0, r0, #16
		nRF24_WriteStatus(ClearIrq);
 8003fec:	f7ff fddd 	bl	8003baa <nRF24_WriteStatus>
}
 8003ff0:	e7de      	b.n	8003fb0 <nRF24_IRQ_Read+0xc>
		uint8_t ClearIrq = 0;
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e7ea      	b.n	8003fcc <nRF24_IRQ_Read+0x28>
 8003ff6:	bf00      	nop
 8003ff8:	200007ec 	.word	0x200007ec
 8003ffc:	20000805 	.word	0x20000805
 8004000:	20000806 	.word	0x20000806
 8004004:	20000804 	.word	0x20000804

08004008 <nRF24_EventRxCallback>:
//

__weak void nRF24_EventRxCallback(void)
{

}
 8004008:	4770      	bx	lr

0800400a <nRF24_EventTxCallback>:

__weak void nRF24_EventTxCallback(void)
{

}
 800400a:	4770      	bx	lr

0800400c <nRF24_EventMrCallback>:

__weak void nRF24_EventMrCallback(void)
{

}
 800400c:	4770      	bx	lr
	...

08004010 <nRF24_Event>:

void nRF24_Event(void)
{
 8004010:	b508      	push	{r3, lr}
	nRF24_IRQ_Read(); // Check if there was any interrupt
 8004012:	f7ff ffc7 	bl	8003fa4 <nRF24_IRQ_Read>

#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_CheckTXAndSend();
 8004016:	f7ff ff67 	bl	8003ee8 <nRF24_CheckTXAndSend>
#endif

	if(nrf24_rx_flag)
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <nRF24_Event+0x4c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	b933      	cbnz	r3, 800402e <nRF24_Event+0x1e>
#endif
		nRF24_EventRxCallback();
		nrf24_rx_flag = 0;
	}

	if(nrf24_tx_flag)
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <nRF24_Event+0x50>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b95b      	cbnz	r3, 800403e <nRF24_Event+0x2e>
#endif
		nRF24_EventTxCallback();
		nrf24_tx_flag = 0;
	}

	if(nrf24_mr_flag)
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <nRF24_Event+0x54>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	b98b      	cbnz	r3, 8004050 <nRF24_Event+0x40>
	{
		nRF24_EventMrCallback();
		nrf24_mr_flag = 0;
	}
}
 800402c:	bd08      	pop	{r3, pc}
		nRF24_ReceiveData();
 800402e:	f7ff ff99 	bl	8003f64 <nRF24_ReceiveData>
		nRF24_EventRxCallback();
 8004032:	f7ff ffe9 	bl	8004008 <nRF24_EventRxCallback>
		nrf24_rx_flag = 0;
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <nRF24_Event+0x4c>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e7f0      	b.n	8004020 <nRF24_Event+0x10>
		Nrf24TXFreeFlag = 1;
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <nRF24_Event+0x58>)
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
		nRF24_EventTxCallback();
 8004044:	f7ff ffe1 	bl	800400a <nRF24_EventTxCallback>
		nrf24_tx_flag = 0;
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <nRF24_Event+0x50>)
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	e7ea      	b.n	8004026 <nRF24_Event+0x16>
		nRF24_EventMrCallback();
 8004050:	f7ff ffdc 	bl	800400c <nRF24_EventMrCallback>
		nrf24_mr_flag = 0;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <nRF24_Event+0x54>)
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
}
 800405a:	e7e7      	b.n	800402c <nRF24_Event+0x1c>
 800405c:	20000805 	.word	0x20000805
 8004060:	20000806 	.word	0x20000806
 8004064:	20000804 	.word	0x20000804
 8004068:	200007ed 	.word	0x200007ed

0800406c <nRF24_Init>:
#endif

void nRF24_Init(SPI_HandleTypeDef *hspi)
{
 800406c:	b508      	push	{r3, lr}
	hspi_nrf = hspi;
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <nRF24_Init+0xc8>)
 8004070:	6018      	str	r0, [r3, #0]

	NRF24_CE_LOW;
 8004072:	2200      	movs	r2, #0
 8004074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004078:	482f      	ldr	r0, [pc, #188]	; (8004138 <nRF24_Init+0xcc>)
 800407a:	f000 fdfb 	bl	8004c74 <HAL_GPIO_WritePin>
	NRF24_CSN_HIGH;
 800407e:	f7fe fa4d 	bl	800251c <NRF_ChipDeselect>

	nRF24_Delay_ms(5); // Wait for radio power up
 8004082:	2005      	movs	r0, #5
 8004084:	f7ff fcec 	bl	8003a60 <nRF24_Delay_ms>

	nRF24_SetPALevel(NRF24_PA_PWR_0dBM); // Radio power
 8004088:	2003      	movs	r0, #3
 800408a:	f7ff fd65 	bl	8003b58 <nRF24_SetPALevel>
	nRF24_SetDataRate(NRF24_RF_DR_250KBPS); // Data Rate
 800408e:	2002      	movs	r0, #2
 8004090:	f7ff fd71 	bl	8003b76 <nRF24_SetDataRate>
	nRF24_EnableCRC(1); // Enable CRC
 8004094:	2001      	movs	r0, #1
 8004096:	f7ff fde1 	bl	8003c5c <nRF24_EnableCRC>
	nRF24_SetCRCLength(NRF24_CRC_WIDTH_2B); // CRC Length 1 byte
 800409a:	2001      	movs	r0, #1
 800409c:	f7ff fdec 	bl	8003c78 <nRF24_SetCRCLength>
	nRF24_SetRetries(0x04, 0x07); // 1000us, 7 times
 80040a0:	2107      	movs	r1, #7
 80040a2:	2004      	movs	r0, #4
 80040a4:	f7ff fdf7 	bl	8003c96 <nRF24_SetRetries>

#if (NRF24_DYNAMIC_PAYLOAD == 1)
	nRF24_WriteRegister(NRF24_FEATURE, nRF24_ReadRegister(NRF24_FEATURE) | (1<<NRF24_EN_DPL)); // Enable dynamic payload feature
 80040a8:	201d      	movs	r0, #29
 80040aa:	f7ff fd1f 	bl	8003aec <nRF24_ReadRegister>
 80040ae:	f040 0104 	orr.w	r1, r0, #4
 80040b2:	b2c9      	uxtb	r1, r1
 80040b4:	201d      	movs	r0, #29
 80040b6:	f7ff fce3 	bl	8003a80 <nRF24_WriteRegister>
	nRF24_WriteRegister(NRF24_DYNPD, 0x3F); // Enable dynamic payloads for all pipes
 80040ba:	213f      	movs	r1, #63	; 0x3f
 80040bc:	201c      	movs	r0, #28
 80040be:	f7ff fcdf 	bl	8003a80 <nRF24_WriteRegister>
#else
	nRF24_WriteRegister(NRF24_DYNPD, 0); // Disable dynamic payloads for all pipes
	nRF24_SetPayloadSize(0, NRF24_PAYLOAD_SIZE); // Set 32 bytes payload for pipe 0
#endif
	nRF24_SetRFChannel(100); // Set RF channel for transmission
 80040c2:	2064      	movs	r0, #100	; 0x64
 80040c4:	f7ff fdf1 	bl	8003caa <nRF24_SetRFChannel>
	nRF24_EnablePipe(0, 1); // Enable pipe 0
 80040c8:	2101      	movs	r1, #1
 80040ca:	2000      	movs	r0, #0
 80040cc:	f7ff fdf4 	bl	8003cb8 <nRF24_EnablePipe>
	nRF24_EnablePipe(1, 1); // Enable pipe 1
 80040d0:	2101      	movs	r1, #1
 80040d2:	4608      	mov	r0, r1
 80040d4:	f7ff fdf0 	bl	8003cb8 <nRF24_EnablePipe>
	nRF24_AutoACK(0, 1); // Enable auto ACK for pipe 0
 80040d8:	2101      	movs	r1, #1
 80040da:	2000      	movs	r0, #0
 80040dc:	f7ff fe05 	bl	8003cea <nRF24_AutoACK>
	nRF24_AutoACK(1, 1); // Enable auto ACK for pipe 1
 80040e0:	2101      	movs	r1, #1
 80040e2:	4608      	mov	r0, r1
 80040e4:	f7ff fe01 	bl	8003cea <nRF24_AutoACK>
	nRF24_SetAddressWidth(NRF24_ADDR_SIZE); // Set address size
 80040e8:	2005      	movs	r0, #5
 80040ea:	f7ff fe17 	bl	8003d1c <nRF24_SetAddressWidth>

	nRF24_Delay_ms(1);
 80040ee:	2001      	movs	r0, #1
 80040f0:	f7ff fcb6 	bl	8003a60 <nRF24_Delay_ms>

#if (NRF24_USE_INTERRUPT == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 80040f4:	2001      	movs	r0, #1
 80040f6:	f7ff fe7a 	bl	8003dee <nRF24_EnableRXDataReadyIRQ>
#endif
#if (NRF24_USE_INTERRUPT == 0)
	nRF24_EnableRXDataReadyIRQ(0);
#endif
	nRF24_EnableTXDataSentIRQ(0);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7ff fe85 	bl	8003e0a <nRF24_EnableTXDataSentIRQ>
	nRF24_EnableMaxRetransmitIRQ(0);
 8004100:	2000      	movs	r0, #0
 8004102:	f7ff fe90 	bl	8003e26 <nRF24_EnableMaxRetransmitIRQ>

	nRF24_Delay_ms(1);
 8004106:	2001      	movs	r0, #1
 8004108:	f7ff fcaa 	bl	8003a60 <nRF24_Delay_ms>

	nRF24_ClearInterrupts();
 800410c:	f7ff fe58 	bl	8003dc0 <nRF24_ClearInterrupts>
#if (NRF24_USE_RINGBUFFER == 1)
	nRF24_EnableRXDataReadyIRQ(1);
 8004110:	2001      	movs	r0, #1
 8004112:	f7ff fe6c 	bl	8003dee <nRF24_EnableRXDataReadyIRQ>
	nRF24_EnableTXDataSentIRQ(1);
 8004116:	2001      	movs	r0, #1
 8004118:	f7ff fe77 	bl	8003e0a <nRF24_EnableTXDataSentIRQ>
	Nrf24TXFreeFlag = 1;
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <nRF24_Init+0xd0>)
 800411e:	2201      	movs	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
	RB_CreateBuffer(&TXBuffer, NRF24_TX_BUFFER_SIZE);
 8004122:	2120      	movs	r1, #32
 8004124:	4806      	ldr	r0, [pc, #24]	; (8004140 <nRF24_Init+0xd4>)
 8004126:	f7fd fd8f 	bl	8001c48 <RB_CreateBuffer>
	RB_CreateBuffer(&RXBuffer, NRF24_RX_BUFFER_SIZE);
 800412a:	2120      	movs	r1, #32
 800412c:	4805      	ldr	r0, [pc, #20]	; (8004144 <nRF24_Init+0xd8>)
 800412e:	f7fd fd8b 	bl	8001c48 <RB_CreateBuffer>
#endif
}
 8004132:	bd08      	pop	{r3, pc}
 8004134:	20000800 	.word	0x20000800
 8004138:	40020400 	.word	0x40020400
 800413c:	200007ed 	.word	0x200007ed
 8004140:	200007f4 	.word	0x200007f4
 8004144:	200007f0 	.word	0x200007f0

08004148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004180 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800414c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800414e:	e003      	b.n	8004158 <LoopCopyDataInit>

08004150 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004152:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004154:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004156:	3104      	adds	r1, #4

08004158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004158:	480b      	ldr	r0, [pc, #44]	; (8004188 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800415c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800415e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004160:	d3f6      	bcc.n	8004150 <CopyDataInit>
  ldr  r2, =_sbss
 8004162:	4a0b      	ldr	r2, [pc, #44]	; (8004190 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004164:	e002      	b.n	800416c <LoopFillZerobss>

08004166 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004166:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004168:	f842 3b04 	str.w	r3, [r2], #4

0800416c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800416e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004170:	d3f9      	bcc.n	8004166 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004172:	f7ff fc67 	bl	8003a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004176:	f005 fd15 	bl	8009ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800417a:	f7ff f807 	bl	800318c <main>
  bx  lr    
 800417e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004180:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8004184:	0800a8ac 	.word	0x0800a8ac
  ldr  r0, =_sdata
 8004188:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800418c:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8004190:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8004194:	20003144 	.word	0x20003144

08004198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004198:	e7fe      	b.n	8004198 <ADC_IRQHandler>
	...

0800419c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800419c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_Init+0x30>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ae:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b8:	2003      	movs	r0, #3
 80041ba:	f000 f9a9 	bl	8004510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041be:	2000      	movs	r0, #0
 80041c0:	f7ff fb8a 	bl	80038d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041c4:	f7ff f8d2 	bl	800336c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80041c8:	2000      	movs	r0, #0
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	40023c00 	.word	0x40023c00

080041d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80041d0:	4a03      	ldr	r2, [pc, #12]	; (80041e0 <HAL_IncTick+0x10>)
 80041d2:	6811      	ldr	r1, [r2, #0]
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <HAL_IncTick+0x14>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	440b      	add	r3, r1
 80041da:	6013      	str	r3, [r2, #0]
}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	200030fc 	.word	0x200030fc
 80041e4:	20000034 	.word	0x20000034

080041e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <HAL_GetTick+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	200030fc 	.word	0x200030fc

080041f4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041f4:	4b4a      	ldr	r3, [pc, #296]	; (8004320 <ADC_Init+0x12c>)
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80041fc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	6841      	ldr	r1, [r0, #4]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004206:	6802      	ldr	r2, [r0, #0]
 8004208:	6853      	ldr	r3, [r2, #4]
 800420a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004210:	6802      	ldr	r2, [r0, #0]
 8004212:	6853      	ldr	r3, [r2, #4]
 8004214:	6901      	ldr	r1, [r0, #16]
 8004216:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800421a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800421c:	6802      	ldr	r2, [r0, #0]
 800421e:	6853      	ldr	r3, [r2, #4]
 8004220:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8004224:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004226:	6802      	ldr	r2, [r0, #0]
 8004228:	6853      	ldr	r3, [r2, #4]
 800422a:	6881      	ldr	r1, [r0, #8]
 800422c:	430b      	orrs	r3, r1
 800422e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004230:	6802      	ldr	r2, [r0, #0]
 8004232:	6893      	ldr	r3, [r2, #8]
 8004234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004238:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800423a:	6802      	ldr	r2, [r0, #0]
 800423c:	6893      	ldr	r3, [r2, #8]
 800423e:	68c1      	ldr	r1, [r0, #12]
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004244:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004246:	4b37      	ldr	r3, [pc, #220]	; (8004324 <ADC_Init+0x130>)
 8004248:	429a      	cmp	r2, r3
 800424a:	d04b      	beq.n	80042e4 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800424c:	6802      	ldr	r2, [r0, #0]
 800424e:	6893      	ldr	r3, [r2, #8]
 8004250:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004254:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004256:	6802      	ldr	r2, [r0, #0]
 8004258:	6893      	ldr	r3, [r2, #8]
 800425a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800425c:	430b      	orrs	r3, r1
 800425e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004260:	6802      	ldr	r2, [r0, #0]
 8004262:	6893      	ldr	r3, [r2, #8]
 8004264:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004268:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800426a:	6802      	ldr	r2, [r0, #0]
 800426c:	6893      	ldr	r3, [r2, #8]
 800426e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004270:	430b      	orrs	r3, r1
 8004272:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004274:	6802      	ldr	r2, [r0, #0]
 8004276:	6893      	ldr	r3, [r2, #8]
 8004278:	f023 0302 	bic.w	r3, r3, #2
 800427c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800427e:	6802      	ldr	r2, [r0, #0]
 8004280:	6893      	ldr	r3, [r2, #8]
 8004282:	7e01      	ldrb	r1, [r0, #24]
 8004284:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8004288:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800428a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d133      	bne.n	80042fa <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004292:	6802      	ldr	r2, [r0, #0]
 8004294:	6853      	ldr	r3, [r2, #4]
 8004296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800429a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800429c:	6802      	ldr	r2, [r0, #0]
 800429e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042a6:	6801      	ldr	r1, [r0, #0]
 80042a8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80042aa:	69c2      	ldr	r2, [r0, #28]
 80042ac:	3a01      	subs	r2, #1
 80042ae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80042b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042b4:	6802      	ldr	r2, [r0, #0]
 80042b6:	6893      	ldr	r3, [r2, #8]
 80042b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042bc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042be:	6802      	ldr	r2, [r0, #0]
 80042c0:	6893      	ldr	r3, [r2, #8]
 80042c2:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80042c6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80042ca:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042cc:	6802      	ldr	r2, [r0, #0]
 80042ce:	6893      	ldr	r3, [r2, #8]
 80042d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042d6:	6802      	ldr	r2, [r0, #0]
 80042d8:	6893      	ldr	r3, [r2, #8]
 80042da:	6941      	ldr	r1, [r0, #20]
 80042dc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80042e0:	6093      	str	r3, [r2, #8]
}
 80042e2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042e4:	6802      	ldr	r2, [r0, #0]
 80042e6:	6893      	ldr	r3, [r2, #8]
 80042e8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80042ec:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042ee:	6802      	ldr	r2, [r0, #0]
 80042f0:	6893      	ldr	r3, [r2, #8]
 80042f2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80042f6:	6093      	str	r3, [r2, #8]
 80042f8:	e7bc      	b.n	8004274 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042fa:	6802      	ldr	r2, [r0, #0]
 80042fc:	6853      	ldr	r3, [r2, #4]
 80042fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004302:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004304:	6802      	ldr	r2, [r0, #0]
 8004306:	6853      	ldr	r3, [r2, #4]
 8004308:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800430c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800430e:	6801      	ldr	r1, [r0, #0]
 8004310:	684b      	ldr	r3, [r1, #4]
 8004312:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004314:	3a01      	subs	r2, #1
 8004316:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800431a:	604b      	str	r3, [r1, #4]
 800431c:	e7be      	b.n	800429c <ADC_Init+0xa8>
 800431e:	bf00      	nop
 8004320:	40012300 	.word	0x40012300
 8004324:	0f000001 	.word	0x0f000001

08004328 <HAL_ADC_Init>:
  if(hadc == NULL)
 8004328:	b338      	cbz	r0, 800437a <HAL_ADC_Init+0x52>
{
 800432a:	b510      	push	{r4, lr}
 800432c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 800432e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004330:	b143      	cbz	r3, 8004344 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004332:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004334:	f013 0f10 	tst.w	r3, #16
 8004338:	d00b      	beq.n	8004352 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800433a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800433c:	2300      	movs	r3, #0
 800433e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004342:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8004344:	f7ff f834 	bl	80033b0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004348:	2300      	movs	r3, #0
 800434a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 800434c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004350:	e7ef      	b.n	8004332 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8004352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004354:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004358:	f023 0302 	bic.w	r3, r3, #2
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8004362:	4620      	mov	r0, r4
 8004364:	f7ff ff46 	bl	80041f4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8004368:	2000      	movs	r0, #0
 800436a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800436c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	6423      	str	r3, [r4, #64]	; 0x40
 8004378:	e7e0      	b.n	800433c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800437a:	2001      	movs	r0, #1
}
 800437c:	4770      	bx	lr
	...

08004380 <HAL_ADC_ConfigChannel>:
{
 8004380:	b430      	push	{r4, r5}
 8004382:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004388:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	f000 80b7 	beq.w	8004500 <HAL_ADC_ConfigChannel+0x180>
 8004392:	2301      	movs	r3, #1
 8004394:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004398:	680b      	ldr	r3, [r1, #0]
 800439a:	2b09      	cmp	r3, #9
 800439c:	d93e      	bls.n	800441c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800439e:	6805      	ldr	r5, [r0, #0]
 80043a0:	68ea      	ldr	r2, [r5, #12]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043a8:	3b1e      	subs	r3, #30
 80043aa:	2407      	movs	r4, #7
 80043ac:	fa04 f303 	lsl.w	r3, r4, r3
 80043b0:	ea22 0303 	bic.w	r3, r2, r3
 80043b4:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043b6:	6805      	ldr	r5, [r0, #0]
 80043b8:	68ea      	ldr	r2, [r5, #12]
 80043ba:	688c      	ldr	r4, [r1, #8]
 80043bc:	880b      	ldrh	r3, [r1, #0]
 80043be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043c2:	3b1e      	subs	r3, #30
 80043c4:	fa04 f303 	lsl.w	r3, r4, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80043cc:	684b      	ldr	r3, [r1, #4]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d83a      	bhi.n	8004448 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043d2:	6805      	ldr	r5, [r0, #0]
 80043d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80043d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043da:	3b05      	subs	r3, #5
 80043dc:	241f      	movs	r4, #31
 80043de:	fa04 f303 	lsl.w	r3, r4, r3
 80043e2:	ea22 0303 	bic.w	r3, r2, r3
 80043e6:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043e8:	6805      	ldr	r5, [r0, #0]
 80043ea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80043ec:	684b      	ldr	r3, [r1, #4]
 80043ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80043f2:	3b05      	subs	r3, #5
 80043f4:	880c      	ldrh	r4, [r1, #0]
 80043f6:	fa04 f303 	lsl.w	r3, r4, r3
 80043fa:	4313      	orrs	r3, r2
 80043fc:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043fe:	6802      	ldr	r2, [r0, #0]
 8004400:	4b40      	ldr	r3, [pc, #256]	; (8004504 <HAL_ADC_ConfigChannel+0x184>)
 8004402:	429a      	cmp	r2, r3
 8004404:	d050      	beq.n	80044a8 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004406:	6802      	ldr	r2, [r0, #0]
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_ADC_ConfigChannel+0x184>)
 800440a:	429a      	cmp	r2, r3
 800440c:	d055      	beq.n	80044ba <HAL_ADC_ConfigChannel+0x13a>
  __HAL_UNLOCK(hadc);
 800440e:	2300      	movs	r3, #0
 8004410:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004414:	4618      	mov	r0, r3
}
 8004416:	b002      	add	sp, #8
 8004418:	bc30      	pop	{r4, r5}
 800441a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800441c:	6805      	ldr	r5, [r0, #0]
 800441e:	692a      	ldr	r2, [r5, #16]
 8004420:	b29b      	uxth	r3, r3
 8004422:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004426:	2407      	movs	r4, #7
 8004428:	fa04 f303 	lsl.w	r3, r4, r3
 800442c:	ea22 0303 	bic.w	r3, r2, r3
 8004430:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004432:	6805      	ldr	r5, [r0, #0]
 8004434:	692a      	ldr	r2, [r5, #16]
 8004436:	688c      	ldr	r4, [r1, #8]
 8004438:	880b      	ldrh	r3, [r1, #0]
 800443a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800443e:	fa04 f303 	lsl.w	r3, r4, r3
 8004442:	4313      	orrs	r3, r2
 8004444:	612b      	str	r3, [r5, #16]
 8004446:	e7c1      	b.n	80043cc <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d816      	bhi.n	800447a <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800444c:	6805      	ldr	r5, [r0, #0]
 800444e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004450:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004454:	3b23      	subs	r3, #35	; 0x23
 8004456:	241f      	movs	r4, #31
 8004458:	fa04 f303 	lsl.w	r3, r4, r3
 800445c:	ea22 0303 	bic.w	r3, r2, r3
 8004460:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004462:	6805      	ldr	r5, [r0, #0]
 8004464:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004466:	684b      	ldr	r3, [r1, #4]
 8004468:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800446c:	3b23      	subs	r3, #35	; 0x23
 800446e:	880c      	ldrh	r4, [r1, #0]
 8004470:	fa04 f303 	lsl.w	r3, r4, r3
 8004474:	4313      	orrs	r3, r2
 8004476:	632b      	str	r3, [r5, #48]	; 0x30
 8004478:	e7c1      	b.n	80043fe <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800447a:	6805      	ldr	r5, [r0, #0]
 800447c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800447e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004482:	3b41      	subs	r3, #65	; 0x41
 8004484:	241f      	movs	r4, #31
 8004486:	fa04 f303 	lsl.w	r3, r4, r3
 800448a:	ea22 0303 	bic.w	r3, r2, r3
 800448e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004490:	6805      	ldr	r5, [r0, #0]
 8004492:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004494:	684b      	ldr	r3, [r1, #4]
 8004496:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800449a:	3b41      	subs	r3, #65	; 0x41
 800449c:	880c      	ldrh	r4, [r1, #0]
 800449e:	fa04 f303 	lsl.w	r3, r4, r3
 80044a2:	4313      	orrs	r3, r2
 80044a4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80044a6:	e7aa      	b.n	80043fe <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044a8:	680b      	ldr	r3, [r1, #0]
 80044aa:	2b12      	cmp	r3, #18
 80044ac:	d1ab      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x86>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044ae:	4a16      	ldr	r2, [pc, #88]	; (8004508 <HAL_ADC_ConfigChannel+0x188>)
 80044b0:	6853      	ldr	r3, [r2, #4]
 80044b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044b6:	6053      	str	r3, [r2, #4]
 80044b8:	e7a5      	b.n	8004406 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044ba:	680b      	ldr	r3, [r1, #0]
 80044bc:	3b10      	subs	r3, #16
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d8a5      	bhi.n	800440e <HAL_ADC_ConfigChannel+0x8e>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c2:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_ADC_ConfigChannel+0x188>)
 80044c4:	6853      	ldr	r3, [r2, #4]
 80044c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ca:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80044cc:	680b      	ldr	r3, [r1, #0]
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d19d      	bne.n	800440e <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <HAL_ADC_ConfigChannel+0x18c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80044da:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80044de:	f202 3283 	addw	r2, r2, #899	; 0x383
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0c9b      	lsrs	r3, r3, #18
 80044e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044ec:	005a      	lsls	r2, r3, #1
 80044ee:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 80044f0:	e002      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x178>
        counter--;
 80044f2:	9b01      	ldr	r3, [sp, #4]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80044f8:	9b01      	ldr	r3, [sp, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f9      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x172>
 80044fe:	e786      	b.n	800440e <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8004500:	2002      	movs	r0, #2
 8004502:	e788      	b.n	8004416 <HAL_ADC_ConfigChannel+0x96>
 8004504:	40012000 	.word	0x40012000
 8004508:	40012300 	.word	0x40012300
 800450c:	20000030 	.word	0x20000030

08004510 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004510:	4a07      	ldr	r2, [pc, #28]	; (8004530 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004512:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004514:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800451c:	0200      	lsls	r0, r0, #8
 800451e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004522:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8004524:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8004528:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800452c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800452e:	4770      	bx	lr
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004534:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004536:	4b17      	ldr	r3, [pc, #92]	; (8004594 <HAL_NVIC_SetPriority+0x60>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800453e:	f1c3 0407 	rsb	r4, r3, #7
 8004542:	2c04      	cmp	r4, #4
 8004544:	bf28      	it	cs
 8004546:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004548:	1d1d      	adds	r5, r3, #4
 800454a:	2d06      	cmp	r5, #6
 800454c:	d918      	bls.n	8004580 <HAL_NVIC_SetPriority+0x4c>
 800454e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004550:	f04f 35ff 	mov.w	r5, #4294967295
 8004554:	fa05 f404 	lsl.w	r4, r5, r4
 8004558:	ea21 0104 	bic.w	r1, r1, r4
 800455c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800455e:	fa05 f303 	lsl.w	r3, r5, r3
 8004562:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004566:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004568:	2800      	cmp	r0, #0
 800456a:	db0b      	blt.n	8004584 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456c:	0109      	lsls	r1, r1, #4
 800456e:	b2c9      	uxtb	r1, r1
 8004570:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004574:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004578:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800457c:	bc30      	pop	{r4, r5}
 800457e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004580:	2300      	movs	r3, #0
 8004582:	e7e5      	b.n	8004550 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004584:	f000 000f 	and.w	r0, r0, #15
 8004588:	0109      	lsls	r1, r1, #4
 800458a:	b2c9      	uxtb	r1, r1
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <HAL_NVIC_SetPriority+0x64>)
 800458e:	5419      	strb	r1, [r3, r0]
 8004590:	e7f4      	b.n	800457c <HAL_NVIC_SetPriority+0x48>
 8004592:	bf00      	nop
 8004594:	e000ed00 	.word	0xe000ed00
 8004598:	e000ed14 	.word	0xe000ed14

0800459c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800459c:	2800      	cmp	r0, #0
 800459e:	db07      	blt.n	80045b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a0:	f000 021f 	and.w	r2, r0, #31
 80045a4:	0940      	lsrs	r0, r0, #5
 80045a6:	2301      	movs	r3, #1
 80045a8:	4093      	lsls	r3, r2
 80045aa:	4a02      	ldr	r2, [pc, #8]	; (80045b4 <HAL_NVIC_EnableIRQ+0x18>)
 80045ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	e000e100 	.word	0xe000e100

080045b8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80045b8:	b158      	cbz	r0, 80045d2 <HAL_CRC_Init+0x1a>
{
 80045ba:	b510      	push	{r4, lr}
 80045bc:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80045be:	7943      	ldrb	r3, [r0, #5]
 80045c0:	b11b      	cbz	r3, 80045ca <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80045c2:	2301      	movs	r3, #1
 80045c4:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80045c6:	2000      	movs	r0, #0
}
 80045c8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 80045ca:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 80045cc:	f7fe ff08 	bl	80033e0 <HAL_CRC_MspInit>
 80045d0:	e7f7      	b.n	80045c2 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80045d2:	2001      	movs	r0, #1
}
 80045d4:	4770      	bx	lr

080045d6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80045d6:	b430      	push	{r4, r5}
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80045d8:	2302      	movs	r3, #2
 80045da:	7143      	strb	r3, [r0, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80045dc:	6804      	ldr	r4, [r0, #0]
 80045de:	68a3      	ldr	r3, [r4, #8]
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	e004      	b.n	80045f4 <HAL_CRC_Calculate+0x1e>
  {
    hcrc->Instance->DR = pBuffer[index];
 80045ea:	6804      	ldr	r4, [r0, #0]
 80045ec:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 80045f0:	6025      	str	r5, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 80045f2:	3301      	adds	r3, #1
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d3f8      	bcc.n	80045ea <HAL_CRC_Calculate+0x14>
  }
  temp = hcrc->Instance->DR;
 80045f8:	6803      	ldr	r3, [r0, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80045fc:	2201      	movs	r2, #1
 80045fe:	7142      	strb	r2, [r0, #5]

  /* Return the CRC computed value */
  return temp;
}
 8004600:	4618      	mov	r0, r3
 8004602:	bc30      	pop	{r4, r5}
 8004604:	4770      	bx	lr

08004606 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004606:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004608:	6805      	ldr	r5, [r0, #0]
 800460a:	682c      	ldr	r4, [r5, #0]
 800460c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8004610:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004612:	6804      	ldr	r4, [r0, #0]
 8004614:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004616:	6883      	ldr	r3, [r0, #8]
 8004618:	2b40      	cmp	r3, #64	; 0x40
 800461a:	d005      	beq.n	8004628 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800461c:	6803      	ldr	r3, [r0, #0]
 800461e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8004620:	6803      	ldr	r3, [r0, #0]
 8004622:	60da      	str	r2, [r3, #12]
  }
}
 8004624:	bc30      	pop	{r4, r5}
 8004626:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8004628:	6803      	ldr	r3, [r0, #0]
 800462a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800462c:	6803      	ldr	r3, [r0, #0]
 800462e:	60d9      	str	r1, [r3, #12]
 8004630:	e7f8      	b.n	8004624 <DMA_SetConfig+0x1e>
	...

08004634 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004634:	6802      	ldr	r2, [r0, #0]
 8004636:	b2d3      	uxtb	r3, r2
 8004638:	3b10      	subs	r3, #16
 800463a:	490b      	ldr	r1, [pc, #44]	; (8004668 <DMA_CalcBaseAndBitshift+0x34>)
 800463c:	fba1 1303 	umull	r1, r3, r1, r3
 8004640:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004642:	490a      	ldr	r1, [pc, #40]	; (800466c <DMA_CalcBaseAndBitshift+0x38>)
 8004644:	5cc9      	ldrb	r1, [r1, r3]
 8004646:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004648:	2b03      	cmp	r3, #3
 800464a:	d806      	bhi.n	800465a <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800464c:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004650:	f022 0203 	bic.w	r2, r2, #3
 8004654:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8004656:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004658:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800465a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800465e:	f022 0203 	bic.w	r2, r2, #3
 8004662:	3204      	adds	r2, #4
 8004664:	6582      	str	r2, [r0, #88]	; 0x58
 8004666:	e7f6      	b.n	8004656 <DMA_CalcBaseAndBitshift+0x22>
 8004668:	aaaaaaab 	.word	0xaaaaaaab
 800466c:	0800a848 	.word	0x0800a848

08004670 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004670:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004672:	6982      	ldr	r2, [r0, #24]
 8004674:	b992      	cbnz	r2, 800469c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8004676:	2b01      	cmp	r3, #1
 8004678:	d00a      	beq.n	8004690 <DMA_CheckFifoParam+0x20>
 800467a:	b11b      	cbz	r3, 8004684 <DMA_CheckFifoParam+0x14>
 800467c:	2b02      	cmp	r3, #2
 800467e:	d001      	beq.n	8004684 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2000      	movs	r0, #0
 8004682:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004684:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004686:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800468a:	d12c      	bne.n	80046e6 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 800468c:	2000      	movs	r0, #0
 800468e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004690:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004696:	d028      	beq.n	80046ea <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2000      	movs	r0, #0
 800469a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800469c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80046a0:	d005      	beq.n	80046ae <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d929      	bls.n	80046fa <DMA_CheckFifoParam+0x8a>
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d015      	beq.n	80046d6 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2000      	movs	r0, #0
 80046ac:	4770      	bx	lr
    switch (tmp)
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d803      	bhi.n	80046ba <DMA_CheckFifoParam+0x4a>
 80046b2:	e8df f003 	tbb	[pc, r3]
 80046b6:	041c      	.short	0x041c
 80046b8:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2000      	movs	r0, #0
 80046bc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80046c4:	d115      	bne.n	80046f2 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80046c6:	2000      	movs	r0, #0
 80046c8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046d0:	d011      	beq.n	80046f6 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80046d2:	2000      	movs	r0, #0
 80046d4:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80046d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80046dc:	d001      	beq.n	80046e2 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80046de:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80046e0:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2000      	movs	r0, #0
 80046e4:	4770      	bx	lr
        status = HAL_ERROR;
 80046e6:	2001      	movs	r0, #1
 80046e8:	4770      	bx	lr
        status = HAL_ERROR;
 80046ea:	2001      	movs	r0, #1
 80046ec:	4770      	bx	lr
      status = HAL_ERROR;
 80046ee:	2001      	movs	r0, #1
 80046f0:	4770      	bx	lr
        status = HAL_ERROR;
 80046f2:	2001      	movs	r0, #1
 80046f4:	4770      	bx	lr
        status = HAL_ERROR;
 80046f6:	2001      	movs	r0, #1
 80046f8:	4770      	bx	lr
      status = HAL_ERROR;
 80046fa:	2001      	movs	r0, #1
 80046fc:	4770      	bx	lr
	...

08004700 <HAL_DMA_Init>:
{
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff fd70 	bl	80041e8 <HAL_GetTick>
  if(hdma == NULL)
 8004708:	2c00      	cmp	r4, #0
 800470a:	d05b      	beq.n	80047c4 <HAL_DMA_Init+0xc4>
 800470c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800470e:	2300      	movs	r3, #0
 8004710:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	f012 0f01 	tst.w	r2, #1
 800472c:	d00a      	beq.n	8004744 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472e:	f7ff fd5b 	bl	80041e8 <HAL_GetTick>
 8004732:	1b40      	subs	r0, r0, r5
 8004734:	2805      	cmp	r0, #5
 8004736:	d9f5      	bls.n	8004724 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004738:	2320      	movs	r3, #32
 800473a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800473c:	2003      	movs	r0, #3
 800473e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004742:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8004744:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004746:	4820      	ldr	r0, [pc, #128]	; (80047c8 <HAL_DMA_Init+0xc8>)
 8004748:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800474a:	6861      	ldr	r1, [r4, #4]
 800474c:	68a2      	ldr	r2, [r4, #8]
 800474e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004750:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004752:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004754:	6921      	ldr	r1, [r4, #16]
 8004756:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004758:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475c:	69a1      	ldr	r1, [r4, #24]
 800475e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004760:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004762:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8004764:	6a21      	ldr	r1, [r4, #32]
 8004766:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004768:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800476a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800476c:	2904      	cmp	r1, #4
 800476e:	d01e      	beq.n	80047ae <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8004770:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004772:	6826      	ldr	r6, [r4, #0]
 8004774:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004776:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800477a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800477c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8004782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004784:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004788:	b11b      	cbz	r3, 8004792 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800478a:	4620      	mov	r0, r4
 800478c:	f7ff ff70 	bl	8004670 <DMA_CheckFifoParam>
 8004790:	b990      	cbnz	r0, 80047b8 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8004792:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004794:	4620      	mov	r0, r4
 8004796:	f7ff ff4d 	bl	8004634 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800479a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800479c:	233f      	movs	r3, #63	; 0x3f
 800479e:	4093      	lsls	r3, r2
 80047a0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047a2:	2000      	movs	r0, #0
 80047a4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80047ac:	e7c9      	b.n	8004742 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047ae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80047b0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80047b2:	4301      	orrs	r1, r0
 80047b4:	430a      	orrs	r2, r1
 80047b6:	e7db      	b.n	8004770 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047b8:	2340      	movs	r3, #64	; 0x40
 80047ba:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80047bc:	2001      	movs	r0, #1
 80047be:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80047c2:	e7be      	b.n	8004742 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80047c4:	2001      	movs	r0, #1
 80047c6:	e7bc      	b.n	8004742 <HAL_DMA_Init+0x42>
 80047c8:	f010803f 	.word	0xf010803f

080047cc <HAL_DMA_Start_IT>:
{
 80047cc:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ce:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80047d0:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80047d4:	2c01      	cmp	r4, #1
 80047d6:	d02c      	beq.n	8004832 <HAL_DMA_Start_IT+0x66>
 80047d8:	2401      	movs	r4, #1
 80047da:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80047de:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80047e2:	b2e4      	uxtb	r4, r4
 80047e4:	2c01      	cmp	r4, #1
 80047e6:	d004      	beq.n	80047f2 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 80047e8:	2300      	movs	r3, #0
 80047ea:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80047ee:	2002      	movs	r0, #2
}
 80047f0:	bd38      	pop	{r3, r4, r5, pc}
 80047f2:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f4:	2002      	movs	r0, #2
 80047f6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047fa:	2000      	movs	r0, #0
 80047fc:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff ff01 	bl	8004606 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004804:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004806:	233f      	movs	r3, #63	; 0x3f
 8004808:	4093      	lsls	r3, r2
 800480a:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	f043 0316 	orr.w	r3, r3, #22
 8004814:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8004816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004818:	b123      	cbz	r3, 8004824 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	f043 0308 	orr.w	r3, r3, #8
 8004822:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2000      	movs	r0, #0
 8004830:	e7de      	b.n	80047f0 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8004832:	2002      	movs	r0, #2
 8004834:	e7dc      	b.n	80047f0 <HAL_DMA_Start_IT+0x24>

08004836 <HAL_DMA_Abort>:
{
 8004836:	b570      	push	{r4, r5, r6, lr}
 8004838:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800483c:	f7ff fcd4 	bl	80041e8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004840:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d006      	beq.n	8004858 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800484e:	2300      	movs	r3, #0
 8004850:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8004854:	2001      	movs	r0, #1
}
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	f023 0316 	bic.w	r3, r3, #22
 8004862:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	6953      	ldr	r3, [r2, #20]
 8004868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486c:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800486e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004870:	b1e3      	cbz	r3, 80048ac <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	6813      	ldr	r3, [r2, #0]
 8004876:	f023 0308 	bic.w	r3, r3, #8
 800487a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800487c:	6822      	ldr	r2, [r4, #0]
 800487e:	6813      	ldr	r3, [r2, #0]
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f013 0f01 	tst.w	r3, #1
 800488e:	d011      	beq.n	80048b4 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004890:	f7ff fcaa 	bl	80041e8 <HAL_GetTick>
 8004894:	1b40      	subs	r0, r0, r5
 8004896:	2805      	cmp	r0, #5
 8004898:	d9f5      	bls.n	8004886 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800489a:	2320      	movs	r3, #32
 800489c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800489e:	2300      	movs	r3, #0
 80048a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048a4:	2003      	movs	r0, #3
 80048a6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80048aa:	e7d4      	b.n	8004856 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1df      	bne.n	8004872 <HAL_DMA_Abort+0x3c>
 80048b2:	e7e3      	b.n	800487c <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80048b6:	233f      	movs	r3, #63	; 0x3f
 80048b8:	4093      	lsls	r3, r2
 80048ba:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 80048bc:	2000      	movs	r0, #0
 80048be:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80048c8:	e7c5      	b.n	8004856 <HAL_DMA_Abort+0x20>

080048ca <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ca:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d003      	beq.n	80048dc <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80048d8:	2001      	movs	r0, #1
 80048da:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80048dc:	2305      	movs	r3, #5
 80048de:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80048e2:	6802      	ldr	r2, [r0, #0]
 80048e4:	6813      	ldr	r3, [r2, #0]
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80048ec:	2000      	movs	r0, #0
}
 80048ee:	4770      	bx	lr

080048f0 <HAL_DMA_IRQHandler>:
{
 80048f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048f2:	b083      	sub	sp, #12
 80048f4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048fa:	4b72      	ldr	r3, [pc, #456]	; (8004ac4 <HAL_DMA_IRQHandler+0x1d4>)
 80048fc:	681d      	ldr	r5, [r3, #0]
 80048fe:	4b72      	ldr	r3, [pc, #456]	; (8004ac8 <HAL_DMA_IRQHandler+0x1d8>)
 8004900:	fba3 3505 	umull	r3, r5, r3, r5
 8004904:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004906:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8004908:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800490a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800490c:	2308      	movs	r3, #8
 800490e:	4093      	lsls	r3, r2
 8004910:	4233      	tst	r3, r6
 8004912:	d010      	beq.n	8004936 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004914:	6803      	ldr	r3, [r0, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	f012 0f04 	tst.w	r2, #4
 800491c:	d00b      	beq.n	8004936 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	f022 0204 	bic.w	r2, r2, #4
 8004924:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004926:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004928:	2308      	movs	r3, #8
 800492a:	4093      	lsls	r3, r2
 800492c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800492e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004936:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004938:	2301      	movs	r3, #1
 800493a:	4093      	lsls	r3, r2
 800493c:	4233      	tst	r3, r6
 800493e:	d009      	beq.n	8004954 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	6952      	ldr	r2, [r2, #20]
 8004944:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004948:	d004      	beq.n	8004954 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800494a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800494c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004954:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004956:	2304      	movs	r3, #4
 8004958:	4093      	lsls	r3, r2
 800495a:	4233      	tst	r3, r6
 800495c:	d009      	beq.n	8004972 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800495e:	6822      	ldr	r2, [r4, #0]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	f012 0f02 	tst.w	r2, #2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004968:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800496a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004972:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004974:	2310      	movs	r3, #16
 8004976:	4093      	lsls	r3, r2
 8004978:	4233      	tst	r3, r6
 800497a:	d024      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	f012 0f08 	tst.w	r2, #8
 8004984:	d01f      	beq.n	80049c6 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004986:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004990:	d00d      	beq.n	80049ae <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004998:	d104      	bne.n	80049a4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800499a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800499c:	b19b      	cbz	r3, 80049c6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 800499e:	4620      	mov	r0, r4
 80049a0:	4798      	blx	r3
 80049a2:	e010      	b.n	80049c6 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80049a6:	b173      	cbz	r3, 80049c6 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80049a8:	4620      	mov	r0, r4
 80049aa:	4798      	blx	r3
 80049ac:	e00b      	b.n	80049c6 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80049b4:	d103      	bne.n	80049be <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	f022 0208 	bic.w	r2, r2, #8
 80049bc:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80049be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049c0:	b10b      	cbz	r3, 80049c6 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80049c2:	4620      	mov	r0, r4
 80049c4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80049c8:	2320      	movs	r3, #32
 80049ca:	4093      	lsls	r3, r2
 80049cc:	4233      	tst	r3, r6
 80049ce:	d055      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	f012 0f10 	tst.w	r2, #16
 80049d8:	d050      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049da:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049dc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d00e      	beq.n	8004a04 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80049ee:	d033      	beq.n	8004a58 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80049f6:	d12a      	bne.n	8004a4e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80049f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d03e      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80049fe:	4620      	mov	r0, r4
 8004a00:	4798      	blx	r3
 8004a02:	e03b      	b.n	8004a7c <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a04:	6822      	ldr	r2, [r4, #0]
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	f023 0316 	bic.w	r3, r3, #22
 8004a0c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	6953      	ldr	r3, [r2, #20]
 8004a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a16:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a1a:	b1a3      	cbz	r3, 8004a46 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a1c:	6822      	ldr	r2, [r4, #0]
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	f023 0308 	bic.w	r3, r3, #8
 8004a24:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004a28:	233f      	movs	r3, #63	; 0x3f
 8004a2a:	4093      	lsls	r3, r2
 8004a2c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004a34:	2301      	movs	r3, #1
 8004a36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004a3a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d03f      	beq.n	8004ac0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8004a40:	4620      	mov	r0, r4
 8004a42:	4798      	blx	r3
 8004a44:	e03c      	b.n	8004ac0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a46:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e7      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x12c>
 8004a4c:	e7eb      	b.n	8004a26 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8004a4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a50:	b1a3      	cbz	r3, 8004a7c <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8004a52:	4620      	mov	r0, r4
 8004a54:	4798      	blx	r3
 8004a56:	e011      	b.n	8004a7c <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004a5e:	d109      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	f022 0210 	bic.w	r2, r2, #16
 8004a66:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8004a74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a76:	b10b      	cbz	r3, 8004a7c <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a7e:	b1fb      	cbz	r3, 8004ac0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a82:	f013 0f01 	tst.w	r3, #1
 8004a86:	d017      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a88:	2305      	movs	r3, #5
 8004a8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	6813      	ldr	r3, [r2, #0]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004a98:	9b01      	ldr	r3, [sp, #4]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	42ab      	cmp	r3, r5
 8004aa0:	d804      	bhi.n	8004aac <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f013 0f01 	tst.w	r3, #1
 8004aaa:	d1f5      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8004aac:	2300      	movs	r3, #0
 8004aae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004ab8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004aba:	b10b      	cbz	r3, 8004ac0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8004abc:	4620      	mov	r0, r4
 8004abe:	4798      	blx	r3
}
 8004ac0:	b003      	add	sp, #12
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac4:	20000030 	.word	0x20000030
 8004ac8:	1b4e81b5 	.word	0x1b4e81b5

08004acc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8004acc:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	f200 80c5 	bhi.w	8004c62 <HAL_GPIO_Init+0x192>
{
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	b083      	sub	sp, #12
 8004adc:	e039      	b.n	8004b52 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ade:	2204      	movs	r2, #4
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x14>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	40aa      	lsls	r2, r5
 8004ae6:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ae8:	3402      	adds	r4, #2
 8004aea:	4d5e      	ldr	r5, [pc, #376]	; (8004c64 <HAL_GPIO_Init+0x194>)
 8004aec:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004af0:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_GPIO_Init+0x198>)
 8004af2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004af4:	43f2      	mvns	r2, r6
 8004af6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004afa:	684f      	ldr	r7, [r1, #4]
 8004afc:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004b00:	d001      	beq.n	8004b06 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8004b02:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8004b06:	4c58      	ldr	r4, [pc, #352]	; (8004c68 <HAL_GPIO_Init+0x198>)
 8004b08:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8004b0a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004b0c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b10:	684f      	ldr	r7, [r1, #4]
 8004b12:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004b16:	d001      	beq.n	8004b1c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8004b18:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8004b1c:	4c52      	ldr	r4, [pc, #328]	; (8004c68 <HAL_GPIO_Init+0x198>)
 8004b1e:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b20:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004b22:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b26:	684f      	ldr	r7, [r1, #4]
 8004b28:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004b2c:	d001      	beq.n	8004b32 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8004b2e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8004b32:	4c4d      	ldr	r4, [pc, #308]	; (8004c68 <HAL_GPIO_Init+0x198>)
 8004b34:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8004b36:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004b38:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b3a:	684d      	ldr	r5, [r1, #4]
 8004b3c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8004b40:	d001      	beq.n	8004b46 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8004b42:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8004b46:	4c48      	ldr	r4, [pc, #288]	; (8004c68 <HAL_GPIO_Init+0x198>)
 8004b48:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	2b0f      	cmp	r3, #15
 8004b4e:	f200 8086 	bhi.w	8004c5e <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 8004b52:	2201      	movs	r2, #1
 8004b54:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b56:	680c      	ldr	r4, [r1, #0]
 8004b58:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8004b5c:	42b2      	cmp	r2, r6
 8004b5e:	d1f4      	bne.n	8004b4a <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b60:	684c      	ldr	r4, [r1, #4]
 8004b62:	1e65      	subs	r5, r4, #1
 8004b64:	2d01      	cmp	r5, #1
 8004b66:	d903      	bls.n	8004b70 <HAL_GPIO_Init+0xa0>
 8004b68:	2c11      	cmp	r4, #17
 8004b6a:	d001      	beq.n	8004b70 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b6c:	2c12      	cmp	r4, #18
 8004b6e:	d112      	bne.n	8004b96 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8004b70:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b72:	005f      	lsls	r7, r3, #1
 8004b74:	2403      	movs	r4, #3
 8004b76:	40bc      	lsls	r4, r7
 8004b78:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b7c:	68cc      	ldr	r4, [r1, #12]
 8004b7e:	40bc      	lsls	r4, r7
 8004b80:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004b82:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8004b84:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b86:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b8a:	684c      	ldr	r4, [r1, #4]
 8004b8c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8004b90:	409a      	lsls	r2, r3
 8004b92:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8004b94:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8004b96:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b98:	005f      	lsls	r7, r3, #1
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	40ba      	lsls	r2, r7
 8004b9e:	43d2      	mvns	r2, r2
 8004ba0:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ba2:	688d      	ldr	r5, [r1, #8]
 8004ba4:	40bd      	lsls	r5, r7
 8004ba6:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8004ba8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004baa:	684c      	ldr	r4, [r1, #4]
 8004bac:	2c02      	cmp	r4, #2
 8004bae:	d001      	beq.n	8004bb4 <HAL_GPIO_Init+0xe4>
 8004bb0:	2c12      	cmp	r4, #18
 8004bb2:	d113      	bne.n	8004bdc <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8004bb4:	08dd      	lsrs	r5, r3, #3
 8004bb6:	3508      	adds	r5, #8
 8004bb8:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bbc:	f003 0407 	and.w	r4, r3, #7
 8004bc0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004bc4:	240f      	movs	r4, #15
 8004bc6:	fa04 f40c 	lsl.w	r4, r4, ip
 8004bca:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bce:	690c      	ldr	r4, [r1, #16]
 8004bd0:	fa04 f40c 	lsl.w	r4, r4, ip
 8004bd4:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004bd8:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8004bdc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bde:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be0:	684c      	ldr	r4, [r1, #4]
 8004be2:	f004 0403 	and.w	r4, r4, #3
 8004be6:	40bc      	lsls	r4, r7
 8004be8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004bea:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bec:	684a      	ldr	r2, [r1, #4]
 8004bee:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8004bf2:	d0aa      	beq.n	8004b4a <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	9201      	str	r2, [sp, #4]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_GPIO_Init+0x19c>)
 8004bfa:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004bfc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004c00:	6454      	str	r4, [r2, #68]	; 0x44
 8004c02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c04:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004c08:	9201      	str	r2, [sp, #4]
 8004c0a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c0c:	089c      	lsrs	r4, r3, #2
 8004c0e:	1ca5      	adds	r5, r4, #2
 8004c10:	4a14      	ldr	r2, [pc, #80]	; (8004c64 <HAL_GPIO_Init+0x194>)
 8004c12:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	0095      	lsls	r5, r2, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	40aa      	lsls	r2, r5
 8004c20:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c24:	4a12      	ldr	r2, [pc, #72]	; (8004c70 <HAL_GPIO_Init+0x1a0>)
 8004c26:	4290      	cmp	r0, r2
 8004c28:	f43f af5b 	beq.w	8004ae2 <HAL_GPIO_Init+0x12>
 8004c2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c30:	4290      	cmp	r0, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_GPIO_Init+0x182>
 8004c34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c38:	4290      	cmp	r0, r2
 8004c3a:	d00c      	beq.n	8004c56 <HAL_GPIO_Init+0x186>
 8004c3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c40:	4290      	cmp	r0, r2
 8004c42:	d00a      	beq.n	8004c5a <HAL_GPIO_Init+0x18a>
 8004c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c48:	4290      	cmp	r0, r2
 8004c4a:	f43f af48 	beq.w	8004ade <HAL_GPIO_Init+0xe>
 8004c4e:	2207      	movs	r2, #7
 8004c50:	e748      	b.n	8004ae4 <HAL_GPIO_Init+0x14>
 8004c52:	2201      	movs	r2, #1
 8004c54:	e746      	b.n	8004ae4 <HAL_GPIO_Init+0x14>
 8004c56:	2202      	movs	r2, #2
 8004c58:	e744      	b.n	8004ae4 <HAL_GPIO_Init+0x14>
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	e742      	b.n	8004ae4 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8004c5e:	b003      	add	sp, #12
 8004c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c62:	4770      	bx	lr
 8004c64:	40013800 	.word	0x40013800
 8004c68:	40013c00 	.word	0x40013c00
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40020000 	.word	0x40020000

08004c74 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c74:	b912      	cbnz	r2, 8004c7c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c76:	0409      	lsls	r1, r1, #16
 8004c78:	6181      	str	r1, [r0, #24]
  }
}
 8004c7a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8004c7c:	6181      	str	r1, [r0, #24]
 8004c7e:	4770      	bx	lr

08004c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c80:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c82:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	4203      	tst	r3, r0
 8004c88:	d100      	bne.n	8004c8c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004c8a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c8c:	4b02      	ldr	r3, [pc, #8]	; (8004c98 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004c8e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c90:	f7fe fb50 	bl	8003334 <HAL_GPIO_EXTI_Callback>
}
 8004c94:	e7f9      	b.n	8004c8a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004c96:	bf00      	nop
 8004c98:	40013c00 	.word	0x40013c00

08004c9c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c9c:	6803      	ldr	r3, [r0, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004ca4:	d011      	beq.n	8004cca <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004caa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004cbc:	f042 0204 	orr.w	r2, r2, #4
 8004cc0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	4770      	bx	lr
  }
  return HAL_OK;
 8004cca:	2000      	movs	r0, #0
}
 8004ccc:	4770      	bx	lr

08004cce <I2C_WaitOnFlagUntilTimeout>:
{
 8004cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd0:	4606      	mov	r6, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4617      	mov	r7, r2
 8004cd6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd8:	e022      	b.n	8004d20 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cda:	f7ff fa85 	bl	80041e8 <HAL_GetTick>
 8004cde:	9b06      	ldr	r3, [sp, #24]
 8004ce0:	1ac0      	subs	r0, r0, r3
 8004ce2:	42a8      	cmp	r0, r5
 8004ce4:	d800      	bhi.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8004ce6:	b9dd      	cbnz	r5, 8004d20 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cec:	2220      	movs	r2, #32
 8004cee:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cf2:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cf6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8004cf8:	f042 0220 	orr.w	r2, r2, #32
 8004cfc:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cfe:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8004d02:	2001      	movs	r0, #1
 8004d04:	e01a      	b.n	8004d3c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	ea24 0303 	bic.w	r3, r4, r3
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	fab3 f383 	clz	r3, r3
 8004d14:	095b      	lsrs	r3, r3, #5
 8004d16:	429f      	cmp	r7, r3
 8004d18:	d10f      	bne.n	8004d3a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004d1e:	d1dc      	bne.n	8004cda <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d20:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d0ee      	beq.n	8004d06 <I2C_WaitOnFlagUntilTimeout+0x38>
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	ea24 0303 	bic.w	r3, r4, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	fab3 f383 	clz	r3, r3
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	e7ed      	b.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8004d3a:	2000      	movs	r0, #0
}
 8004d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d40:	4604      	mov	r4, r0
 8004d42:	460d      	mov	r5, r1
 8004d44:	4616      	mov	r6, r2
 8004d46:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d48:	e03c      	b.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d50:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d58:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d6a:	f042 0204 	orr.w	r2, r2, #4
 8004d6e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004d70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8004d74:	2001      	movs	r0, #1
 8004d76:	e033      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d78:	f7ff fa36 	bl	80041e8 <HAL_GetTick>
 8004d7c:	1bc0      	subs	r0, r0, r7
 8004d7e:	42b0      	cmp	r0, r6
 8004d80:	d800      	bhi.n	8004d84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8004d82:	b9fe      	cbnz	r6, 8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d84:	2300      	movs	r3, #0
 8004d86:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d94:	f042 0220 	orr.w	r2, r2, #32
 8004d98:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004d9e:	2001      	movs	r0, #1
 8004da0:	e01e      	b.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	ea25 0303 	bic.w	r3, r5, r3
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3300      	adds	r3, #0
 8004dae:	bf18      	it	ne
 8004db0:	2301      	movne	r3, #1
 8004db2:	b1a3      	cbz	r3, 8004dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	695a      	ldr	r2, [r3, #20]
 8004db8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004dbc:	d1c5      	bne.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004dc2:	d1d9      	bne.n	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dc4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d0ea      	beq.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	ea25 0303 	bic.w	r3, r5, r3
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3300      	adds	r3, #0
 8004dd8:	bf18      	it	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	e7e9      	b.n	8004db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8004dde:	2000      	movs	r0, #0
}
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004de2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004de2:	b570      	push	{r4, r5, r6, lr}
 8004de4:	4604      	mov	r4, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004df2:	d11c      	bne.n	8004e2e <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff ff51 	bl	8004c9c <I2C_IsAcknowledgeFailed>
 8004dfa:	b9d0      	cbnz	r0, 8004e32 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004dfc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004e00:	d0f3      	beq.n	8004dea <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7ff f9f1 	bl	80041e8 <HAL_GetTick>
 8004e06:	1b80      	subs	r0, r0, r6
 8004e08:	42a8      	cmp	r0, r5
 8004e0a:	d801      	bhi.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004e0c:	2d00      	cmp	r5, #0
 8004e0e:	d1ec      	bne.n	8004dea <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	2220      	movs	r2, #32
 8004e16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e20:	f042 0220 	orr.w	r2, r2, #32
 8004e24:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004e26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	e000      	b.n	8004e30 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004e2e:	2000      	movs	r0, #0
}
 8004e30:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004e32:	2001      	movs	r0, #1
 8004e34:	e7fc      	b.n	8004e30 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
	...

08004e38 <I2C_RequestMemoryWrite>:
{
 8004e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4688      	mov	r8, r1
 8004e42:	4616      	mov	r6, r2
 8004e44:	461f      	mov	r7, r3
 8004e46:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e48:	6802      	ldr	r2, [r0, #0]
 8004e4a:	6813      	ldr	r3, [r2, #0]
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e50:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	9500      	str	r5, [sp, #0]
 8004e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e56:	2200      	movs	r2, #0
 8004e58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e5c:	f7ff ff37 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 8004e60:	b160      	cbz	r0, 8004e7c <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e6a:	d04f      	beq.n	8004f0c <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e70:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	b004      	add	sp, #16
 8004e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8004e82:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e84:	462b      	mov	r3, r5
 8004e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e88:	4921      	ldr	r1, [pc, #132]	; (8004f10 <I2C_RequestMemoryWrite+0xd8>)
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f7ff ff57 	bl	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e90:	b108      	cbz	r0, 8004e96 <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e7ee      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	9303      	str	r3, [sp, #12]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	9203      	str	r2, [sp, #12]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	9303      	str	r3, [sp, #12]
 8004ea4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea6:	462a      	mov	r2, r5
 8004ea8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff ff99 	bl	8004de2 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	b158      	cbz	r0, 8004ecc <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d001      	beq.n	8004ebe <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7da      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	6813      	ldr	r3, [r2, #0]
 8004ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ec6:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e7d3      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ecc:	2f01      	cmp	r7, #1
 8004ece:	d00e      	beq.n	8004eee <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	0a32      	lsrs	r2, r6, #8
 8004ed4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed6:	462a      	mov	r2, r5
 8004ed8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff ff81 	bl	8004de2 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	b178      	cbz	r0, 8004f04 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d005      	beq.n	8004ef6 <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e7c2      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	b2f6      	uxtb	r6, r6
 8004ef2:	6116      	str	r6, [r2, #16]
 8004ef4:	e7be      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	6813      	ldr	r3, [r2, #0]
 8004efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004efe:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e7b7      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f04:	6822      	ldr	r2, [r4, #0]
 8004f06:	b2f6      	uxtb	r6, r6
 8004f08:	6116      	str	r6, [r2, #16]
 8004f0a:	e7b3      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e7b1      	b.n	8004e74 <I2C_RequestMemoryWrite+0x3c>
 8004f10:	00010002 	.word	0x00010002

08004f14 <I2C_RequestMemoryRead>:
{
 8004f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	460e      	mov	r6, r1
 8004f1e:	4617      	mov	r7, r2
 8004f20:	4698      	mov	r8, r3
 8004f22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f24:	6802      	ldr	r2, [r0, #0]
 8004f26:	6813      	ldr	r3, [r2, #0]
 8004f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f2c:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2e:	6802      	ldr	r2, [r0, #0]
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f36:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f38:	9500      	str	r5, [sp, #0]
 8004f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f42:	f7ff fec4 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 8004f46:	b168      	cbz	r0, 8004f64 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f50:	f000 8089 	beq.w	8005066 <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f58:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	b004      	add	sp, #16
 8004f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f64:	b2f6      	uxtb	r6, r6
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8004f6c:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f6e:	462b      	mov	r3, r5
 8004f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f72:	493f      	ldr	r1, [pc, #252]	; (8005070 <I2C_RequestMemoryRead+0x15c>)
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7ff fee2 	bl	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f7a:	b108      	cbz	r0, 8004f80 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e7ed      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f80:	2300      	movs	r3, #0
 8004f82:	9303      	str	r3, [sp, #12]
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	695a      	ldr	r2, [r3, #20]
 8004f88:	9203      	str	r2, [sp, #12]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	9303      	str	r3, [sp, #12]
 8004f8e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	462a      	mov	r2, r5
 8004f92:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ff24 	bl	8004de2 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f9a:	b158      	cbz	r0, 8004fb4 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d001      	beq.n	8004fa6 <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e7da      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	6813      	ldr	r3, [r2, #0]
 8004faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fae:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e7d3      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fb4:	f1b8 0f01 	cmp.w	r8, #1
 8004fb8:	d10d      	bne.n	8004fd6 <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	b2ff      	uxtb	r7, r7
 8004fbe:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f7ff ff0c 	bl	8004de2 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fca:	b320      	cbz	r0, 8005016 <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d01a      	beq.n	8005008 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7c2      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	0a3a      	lsrs	r2, r7, #8
 8004fda:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fdc:	462a      	mov	r2, r5
 8004fde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7ff fefe 	bl	8004de2 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe6:	b158      	cbz	r0, 8005000 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d001      	beq.n	8004ff2 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e7b4      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	6813      	ldr	r3, [r2, #0]
 8004ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ffa:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e7ad      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	b2ff      	uxtb	r7, r7
 8005004:	611f      	str	r7, [r3, #16]
 8005006:	e7db      	b.n	8004fc0 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	6813      	ldr	r3, [r2, #0]
 800500c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005010:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e7a2      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005016:	6822      	ldr	r2, [r4, #0]
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005020:	9500      	str	r5, [sp, #0]
 8005022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005024:	2200      	movs	r2, #0
 8005026:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800502a:	4620      	mov	r0, r4
 800502c:	f7ff fe4f 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 8005030:	b148      	cbz	r0, 8005046 <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f413 7f80 	tst.w	r3, #256	; 0x100
 800503a:	d016      	beq.n	800506a <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800503c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005040:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e78a      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005046:	6823      	ldr	r3, [r4, #0]
 8005048:	f046 0601 	orr.w	r6, r6, #1
 800504c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800504e:	462b      	mov	r3, r5
 8005050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005052:	4907      	ldr	r1, [pc, #28]	; (8005070 <I2C_RequestMemoryRead+0x15c>)
 8005054:	4620      	mov	r0, r4
 8005056:	f7ff fe72 	bl	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2800      	cmp	r0, #0
 800505e:	f43f af7d 	beq.w	8004f5c <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e77a      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e778      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e776      	b.n	8004f5c <I2C_RequestMemoryRead+0x48>
 800506e:	bf00      	nop
 8005070:	00010002 	.word	0x00010002

08005074 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005074:	b570      	push	{r4, r5, r6, lr}
 8005076:	4604      	mov	r4, r0
 8005078:	460d      	mov	r5, r1
 800507a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f013 0f04 	tst.w	r3, #4
 8005084:	d11c      	bne.n	80050c0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005086:	4620      	mov	r0, r4
 8005088:	f7ff fe08 	bl	8004c9c <I2C_IsAcknowledgeFailed>
 800508c:	b9d0      	cbnz	r0, 80050c4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800508e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005092:	d0f3      	beq.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005094:	f7ff f8a8 	bl	80041e8 <HAL_GetTick>
 8005098:	1b80      	subs	r0, r0, r6
 800509a:	42a8      	cmp	r0, r5
 800509c:	d801      	bhi.n	80050a2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800509e:	2d00      	cmp	r5, #0
 80050a0:	d1ec      	bne.n	800507c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050a2:	2300      	movs	r3, #0
 80050a4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050a6:	2220      	movs	r2, #32
 80050a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80050b2:	f042 0220 	orr.w	r2, r2, #32
 80050b6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80050b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80050bc:	2001      	movs	r0, #1
 80050be:	e000      	b.n	80050c2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80050c0:	2000      	movs	r0, #0
}
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80050c4:	2001      	movs	r0, #1
 80050c6:	e7fc      	b.n	80050c2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080050c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	4605      	mov	r5, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050d8:	d129      	bne.n	800512e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	f012 0f10 	tst.w	r2, #16
 80050e0:	d115      	bne.n	800510e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e2:	f7ff f881 	bl	80041e8 <HAL_GetTick>
 80050e6:	1b80      	subs	r0, r0, r6
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d801      	bhi.n	80050f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	d1ef      	bne.n	80050d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050f4:	2220      	movs	r2, #32
 80050f6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fa:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050fe:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005100:	f042 0220 	orr.w	r2, r2, #32
 8005104:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005106:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800510a:	2001      	movs	r0, #1
}
 800510c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800510e:	f06f 0210 	mvn.w	r2, #16
 8005112:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005114:	2300      	movs	r3, #0
 8005116:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005118:	2220      	movs	r2, #32
 800511a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800511e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005122:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005124:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005126:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800512a:	2001      	movs	r0, #1
 800512c:	e7ee      	b.n	800510c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800512e:	2000      	movs	r0, #0
 8005130:	e7ec      	b.n	800510c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08005134 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005134:	2800      	cmp	r0, #0
 8005136:	f000 80c8 	beq.w	80052ca <HAL_I2C_Init+0x196>
{
 800513a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800513e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005142:	2b00      	cmp	r3, #0
 8005144:	d075      	beq.n	8005232 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005146:	2324      	movs	r3, #36	; 0x24
 8005148:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	6813      	ldr	r3, [r2, #0]
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800515e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005160:	6822      	ldr	r2, [r4, #0]
 8005162:	6813      	ldr	r3, [r2, #0]
 8005164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005168:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800516a:	f000 fddb 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800516e:	6862      	ldr	r2, [r4, #4]
 8005170:	4b58      	ldr	r3, [pc, #352]	; (80052d4 <HAL_I2C_Init+0x1a0>)
 8005172:	429a      	cmp	r2, r3
 8005174:	d862      	bhi.n	800523c <HAL_I2C_Init+0x108>
 8005176:	4b58      	ldr	r3, [pc, #352]	; (80052d8 <HAL_I2C_Init+0x1a4>)
 8005178:	4298      	cmp	r0, r3
 800517a:	bf8c      	ite	hi
 800517c:	2300      	movhi	r3, #0
 800517e:	2301      	movls	r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	f040 80a4 	bne.w	80052ce <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 8005186:	4b55      	ldr	r3, [pc, #340]	; (80052dc <HAL_I2C_Init+0x1a8>)
 8005188:	fba3 2300 	umull	r2, r3, r3, r0
 800518c:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800518e:	6821      	ldr	r1, [r4, #0]
 8005190:	684a      	ldr	r2, [r1, #4]
 8005192:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005196:	431a      	orrs	r2, r3
 8005198:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800519a:	6825      	ldr	r5, [r4, #0]
 800519c:	6a2a      	ldr	r2, [r5, #32]
 800519e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80051a2:	6866      	ldr	r6, [r4, #4]
 80051a4:	494b      	ldr	r1, [pc, #300]	; (80052d4 <HAL_I2C_Init+0x1a0>)
 80051a6:	428e      	cmp	r6, r1
 80051a8:	d84e      	bhi.n	8005248 <HAL_I2C_Init+0x114>
 80051aa:	3301      	adds	r3, #1
 80051ac:	4313      	orrs	r3, r2
 80051ae:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051b0:	6825      	ldr	r5, [r4, #0]
 80051b2:	69e9      	ldr	r1, [r5, #28]
 80051b4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80051b8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80051bc:	6863      	ldr	r3, [r4, #4]
 80051be:	4a45      	ldr	r2, [pc, #276]	; (80052d4 <HAL_I2C_Init+0x1a0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d84b      	bhi.n	800525c <HAL_I2C_Init+0x128>
 80051c4:	3801      	subs	r0, #1
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051cc:	3301      	adds	r3, #1
 80051ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	bf38      	it	cc
 80051d6:	2304      	movcc	r3, #4
 80051d8:	430b      	orrs	r3, r1
 80051da:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051dc:	6821      	ldr	r1, [r4, #0]
 80051de:	680b      	ldr	r3, [r1, #0]
 80051e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80051e4:	69e2      	ldr	r2, [r4, #28]
 80051e6:	6a20      	ldr	r0, [r4, #32]
 80051e8:	4302      	orrs	r2, r0
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051ee:	6821      	ldr	r1, [r4, #0]
 80051f0:	688b      	ldr	r3, [r1, #8]
 80051f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051fa:	6922      	ldr	r2, [r4, #16]
 80051fc:	68e0      	ldr	r0, [r4, #12]
 80051fe:	4302      	orrs	r2, r0
 8005200:	4313      	orrs	r3, r2
 8005202:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	68cb      	ldr	r3, [r1, #12]
 8005208:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800520c:	6962      	ldr	r2, [r4, #20]
 800520e:	69a0      	ldr	r0, [r4, #24]
 8005210:	4302      	orrs	r2, r0
 8005212:	4313      	orrs	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005216:	6822      	ldr	r2, [r4, #0]
 8005218:	6813      	ldr	r3, [r2, #0]
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005220:	2000      	movs	r0, #0
 8005222:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005224:	2320      	movs	r3, #32
 8005226:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800522a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8005230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005232:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005236:	f7fe f8eb 	bl	8003410 <HAL_I2C_MspInit>
 800523a:	e784      	b.n	8005146 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800523c:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <HAL_I2C_Init+0x1ac>)
 800523e:	4298      	cmp	r0, r3
 8005240:	bf8c      	ite	hi
 8005242:	2300      	movhi	r3, #0
 8005244:	2301      	movls	r3, #1
 8005246:	e79b      	b.n	8005180 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005248:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	4924      	ldr	r1, [pc, #144]	; (80052e4 <HAL_I2C_Init+0x1b0>)
 8005252:	fba1 1303 	umull	r1, r3, r1, r3
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	3301      	adds	r3, #1
 800525a:	e7a7      	b.n	80051ac <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800525c:	68a2      	ldr	r2, [r4, #8]
 800525e:	b9ba      	cbnz	r2, 8005290 <HAL_I2C_Init+0x15c>
 8005260:	1e46      	subs	r6, r0, #1
 8005262:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8005266:	fbb6 f6f7 	udiv	r6, r6, r7
 800526a:	3601      	adds	r6, #1
 800526c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8005270:	fab6 f686 	clz	r6, r6
 8005274:	0976      	lsrs	r6, r6, #5
 8005276:	bb36      	cbnz	r6, 80052c6 <HAL_I2C_Init+0x192>
 8005278:	b9c2      	cbnz	r2, 80052ac <HAL_I2C_Init+0x178>
 800527a:	3801      	subs	r0, #1
 800527c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005280:	fbb0 f3f3 	udiv	r3, r0, r3
 8005284:	3301      	adds	r3, #1
 8005286:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800528a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800528e:	e7a3      	b.n	80051d8 <HAL_I2C_Init+0xa4>
 8005290:	1e46      	subs	r6, r0, #1
 8005292:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8005296:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800529a:	fbb6 f6f7 	udiv	r6, r6, r7
 800529e:	3601      	adds	r6, #1
 80052a0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80052a4:	fab6 f686 	clz	r6, r6
 80052a8:	0976      	lsrs	r6, r6, #5
 80052aa:	e7e4      	b.n	8005276 <HAL_I2C_Init+0x142>
 80052ac:	3801      	subs	r0, #1
 80052ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052b6:	fbb0 f2f3 	udiv	r2, r0, r3
 80052ba:	3201      	adds	r2, #1
 80052bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80052c0:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80052c4:	e788      	b.n	80051d8 <HAL_I2C_Init+0xa4>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e786      	b.n	80051d8 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 80052ca:	2001      	movs	r0, #1
}
 80052cc:	4770      	bx	lr
    return HAL_ERROR;
 80052ce:	2001      	movs	r0, #1
 80052d0:	e7ae      	b.n	8005230 <HAL_I2C_Init+0xfc>
 80052d2:	bf00      	nop
 80052d4:	000186a0 	.word	0x000186a0
 80052d8:	001e847f 	.word	0x001e847f
 80052dc:	431bde83 	.word	0x431bde83
 80052e0:	003d08ff 	.word	0x003d08ff
 80052e4:	10624dd3 	.word	0x10624dd3

080052e8 <HAL_I2C_Mem_Write>:
{
 80052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	4604      	mov	r4, r0
 80052f0:	460e      	mov	r6, r1
 80052f2:	4617      	mov	r7, r2
 80052f4:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 80052f6:	f7fe ff77 	bl	80041e8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b20      	cmp	r3, #32
 8005302:	d004      	beq.n	800530e <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
}
 8005306:	4618      	mov	r0, r3
 8005308:	b002      	add	sp, #8
 800530a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800530e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005310:	9000      	str	r0, [sp, #0]
 8005312:	2319      	movs	r3, #25
 8005314:	2201      	movs	r2, #1
 8005316:	494c      	ldr	r1, [pc, #304]	; (8005448 <HAL_I2C_Mem_Write+0x160>)
 8005318:	4620      	mov	r0, r4
 800531a:	f7ff fcd8 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 800531e:	2800      	cmp	r0, #0
 8005320:	f040 808b 	bne.w	800543a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8005324:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005328:	2b01      	cmp	r3, #1
 800532a:	f000 8088 	beq.w	800543e <HAL_I2C_Mem_Write+0x156>
 800532e:	2301      	movs	r3, #1
 8005330:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	f012 0f01 	tst.w	r2, #1
 800533c:	d103      	bne.n	8005346 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	6813      	ldr	r3, [r2, #0]
 800534a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800534e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005350:	2321      	movs	r3, #33	; 0x21
 8005352:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005356:	2340      	movs	r3, #64	; 0x40
 8005358:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535c:	2300      	movs	r3, #0
 800535e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005360:	9b08      	ldr	r3, [sp, #32]
 8005362:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005364:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8005368:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800536a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800536c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800536e:	4b37      	ldr	r3, [pc, #220]	; (800544c <HAL_I2C_Mem_Write+0x164>)
 8005370:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005372:	9501      	str	r5, [sp, #4]
 8005374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4643      	mov	r3, r8
 800537a:	463a      	mov	r2, r7
 800537c:	4631      	mov	r1, r6
 800537e:	4620      	mov	r0, r4
 8005380:	f7ff fd5a 	bl	8004e38 <I2C_RequestMemoryWrite>
 8005384:	2800      	cmp	r0, #0
 8005386:	d15c      	bne.n	8005442 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8005388:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d034      	beq.n	80053f8 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538e:	462a      	mov	r2, r5
 8005390:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005392:	4620      	mov	r0, r4
 8005394:	f7ff fd25 	bl	8004de2 <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	bb10      	cbnz	r0, 80053e0 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800539a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80053a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053a4:	1c4b      	adds	r3, r1, #1
 80053a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80053a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80053b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80053b2:	3a01      	subs	r2, #1
 80053b4:	b292      	uxth	r2, r2
 80053b6:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	6950      	ldr	r0, [r2, #20]
 80053bc:	f010 0f04 	tst.w	r0, #4
 80053c0:	d0e2      	beq.n	8005388 <HAL_I2C_Mem_Write+0xa0>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0e0      	beq.n	8005388 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c6:	784b      	ldrb	r3, [r1, #1]
 80053c8:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80053ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053cc:	3301      	adds	r3, #1
 80053ce:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80053d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053d2:	3b01      	subs	r3, #1
 80053d4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80053d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80053de:	e7d3      	b.n	8005388 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d001      	beq.n	80053ea <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e78d      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ea:	6822      	ldr	r2, [r4, #0]
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f2:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e786      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f8:	462a      	mov	r2, r5
 80053fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80053fc:	4620      	mov	r0, r4
 80053fe:	f7ff fe39 	bl	8005074 <I2C_WaitOnBTFFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	b158      	cbz	r0, 800541e <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005408:	2b04      	cmp	r3, #4
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e77a      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	6822      	ldr	r2, [r4, #0]
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005418:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e773      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	6821      	ldr	r1, [r4, #0]
 8005420:	680a      	ldr	r2, [r1, #0]
 8005422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005426:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005428:	2220      	movs	r2, #32
 800542a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800542e:	2200      	movs	r2, #0
 8005430:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005434:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8005438:	e765      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
 800543c:	e763      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 800543e:	2302      	movs	r3, #2
 8005440:	e761      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e75f      	b.n	8005306 <HAL_I2C_Mem_Write+0x1e>
 8005446:	bf00      	nop
 8005448:	00100002 	.word	0x00100002
 800544c:	ffff0000 	.word	0xffff0000

08005450 <HAL_I2C_Mem_Read>:
{
 8005450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	4604      	mov	r4, r0
 8005458:	460e      	mov	r6, r1
 800545a:	4617      	mov	r7, r2
 800545c:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 800545e:	f7fe fec3 	bl	80041e8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005462:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b20      	cmp	r3, #32
 800546a:	d004      	beq.n	8005476 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 800546c:	2602      	movs	r6, #2
}
 800546e:	4630      	mov	r0, r6
 8005470:	b006      	add	sp, #24
 8005472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005476:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005478:	9000      	str	r0, [sp, #0]
 800547a:	2319      	movs	r3, #25
 800547c:	2201      	movs	r2, #1
 800547e:	499e      	ldr	r1, [pc, #632]	; (80056f8 <HAL_I2C_Mem_Read+0x2a8>)
 8005480:	4620      	mov	r0, r4
 8005482:	f7ff fc24 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 8005486:	2800      	cmp	r0, #0
 8005488:	f040 8134 	bne.w	80056f4 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 800548c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	f000 8137 	beq.w	8005704 <HAL_I2C_Mem_Read+0x2b4>
 8005496:	2301      	movs	r3, #1
 8005498:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	f012 0f01 	tst.w	r2, #1
 80054a4:	d103      	bne.n	80054ae <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054b6:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054b8:	2322      	movs	r3, #34	; 0x22
 80054ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054be:	2340      	movs	r3, #64	; 0x40
 80054c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80054c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ca:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054cc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80054d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054d4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d6:	4b89      	ldr	r3, [pc, #548]	; (80056fc <HAL_I2C_Mem_Read+0x2ac>)
 80054d8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054da:	9501      	str	r5, [sp, #4]
 80054dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	4643      	mov	r3, r8
 80054e2:	463a      	mov	r2, r7
 80054e4:	4631      	mov	r1, r6
 80054e6:	4620      	mov	r0, r4
 80054e8:	f7ff fd14 	bl	8004f14 <I2C_RequestMemoryRead>
 80054ec:	4606      	mov	r6, r0
 80054ee:	2800      	cmp	r0, #0
 80054f0:	f040 810a 	bne.w	8005708 <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 80054f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054f6:	b95b      	cbnz	r3, 8005510 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054f8:	9302      	str	r3, [sp, #8]
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	695a      	ldr	r2, [r3, #20]
 80054fe:	9202      	str	r2, [sp, #8]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	9202      	str	r2, [sp, #8]
 8005504:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e072      	b.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 8005510:	2b01      	cmp	r3, #1
 8005512:	d00a      	beq.n	800552a <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8005514:	2b02      	cmp	r3, #2
 8005516:	d01a      	beq.n	800554e <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005518:	2300      	movs	r3, #0
 800551a:	9305      	str	r3, [sp, #20]
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	695a      	ldr	r2, [r3, #20]
 8005520:	9205      	str	r2, [sp, #20]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	9305      	str	r3, [sp, #20]
 8005526:	9b05      	ldr	r3, [sp, #20]
 8005528:	e065      	b.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	6813      	ldr	r3, [r2, #0]
 800552e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005532:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005534:	2300      	movs	r3, #0
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	9203      	str	r2, [sp, #12]
 800553e:	699a      	ldr	r2, [r3, #24]
 8005540:	9203      	str	r2, [sp, #12]
 8005542:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	e053      	b.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005556:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005558:	6822      	ldr	r2, [r4, #0]
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005560:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005562:	2300      	movs	r3, #0
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	9204      	str	r2, [sp, #16]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	9b04      	ldr	r3, [sp, #16]
 8005572:	e040      	b.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005574:	462a      	mov	r2, r5
 8005576:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fda5 	bl	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800557e:	2800      	cmp	r0, #0
 8005580:	f040 80c4 	bne.w	800570c <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800558a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800558c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800558e:	3301      	adds	r3, #1
 8005590:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005592:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005594:	3b01      	subs	r3, #1
 8005596:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005598:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800559a:	3b01      	subs	r3, #1
 800559c:	b29b      	uxth	r3, r3
 800559e:	8563      	strh	r3, [r4, #42]	; 0x2a
 80055a0:	e029      	b.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055a2:	9500      	str	r5, [sp, #0]
 80055a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055a6:	2200      	movs	r2, #0
 80055a8:	4955      	ldr	r1, [pc, #340]	; (8005700 <HAL_I2C_Mem_Read+0x2b0>)
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff fb8f 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	f040 80ad 	bne.w	8005710 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b6:	6822      	ldr	r2, [r4, #0]
 80055b8:	6813      	ldr	r3, [r2, #0]
 80055ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055be:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055c6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80055c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055ca:	1c53      	adds	r3, r2, #1
 80055cc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80055ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055d0:	3b01      	subs	r3, #1
 80055d2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80055d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80055e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055e4:	3301      	adds	r3, #1
 80055e6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80055e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055ea:	3b01      	subs	r3, #1
 80055ec:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80055ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80055f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d072      	beq.n	80056e2 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d849      	bhi.n	8005694 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 8005600:	2b01      	cmp	r3, #1
 8005602:	d0b7      	beq.n	8005574 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8005604:	2b02      	cmp	r3, #2
 8005606:	d0cc      	beq.n	80055a2 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005608:	9500      	str	r5, [sp, #0]
 800560a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	493c      	ldr	r1, [pc, #240]	; (8005700 <HAL_I2C_Mem_Read+0x2b0>)
 8005610:	4620      	mov	r0, r4
 8005612:	f7ff fb5c 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 8005616:	2800      	cmp	r0, #0
 8005618:	d17c      	bne.n	8005714 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	6813      	ldr	r3, [r2, #0]
 800561e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005622:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800562a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800562c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800562e:	3301      	adds	r3, #1
 8005630:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005632:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005634:	3b01      	subs	r3, #1
 8005636:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005638:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800563a:	3b01      	subs	r3, #1
 800563c:	b29b      	uxth	r3, r3
 800563e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005640:	9500      	str	r5, [sp, #0]
 8005642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005644:	2200      	movs	r2, #0
 8005646:	492e      	ldr	r1, [pc, #184]	; (8005700 <HAL_I2C_Mem_Read+0x2b0>)
 8005648:	4620      	mov	r0, r4
 800564a:	f7ff fb40 	bl	8004cce <I2C_WaitOnFlagUntilTimeout>
 800564e:	2800      	cmp	r0, #0
 8005650:	d162      	bne.n	8005718 <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005652:	6822      	ldr	r2, [r4, #0]
 8005654:	6813      	ldr	r3, [r2, #0]
 8005656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800565a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005662:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005664:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005666:	1c53      	adds	r3, r2, #1
 8005668:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800566a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800566c:	3b01      	subs	r3, #1
 800566e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005670:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005672:	3b01      	subs	r3, #1
 8005674:	b29b      	uxth	r3, r3
 8005676:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800567e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005680:	3301      	adds	r3, #1
 8005682:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005684:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005686:	3b01      	subs	r3, #1
 8005688:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800568a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800568c:	3b01      	subs	r3, #1
 800568e:	b29b      	uxth	r3, r3
 8005690:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005692:	e7b0      	b.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005694:	462a      	mov	r2, r5
 8005696:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005698:	4620      	mov	r0, r4
 800569a:	f7ff fd15 	bl	80050c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d13c      	bne.n	800571c <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80056aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80056ac:	1c53      	adds	r3, r2, #1
 80056ae:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80056b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80056b2:	3b01      	subs	r3, #1
 80056b4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80056b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	6959      	ldr	r1, [r3, #20]
 80056c2:	f011 0f04 	tst.w	r1, #4
 80056c6:	d096      	beq.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80056cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ce:	3301      	adds	r3, #1
 80056d0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80056d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80056d4:	3b01      	subs	r3, #1
 80056d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80056d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8563      	strh	r3, [r4, #42]	; 0x2a
 80056e0:	e789      	b.n	80055f6 <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	2320      	movs	r3, #32
 80056e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80056ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80056f2:	e6bc      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 80056f4:	2602      	movs	r6, #2
 80056f6:	e6ba      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
 80056f8:	00100002 	.word	0x00100002
 80056fc:	ffff0000 	.word	0xffff0000
 8005700:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8005704:	2602      	movs	r6, #2
 8005706:	e6b2      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 8005708:	2601      	movs	r6, #1
 800570a:	e6b0      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 800570c:	2601      	movs	r6, #1
 800570e:	e6ae      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8005710:	2601      	movs	r6, #1
 8005712:	e6ac      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8005714:	2601      	movs	r6, #1
 8005716:	e6aa      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8005718:	2601      	movs	r6, #1
 800571a:	e6a8      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 800571c:	2601      	movs	r6, #1
 800571e:	e6a6      	b.n	800546e <HAL_I2C_Mem_Read+0x1e>

08005720 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005720:	2800      	cmp	r0, #0
 8005722:	f000 81e0 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x3c6>
{
 8005726:	b570      	push	{r4, r5, r6, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800572c:	6803      	ldr	r3, [r0, #0]
 800572e:	f013 0f01 	tst.w	r3, #1
 8005732:	d03b      	beq.n	80057ac <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005734:	4ba5      	ldr	r3, [pc, #660]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	2b04      	cmp	r3, #4
 800573e:	d02c      	beq.n	800579a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005740:	4ba2      	ldr	r3, [pc, #648]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005748:	2b08      	cmp	r3, #8
 800574a:	d021      	beq.n	8005790 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005752:	d04f      	beq.n	80057f4 <HAL_RCC_OscConfig+0xd4>
 8005754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005758:	d052      	beq.n	8005800 <HAL_RCC_OscConfig+0xe0>
 800575a:	4b9c      	ldr	r3, [pc, #624]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800576a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800576c:	6863      	ldr	r3, [r4, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d050      	beq.n	8005814 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fe fd39 	bl	80041e8 <HAL_GetTick>
 8005776:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005778:	4b94      	ldr	r3, [pc, #592]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005780:	d114      	bne.n	80057ac <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005782:	f7fe fd31 	bl	80041e8 <HAL_GetTick>
 8005786:	1b40      	subs	r0, r0, r5
 8005788:	2864      	cmp	r0, #100	; 0x64
 800578a:	d9f5      	bls.n	8005778 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 800578c:	2003      	movs	r0, #3
 800578e:	e1af      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005790:	4b8e      	ldr	r3, [pc, #568]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005798:	d0d8      	beq.n	800574c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800579a:	4b8c      	ldr	r3, [pc, #560]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80057a2:	d003      	beq.n	80057ac <HAL_RCC_OscConfig+0x8c>
 80057a4:	6863      	ldr	r3, [r4, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 819f 	beq.w	8005aea <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f013 0f02 	tst.w	r3, #2
 80057b2:	d055      	beq.n	8005860 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057b4:	4b85      	ldr	r3, [pc, #532]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f013 0f0c 	tst.w	r3, #12
 80057bc:	d03e      	beq.n	800583c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057be:	4b83      	ldr	r3, [pc, #524]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d033      	beq.n	8005832 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057ca:	68e3      	ldr	r3, [r4, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d068      	beq.n	80058a2 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057d0:	4b7f      	ldr	r3, [pc, #508]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fe fd07 	bl	80041e8 <HAL_GetTick>
 80057da:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	4b7b      	ldr	r3, [pc, #492]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f013 0f02 	tst.w	r3, #2
 80057e4:	d154      	bne.n	8005890 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e6:	f7fe fcff 	bl	80041e8 <HAL_GetTick>
 80057ea:	1b40      	subs	r0, r0, r5
 80057ec:	2802      	cmp	r0, #2
 80057ee:	d9f5      	bls.n	80057dc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80057f0:	2003      	movs	r0, #3
 80057f2:	e17d      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f4:	4a75      	ldr	r2, [pc, #468]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80057f6:	6813      	ldr	r3, [r2, #0]
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e7b5      	b.n	800576c <HAL_RCC_OscConfig+0x4c>
 8005800:	4b72      	ldr	r3, [pc, #456]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e7ab      	b.n	800576c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005814:	f7fe fce8 	bl	80041e8 <HAL_GetTick>
 8005818:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800581a:	4b6c      	ldr	r3, [pc, #432]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005822:	d0c3      	beq.n	80057ac <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005824:	f7fe fce0 	bl	80041e8 <HAL_GetTick>
 8005828:	1b40      	subs	r0, r0, r5
 800582a:	2864      	cmp	r0, #100	; 0x64
 800582c:	d9f5      	bls.n	800581a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800582e:	2003      	movs	r0, #3
 8005830:	e15e      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005832:	4b66      	ldr	r3, [pc, #408]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800583a:	d1c6      	bne.n	80057ca <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583c:	4b63      	ldr	r3, [pc, #396]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f013 0f02 	tst.w	r3, #2
 8005844:	d004      	beq.n	8005850 <HAL_RCC_OscConfig+0x130>
 8005846:	68e3      	ldr	r3, [r4, #12]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d001      	beq.n	8005850 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800584c:	2001      	movs	r0, #1
 800584e:	e14f      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005850:	4a5e      	ldr	r2, [pc, #376]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005858:	6921      	ldr	r1, [r4, #16]
 800585a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800585e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	f013 0f08 	tst.w	r3, #8
 8005866:	d040      	beq.n	80058ea <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005868:	6963      	ldr	r3, [r4, #20]
 800586a:	b363      	cbz	r3, 80058c6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800586c:	4b59      	ldr	r3, [pc, #356]	; (80059d4 <HAL_RCC_OscConfig+0x2b4>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005872:	f7fe fcb9 	bl	80041e8 <HAL_GetTick>
 8005876:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005878:	4b54      	ldr	r3, [pc, #336]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800587a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587c:	f013 0f02 	tst.w	r3, #2
 8005880:	d133      	bne.n	80058ea <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005882:	f7fe fcb1 	bl	80041e8 <HAL_GetTick>
 8005886:	1b40      	subs	r0, r0, r5
 8005888:	2802      	cmp	r0, #2
 800588a:	d9f5      	bls.n	8005878 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800588c:	2003      	movs	r0, #3
 800588e:	e12f      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005890:	4a4e      	ldr	r2, [pc, #312]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005898:	6921      	ldr	r1, [r4, #16]
 800589a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	e7de      	b.n	8005860 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80058a2:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <HAL_RCC_OscConfig+0x2b0>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80058a8:	f7fe fc9e 	bl	80041e8 <HAL_GetTick>
 80058ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ae:	4b47      	ldr	r3, [pc, #284]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f013 0f02 	tst.w	r3, #2
 80058b6:	d0d3      	beq.n	8005860 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058b8:	f7fe fc96 	bl	80041e8 <HAL_GetTick>
 80058bc:	1b40      	subs	r0, r0, r5
 80058be:	2802      	cmp	r0, #2
 80058c0:	d9f5      	bls.n	80058ae <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80058c2:	2003      	movs	r0, #3
 80058c4:	e114      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c6:	4b43      	ldr	r3, [pc, #268]	; (80059d4 <HAL_RCC_OscConfig+0x2b4>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058cc:	f7fe fc8c 	bl	80041e8 <HAL_GetTick>
 80058d0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d2:	4b3e      	ldr	r3, [pc, #248]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d6:	f013 0f02 	tst.w	r3, #2
 80058da:	d006      	beq.n	80058ea <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058dc:	f7fe fc84 	bl	80041e8 <HAL_GetTick>
 80058e0:	1b40      	subs	r0, r0, r5
 80058e2:	2802      	cmp	r0, #2
 80058e4:	d9f5      	bls.n	80058d2 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80058e6:	2003      	movs	r0, #3
 80058e8:	e102      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	f013 0f04 	tst.w	r3, #4
 80058f0:	d075      	beq.n	80059de <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f2:	4b36      	ldr	r3, [pc, #216]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80058fa:	d131      	bne.n	8005960 <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fc:	2300      	movs	r3, #0
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	4b32      	ldr	r3, [pc, #200]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 8005902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005904:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005914:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005916:	4b30      	ldr	r3, [pc, #192]	; (80059d8 <HAL_RCC_OscConfig+0x2b8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800591e:	d021      	beq.n	8005964 <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005920:	68a3      	ldr	r3, [r4, #8]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d032      	beq.n	800598c <HAL_RCC_OscConfig+0x26c>
 8005926:	2b05      	cmp	r3, #5
 8005928:	d036      	beq.n	8005998 <HAL_RCC_OscConfig+0x278>
 800592a:	4b28      	ldr	r3, [pc, #160]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800592c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800592e:	f022 0201 	bic.w	r2, r2, #1
 8005932:	671a      	str	r2, [r3, #112]	; 0x70
 8005934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005936:	f022 0204 	bic.w	r2, r2, #4
 800593a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800593c:	68a3      	ldr	r3, [r4, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d034      	beq.n	80059ac <HAL_RCC_OscConfig+0x28c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005942:	f7fe fc51 	bl	80041e8 <HAL_GetTick>
 8005946:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005948:	4b20      	ldr	r3, [pc, #128]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800594a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594c:	f013 0f02 	tst.w	r3, #2
 8005950:	d144      	bne.n	80059dc <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005952:	f7fe fc49 	bl	80041e8 <HAL_GetTick>
 8005956:	1b80      	subs	r0, r0, r6
 8005958:	2864      	cmp	r0, #100	; 0x64
 800595a:	d9f5      	bls.n	8005948 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 800595c:	2003      	movs	r0, #3
 800595e:	e0c7      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8005960:	2500      	movs	r5, #0
 8005962:	e7d8      	b.n	8005916 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005964:	4a1c      	ldr	r2, [pc, #112]	; (80059d8 <HAL_RCC_OscConfig+0x2b8>)
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800596e:	f7fe fc3b 	bl	80041e8 <HAL_GetTick>
 8005972:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005974:	4b18      	ldr	r3, [pc, #96]	; (80059d8 <HAL_RCC_OscConfig+0x2b8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f413 7f80 	tst.w	r3, #256	; 0x100
 800597c:	d1d0      	bne.n	8005920 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597e:	f7fe fc33 	bl	80041e8 <HAL_GetTick>
 8005982:	1b80      	subs	r0, r0, r6
 8005984:	2802      	cmp	r0, #2
 8005986:	d9f5      	bls.n	8005974 <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 8005988:	2003      	movs	r0, #3
 800598a:	e0b1      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598c:	4a0f      	ldr	r2, [pc, #60]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800598e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
 8005996:	e7d1      	b.n	800593c <HAL_RCC_OscConfig+0x21c>
 8005998:	4b0c      	ldr	r3, [pc, #48]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 800599a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800599c:	f042 0204 	orr.w	r2, r2, #4
 80059a0:	671a      	str	r2, [r3, #112]	; 0x70
 80059a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	671a      	str	r2, [r3, #112]	; 0x70
 80059aa:	e7c7      	b.n	800593c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ac:	f7fe fc1c 	bl	80041e8 <HAL_GetTick>
 80059b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b6:	f013 0f02 	tst.w	r3, #2
 80059ba:	d00f      	beq.n	80059dc <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059bc:	f7fe fc14 	bl	80041e8 <HAL_GetTick>
 80059c0:	1b80      	subs	r0, r0, r6
 80059c2:	2864      	cmp	r0, #100	; 0x64
 80059c4:	d9f5      	bls.n	80059b2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80059c6:	2003      	movs	r0, #3
 80059c8:	e092      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800
 80059d0:	42470000 	.word	0x42470000
 80059d4:	42470e80 	.word	0x42470e80
 80059d8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059dc:	b9ed      	cbnz	r5, 8005a1a <HAL_RCC_OscConfig+0x2fa>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059de:	69a3      	ldr	r3, [r4, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8084 	beq.w	8005aee <HAL_RCC_OscConfig+0x3ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059e6:	4a45      	ldr	r2, [pc, #276]	; (8005afc <HAL_RCC_OscConfig+0x3dc>)
 80059e8:	6892      	ldr	r2, [r2, #8]
 80059ea:	f002 020c 	and.w	r2, r2, #12
 80059ee:	2a08      	cmp	r2, #8
 80059f0:	d051      	beq.n	8005a96 <HAL_RCC_OscConfig+0x376>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d017      	beq.n	8005a26 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f6:	4b42      	ldr	r3, [pc, #264]	; (8005b00 <HAL_RCC_OscConfig+0x3e0>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fc:	f7fe fbf4 	bl	80041e8 <HAL_GetTick>
 8005a00:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a02:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <HAL_RCC_OscConfig+0x3dc>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a0a:	d042      	beq.n	8005a92 <HAL_RCC_OscConfig+0x372>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a0c:	f7fe fbec 	bl	80041e8 <HAL_GetTick>
 8005a10:	1b00      	subs	r0, r0, r4
 8005a12:	2802      	cmp	r0, #2
 8005a14:	d9f5      	bls.n	8005a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005a16:	2003      	movs	r0, #3
 8005a18:	e06a      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a1a:	4a38      	ldr	r2, [pc, #224]	; (8005afc <HAL_RCC_OscConfig+0x3dc>)
 8005a1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a22:	6413      	str	r3, [r2, #64]	; 0x40
 8005a24:	e7db      	b.n	80059de <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x3e0>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a2c:	f7fe fbdc 	bl	80041e8 <HAL_GetTick>
 8005a30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	4b32      	ldr	r3, [pc, #200]	; (8005afc <HAL_RCC_OscConfig+0x3dc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a3a:	d006      	beq.n	8005a4a <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a3c:	f7fe fbd4 	bl	80041e8 <HAL_GetTick>
 8005a40:	1b40      	subs	r0, r0, r5
 8005a42:	2802      	cmp	r0, #2
 8005a44:	d9f5      	bls.n	8005a32 <HAL_RCC_OscConfig+0x312>
            return HAL_TIMEOUT;
 8005a46:	2003      	movs	r0, #3
 8005a48:	e052      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a4a:	69e3      	ldr	r3, [r4, #28]
 8005a4c:	6a22      	ldr	r2, [r4, #32]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a52:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005a56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a58:	0852      	lsrs	r2, r2, #1
 8005a5a:	3a01      	subs	r2, #1
 8005a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005a66:	4a25      	ldr	r2, [pc, #148]	; (8005afc <HAL_RCC_OscConfig+0x3dc>)
 8005a68:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005a6a:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <HAL_RCC_OscConfig+0x3e0>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a70:	f7fe fbba 	bl	80041e8 <HAL_GetTick>
 8005a74:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <HAL_RCC_OscConfig+0x3dc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a7e:	d106      	bne.n	8005a8e <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a80:	f7fe fbb2 	bl	80041e8 <HAL_GetTick>
 8005a84:	1b00      	subs	r0, r0, r4
 8005a86:	2802      	cmp	r0, #2
 8005a88:	d9f5      	bls.n	8005a76 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8005a8a:	2003      	movs	r0, #3
 8005a8c:	e030      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005a8e:	2000      	movs	r0, #0
 8005a90:	e02e      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
 8005a92:	2000      	movs	r0, #0
 8005a94:	e02c      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d02c      	beq.n	8005af4 <HAL_RCC_OscConfig+0x3d4>
        pll_config = RCC->PLLCFGR;
 8005a9a:	4b18      	ldr	r3, [pc, #96]	; (8005afc <HAL_RCC_OscConfig+0x3dc>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8005aa2:	69e2      	ldr	r2, [r4, #28]
 8005aa4:	4291      	cmp	r1, r2
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_OscConfig+0x38c>
          return HAL_ERROR;
 8005aa8:	2001      	movs	r0, #1
 8005aaa:	e021      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ab0:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab2:	428a      	cmp	r2, r1
 8005ab4:	d001      	beq.n	8005aba <HAL_RCC_OscConfig+0x39a>
          return HAL_ERROR;
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	e01a      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005aba:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005abc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005ac0:	401a      	ands	r2, r3
 8005ac2:	428a      	cmp	r2, r1
 8005ac4:	d001      	beq.n	8005aca <HAL_RCC_OscConfig+0x3aa>
          return HAL_ERROR;
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	e012      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ad0:	428a      	cmp	r2, r1
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x3b8>
          return HAL_ERROR;
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005ad8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005adc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	e004      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
    return HAL_ERROR;
 8005ae6:	2001      	movs	r0, #1
}
 8005ae8:	4770      	bx	lr
        return HAL_ERROR;
 8005aea:	2001      	movs	r0, #1
 8005aec:	e000      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8005aee:	2000      	movs	r0, #0
}
 8005af0:	b002      	add	sp, #8
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005af4:	2001      	movs	r0, #1
 8005af6:	e7fb      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
  return HAL_OK;
 8005af8:	2000      	movs	r0, #0
 8005afa:	e7f9      	b.n	8005af0 <HAL_RCC_OscConfig+0x3d0>
 8005afc:	40023800 	.word	0x40023800
 8005b00:	42470060 	.word	0x42470060

08005b04 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005b04:	4b01      	ldr	r3, [pc, #4]	; (8005b0c <HAL_RCC_EnableCSS+0x8>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
}
 8005b0a:	4770      	bx	lr
 8005b0c:	4247004c 	.word	0x4247004c

08005b10 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b10:	4b26      	ldr	r3, [pc, #152]	; (8005bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 030c 	and.w	r3, r3, #12
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d044      	beq.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x96>
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d001      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b20:	4823      	ldr	r0, [pc, #140]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005b22:	4770      	bx	lr
{
 8005b24:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b28:	4b20      	ldr	r3, [pc, #128]	; (8005bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005b36:	d013      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b38:	4b1c      	ldr	r3, [pc, #112]	; (8005bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b3a:	6859      	ldr	r1, [r3, #4]
 8005b3c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005b40:	2300      	movs	r3, #0
 8005b42:	481c      	ldr	r0, [pc, #112]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b44:	fba1 0100 	umull	r0, r1, r1, r0
 8005b48:	f7fa ffd8 	bl	8000afc <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b4c:	4b17      	ldr	r3, [pc, #92]	; (8005bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005b54:	3301      	adds	r3, #1
 8005b56:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005b58:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005b5c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b60:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005b68:	461e      	mov	r6, r3
 8005b6a:	2700      	movs	r7, #0
 8005b6c:	015c      	lsls	r4, r3, #5
 8005b6e:	2500      	movs	r5, #0
 8005b70:	1ae4      	subs	r4, r4, r3
 8005b72:	eb65 0507 	sbc.w	r5, r5, r7
 8005b76:	01a9      	lsls	r1, r5, #6
 8005b78:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8005b7c:	01a0      	lsls	r0, r4, #6
 8005b7e:	1b00      	subs	r0, r0, r4
 8005b80:	eb61 0105 	sbc.w	r1, r1, r5
 8005b84:	00cb      	lsls	r3, r1, #3
 8005b86:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005b8a:	00c4      	lsls	r4, r0, #3
 8005b8c:	19a0      	adds	r0, r4, r6
 8005b8e:	eb43 0107 	adc.w	r1, r3, r7
 8005b92:	028b      	lsls	r3, r1, #10
 8005b94:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8005b98:	0284      	lsls	r4, r0, #10
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f7fa ffac 	bl	8000afc <__aeabi_uldivmod>
 8005ba4:	e7d2      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8005ba6:	4803      	ldr	r0, [pc, #12]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	00f42400 	.word	0x00f42400
 8005bb4:	017d7840 	.word	0x017d7840

08005bb8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f000 809e 	beq.w	8005cfa <HAL_RCC_ClockConfig+0x142>
{
 8005bbe:	b570      	push	{r4, r5, r6, lr}
 8005bc0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc2:	4b50      	ldr	r3, [pc, #320]	; (8005d04 <HAL_RCC_ClockConfig+0x14c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	428b      	cmp	r3, r1
 8005bcc:	d209      	bcs.n	8005be2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	b2cb      	uxtb	r3, r1
 8005bd0:	4a4c      	ldr	r2, [pc, #304]	; (8005d04 <HAL_RCC_ClockConfig+0x14c>)
 8005bd2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd4:	6813      	ldr	r3, [r2, #0]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	428b      	cmp	r3, r1
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8005bde:	2001      	movs	r0, #1
}
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	f013 0f02 	tst.w	r3, #2
 8005be8:	d017      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bea:	f013 0f04 	tst.w	r3, #4
 8005bee:	d004      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bf0:	4a45      	ldr	r2, [pc, #276]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005bf2:	6893      	ldr	r3, [r2, #8]
 8005bf4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bf8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f013 0f08 	tst.w	r3, #8
 8005c00:	d004      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c02:	4a41      	ldr	r2, [pc, #260]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005c04:	6893      	ldr	r3, [r2, #8]
 8005c06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c0a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c0c:	4a3e      	ldr	r2, [pc, #248]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005c0e:	6893      	ldr	r3, [r2, #8]
 8005c10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c14:	68a0      	ldr	r0, [r4, #8]
 8005c16:	4303      	orrs	r3, r0
 8005c18:	6093      	str	r3, [r2, #8]
 8005c1a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	f013 0f01 	tst.w	r3, #1
 8005c22:	d032      	beq.n	8005c8a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d021      	beq.n	8005c6e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c2a:	1e9a      	subs	r2, r3, #2
 8005c2c:	2a01      	cmp	r2, #1
 8005c2e:	d925      	bls.n	8005c7c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c30:	4a35      	ldr	r2, [pc, #212]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	f012 0f02 	tst.w	r2, #2
 8005c38:	d061      	beq.n	8005cfe <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4933      	ldr	r1, [pc, #204]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005c3c:	688a      	ldr	r2, [r1, #8]
 8005c3e:	f022 0203 	bic.w	r2, r2, #3
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005c46:	f7fe facf 	bl	80041e8 <HAL_GetTick>
 8005c4a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4c:	4b2e      	ldr	r3, [pc, #184]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	6862      	ldr	r2, [r4, #4]
 8005c56:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005c5a:	d016      	beq.n	8005c8a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c5c:	f7fe fac4 	bl	80041e8 <HAL_GetTick>
 8005c60:	1b80      	subs	r0, r0, r6
 8005c62:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c66:	4298      	cmp	r0, r3
 8005c68:	d9f0      	bls.n	8005c4c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8005c6a:	2003      	movs	r0, #3
 8005c6c:	e7b8      	b.n	8005be0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6e:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005c76:	d1e0      	bne.n	8005c3a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005c78:	2001      	movs	r0, #1
 8005c7a:	e7b1      	b.n	8005be0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c7c:	4a22      	ldr	r2, [pc, #136]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005c84:	d1d9      	bne.n	8005c3a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8005c86:	2001      	movs	r0, #1
 8005c88:	e7aa      	b.n	8005be0 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <HAL_RCC_ClockConfig+0x14c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	42ab      	cmp	r3, r5
 8005c94:	d909      	bls.n	8005caa <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	b2ea      	uxtb	r2, r5
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_RCC_ClockConfig+0x14c>)
 8005c9a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	42ab      	cmp	r3, r5
 8005ca4:	d001      	beq.n	8005caa <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	e79a      	b.n	8005be0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	f013 0f04 	tst.w	r3, #4
 8005cb0:	d006      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005cb4:	6893      	ldr	r3, [r2, #8]
 8005cb6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005cba:	68e1      	ldr	r1, [r4, #12]
 8005cbc:	430b      	orrs	r3, r1
 8005cbe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	f013 0f08 	tst.w	r3, #8
 8005cc6:	d007      	beq.n	8005cd8 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cc8:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005cca:	6893      	ldr	r3, [r2, #8]
 8005ccc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005cd0:	6921      	ldr	r1, [r4, #16]
 8005cd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005cd6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cd8:	f7ff ff1a 	bl	8005b10 <HAL_RCC_GetSysClockFreq>
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <HAL_RCC_ClockConfig+0x150>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ce4:	4a09      	ldr	r2, [pc, #36]	; (8005d0c <HAL_RCC_ClockConfig+0x154>)
 8005ce6:	5cd3      	ldrb	r3, [r2, r3]
 8005ce8:	40d8      	lsrs	r0, r3
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_RCC_ClockConfig+0x158>)
 8005cec:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_RCC_ClockConfig+0x15c>)
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f7fd fdf1 	bl	80038d8 <HAL_InitTick>
  return HAL_OK;
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	e772      	b.n	8005be0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005cfa:	2001      	movs	r0, #1
}
 8005cfc:	4770      	bx	lr
        return HAL_ERROR;
 8005cfe:	2001      	movs	r0, #1
 8005d00:	e76e      	b.n	8005be0 <HAL_RCC_ClockConfig+0x28>
 8005d02:	bf00      	nop
 8005d04:	40023c00 	.word	0x40023c00
 8005d08:	40023800 	.word	0x40023800
 8005d0c:	0800a830 	.word	0x0800a830
 8005d10:	20000030 	.word	0x20000030
 8005d14:	20000038 	.word	0x20000038

08005d18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005d18:	4b01      	ldr	r3, [pc, #4]	; (8005d20 <HAL_RCC_GetHCLKFreq+0x8>)
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	20000030 	.word	0x20000030

08005d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d24:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d26:	f7ff fff7 	bl	8005d18 <HAL_RCC_GetHCLKFreq>
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005d32:	4a03      	ldr	r2, [pc, #12]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005d34:	5cd3      	ldrb	r3, [r2, r3]
}
 8005d36:	40d8      	lsrs	r0, r3
 8005d38:	bd08      	pop	{r3, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	0800a840 	.word	0x0800a840

08005d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d44:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d46:	f7ff ffe7 	bl	8005d18 <HAL_RCC_GetHCLKFreq>
 8005d4a:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005d52:	4a03      	ldr	r2, [pc, #12]	; (8005d60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005d54:	5cd3      	ldrb	r3, [r2, r3]
}
 8005d56:	40d8      	lsrs	r0, r3
 8005d58:	bd08      	pop	{r3, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	0800a840 	.word	0x0800a840

08005d64 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d64:	230f      	movs	r3, #15
 8005d66:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_RCC_GetClockConfig+0x34>)
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	f002 0203 	and.w	r2, r2, #3
 8005d70:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005d78:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005d80:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	08db      	lsrs	r3, r3, #3
 8005d86:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005d8a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <HAL_RCC_GetClockConfig+0x38>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	600b      	str	r3, [r1, #0]
}
 8005d96:	4770      	bx	lr
 8005d98:	40023800 	.word	0x40023800
 8005d9c:	40023c00 	.word	0x40023c00

08005da0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005da0:	4770      	bx	lr
	...

08005da4 <HAL_RCC_NMI_IRQHandler>:
{
 8005da4:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dae:	d100      	bne.n	8005db2 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8005db0:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8005db2:	f7ff fff5 	bl	8005da0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005db6:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005db8:	2280      	movs	r2, #128	; 0x80
 8005dba:	701a      	strb	r2, [r3, #0]
}
 8005dbc:	e7f8      	b.n	8005db0 <HAL_RCC_NMI_IRQHandler+0xc>
 8005dbe:	bf00      	nop
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	4002380e 	.word	0x4002380e

08005dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc8:	b530      	push	{r4, r5, lr}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dce:	6803      	ldr	r3, [r0, #0]
 8005dd0:	f013 0f05 	tst.w	r3, #5
 8005dd4:	d10e      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	f013 0f02 	tst.w	r3, #2
 8005ddc:	d136      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	f013 0f08 	tst.w	r3, #8
 8005de4:	f000 8097 	beq.w	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005de8:	7c22      	ldrb	r2, [r4, #16]
 8005dea:	4b4c      	ldr	r3, [pc, #304]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005dec:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005dee:	2000      	movs	r0, #0
}
 8005df0:	b003      	add	sp, #12
 8005df2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8005df4:	4b4a      	ldr	r3, [pc, #296]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005dfa:	f7fe f9f5 	bl	80041e8 <HAL_GetTick>
 8005dfe:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e00:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005e08:	d006      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e0a:	f7fe f9ed 	bl	80041e8 <HAL_GetTick>
 8005e0e:	1b40      	subs	r0, r0, r5
 8005e10:	2802      	cmp	r0, #2
 8005e12:	d9f5      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8005e14:	2003      	movs	r0, #3
 8005e16:	e7eb      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e18:	6862      	ldr	r2, [r4, #4]
 8005e1a:	68a3      	ldr	r3, [r4, #8]
 8005e1c:	071b      	lsls	r3, r3, #28
 8005e1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005e22:	4a40      	ldr	r2, [pc, #256]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005e28:	4b3d      	ldr	r3, [pc, #244]	; (8005f20 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005e2e:	f7fe f9db 	bl	80041e8 <HAL_GetTick>
 8005e32:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e34:	4b3b      	ldr	r3, [pc, #236]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005e3c:	d1cb      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e3e:	f7fe f9d3 	bl	80041e8 <HAL_GetTick>
 8005e42:	1b40      	subs	r0, r0, r5
 8005e44:	2802      	cmp	r0, #2
 8005e46:	d9f5      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8005e48:	2003      	movs	r0, #3
 8005e4a:	e7d1      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	4b34      	ldr	r3, [pc, #208]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005e64:	4a30      	ldr	r2, [pc, #192]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005e6e:	f7fe f9bb 	bl	80041e8 <HAL_GetTick>
 8005e72:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e74:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e7e:	f7fe f9b3 	bl	80041e8 <HAL_GetTick>
 8005e82:	1b40      	subs	r0, r0, r5
 8005e84:	2802      	cmp	r0, #2
 8005e86:	d9f5      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8005e88:	2003      	movs	r0, #3
 8005e8a:	e7b1      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e90:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005e94:	d012      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e96:	68e2      	ldr	r2, [r4, #12]
 8005e98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d00d      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ea4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ea8:	4920      	ldr	r1, [pc, #128]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005eaa:	2001      	movs	r0, #1
 8005eac:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eae:	2000      	movs	r0, #0
 8005eb0:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8005eb2:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb6:	f013 0f01 	tst.w	r3, #1
 8005eba:	d112      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ebc:	68e3      	ldr	r3, [r4, #12]
 8005ebe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005ec2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005ec6:	d01b      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005ec8:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005eca:	6893      	ldr	r3, [r2, #8]
 8005ecc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ed0:	6093      	str	r3, [r2, #8]
 8005ed2:	4914      	ldr	r1, [pc, #80]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005ed4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005ed6:	68e2      	ldr	r2, [r4, #12]
 8005ed8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005edc:	4313      	orrs	r3, r2
 8005ede:	670b      	str	r3, [r1, #112]	; 0x70
 8005ee0:	e77d      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8005ee2:	f7fe f981 	bl	80041e8 <HAL_GetTick>
 8005ee6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eec:	f013 0f02 	tst.w	r3, #2
 8005ef0:	d1e4      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ef2:	f7fe f979 	bl	80041e8 <HAL_GetTick>
 8005ef6:	1b40      	subs	r0, r0, r5
 8005ef8:	2864      	cmp	r0, #100	; 0x64
 8005efa:	d9f5      	bls.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8005efc:	2003      	movs	r0, #3
 8005efe:	e777      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f00:	4908      	ldr	r1, [pc, #32]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005f02:	688a      	ldr	r2, [r1, #8]
 8005f04:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005f08:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f10:	4313      	orrs	r3, r2
 8005f12:	608b      	str	r3, [r1, #8]
 8005f14:	e7dd      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8005f16:	2000      	movs	r0, #0
 8005f18:	e76a      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005f1a:	bf00      	nop
 8005f1c:	424711e0 	.word	0x424711e0
 8005f20:	42470068 	.word	0x42470068
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40007000 	.word	0x40007000
 8005f2c:	42470e40 	.word	0x42470e40

08005f30 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f34:	6802      	ldr	r2, [r0, #0]
 8005f36:	68d3      	ldr	r3, [r2, #12]
 8005f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f3c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f3e:	f7fe f953 	bl	80041e8 <HAL_GetTick>
 8005f42:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f013 0f20 	tst.w	r3, #32
 8005f4c:	d107      	bne.n	8005f5e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f4e:	f7fe f94b 	bl	80041e8 <HAL_GetTick>
 8005f52:	1b40      	subs	r0, r0, r5
 8005f54:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f58:	d9f4      	bls.n	8005f44 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8005f5a:	2003      	movs	r0, #3
 8005f5c:	e000      	b.n	8005f60 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8005f5e:	2000      	movs	r0, #0
}
 8005f60:	bd38      	pop	{r3, r4, r5, pc}

08005f62 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005f62:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f64:	6803      	ldr	r3, [r0, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f6c:	d001      	beq.n	8005f72 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005f6e:	2000      	movs	r0, #0
}
 8005f70:	bd38      	pop	{r3, r4, r5, pc}
 8005f72:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295
 8005f78:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005f7a:	f7fe f935 	bl	80041e8 <HAL_GetTick>
 8005f7e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f88:	d107      	bne.n	8005f9a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f8a:	f7fe f92d 	bl	80041e8 <HAL_GetTick>
 8005f8e:	1b40      	subs	r0, r0, r5
 8005f90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005f94:	d9f4      	bls.n	8005f80 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005f96:	2003      	movs	r0, #3
 8005f98:	e7ea      	b.n	8005f70 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	e7e8      	b.n	8005f70 <RTC_EnterInitMode+0xe>

08005f9e <HAL_RTC_Init>:
{
 8005f9e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d05c      	beq.n	800605e <HAL_RTC_Init+0xc0>
 8005fa4:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005fa6:	7f43      	ldrb	r3, [r0, #29]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d040      	beq.n	800602e <HAL_RTC_Init+0x90>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fac:	2302      	movs	r3, #2
 8005fae:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	22ca      	movs	r2, #202	; 0xca
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	2253      	movs	r2, #83	; 0x53
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f7ff ffd0 	bl	8005f62 <RTC_EnterInitMode>
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d136      	bne.n	8006036 <HAL_RTC_Init+0x98>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005fc8:	6822      	ldr	r2, [r4, #0]
 8005fca:	6893      	ldr	r3, [r2, #8]
 8005fcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fd6:	6821      	ldr	r1, [r4, #0]
 8005fd8:	688a      	ldr	r2, [r1, #8]
 8005fda:	6863      	ldr	r3, [r4, #4]
 8005fdc:	6920      	ldr	r0, [r4, #16]
 8005fde:	4303      	orrs	r3, r0
 8005fe0:	6960      	ldr	r0, [r4, #20]
 8005fe2:	4303      	orrs	r3, r0
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	68e2      	ldr	r2, [r4, #12]
 8005fec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	6913      	ldr	r3, [r2, #16]
 8005ff2:	68a1      	ldr	r1, [r4, #8]
 8005ff4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005ff8:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ffa:	6822      	ldr	r2, [r4, #0]
 8005ffc:	68d3      	ldr	r3, [r2, #12]
 8005ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006002:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f013 0f20 	tst.w	r3, #32
 800600c:	d01b      	beq.n	8006046 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006016:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006018:	6822      	ldr	r2, [r4, #0]
 800601a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800601c:	69a1      	ldr	r1, [r4, #24]
 800601e:	430b      	orrs	r3, r1
 8006020:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006028:	2301      	movs	r3, #1
 800602a:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800602c:	e009      	b.n	8006042 <HAL_RTC_Init+0xa4>
    hrtc->Lock = HAL_UNLOCKED;
 800602e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8006030:	f7fd fa28 	bl	8003484 <HAL_RTC_MspInit>
 8006034:	e7ba      	b.n	8005fac <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	22ff      	movs	r2, #255	; 0xff
 800603a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800603c:	2304      	movs	r3, #4
 800603e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8006040:	2501      	movs	r5, #1
}
 8006042:	4628      	mov	r0, r5
 8006044:	bd38      	pop	{r3, r4, r5, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006046:	4620      	mov	r0, r4
 8006048:	f7ff ff72 	bl	8005f30 <HAL_RTC_WaitForSynchro>
 800604c:	2800      	cmp	r0, #0
 800604e:	d0de      	beq.n	800600e <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	22ff      	movs	r2, #255	; 0xff
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006056:	2304      	movs	r3, #4
 8006058:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 800605a:	2501      	movs	r5, #1
 800605c:	e7f1      	b.n	8006042 <HAL_RTC_Init+0xa4>
     return HAL_ERROR;
 800605e:	2501      	movs	r5, #1
 8006060:	e7ef      	b.n	8006042 <HAL_RTC_Init+0xa4>

08006062 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006062:	2300      	movs	r3, #0

  while(Value >= 10U)
 8006064:	e002      	b.n	800606c <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006066:	3301      	adds	r3, #1
    Value -= 10U;
 8006068:	380a      	subs	r0, #10
 800606a:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 800606c:	2809      	cmp	r0, #9
 800606e:	d8fa      	bhi.n	8006066 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	b2db      	uxtb	r3, r3
}
 8006074:	4318      	orrs	r0, r3
 8006076:	4770      	bx	lr

08006078 <HAL_RTC_SetTime>:
{
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800607a:	7f03      	ldrb	r3, [r0, #28]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d078      	beq.n	8006172 <HAL_RTC_SetTime+0xfa>
 8006080:	460d      	mov	r5, r1
 8006082:	4604      	mov	r4, r0
 8006084:	2301      	movs	r3, #1
 8006086:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006088:	2302      	movs	r3, #2
 800608a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 800608c:	2a00      	cmp	r2, #0
 800608e:	d146      	bne.n	800611e <HAL_RTC_SetTime+0xa6>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006090:	6803      	ldr	r3, [r0, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006098:	d101      	bne.n	800609e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 800609a:	2300      	movs	r3, #0
 800609c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800609e:	7828      	ldrb	r0, [r5, #0]
 80060a0:	f7ff ffdf 	bl	8006062 <RTC_ByteToBcd2>
 80060a4:	0406      	lsls	r6, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80060a6:	7868      	ldrb	r0, [r5, #1]
 80060a8:	f7ff ffdb 	bl	8006062 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80060ac:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80060b0:	78a8      	ldrb	r0, [r5, #2]
 80060b2:	f7ff ffd6 	bl	8006062 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80060b6:	4330      	orrs	r0, r6
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80060b8:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80060ba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	22ca      	movs	r2, #202	; 0xca
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	2253      	movs	r2, #83	; 0x53
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7ff ff49 	bl	8005f62 <RTC_EnterInitMode>
 80060d0:	4607      	mov	r7, r0
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d135      	bne.n	8006142 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f006 367f 	and.w	r6, r6, #2139062143	; 0x7f7f7f7f
 80060dc:	f026 46fe 	bic.w	r6, r6, #2130706432	; 0x7f000000
 80060e0:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80060e2:	6822      	ldr	r2, [r4, #0]
 80060e4:	6893      	ldr	r3, [r2, #8]
 80060e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ea:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80060ec:	6821      	ldr	r1, [r4, #0]
 80060ee:	688b      	ldr	r3, [r1, #8]
 80060f0:	68ea      	ldr	r2, [r5, #12]
 80060f2:	6928      	ldr	r0, [r5, #16]
 80060f4:	4302      	orrs	r2, r0
 80060f6:	4313      	orrs	r3, r2
 80060f8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	68d3      	ldr	r3, [r2, #12]
 80060fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006102:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f013 0f20 	tst.w	r3, #32
 800610c:	d023      	beq.n	8006156 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	22ff      	movs	r2, #255	; 0xff
 8006112:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8006114:	2301      	movs	r3, #1
 8006116:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8006118:	2300      	movs	r3, #0
 800611a:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 800611c:	e019      	b.n	8006152 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800611e:	6803      	ldr	r3, [r0, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006126:	d101      	bne.n	800612c <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00U;
 8006128:	2300      	movs	r3, #0
 800612a:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800612c:	782b      	ldrb	r3, [r5, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800612e:	7868      	ldrb	r0, [r5, #1]
 8006130:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006132:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8006136:	78ab      	ldrb	r3, [r5, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006138:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800613a:	78ee      	ldrb	r6, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800613c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8006140:	e7bd      	b.n	80060be <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006148:	2304      	movs	r3, #4
 800614a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800614c:	2300      	movs	r3, #0
 800614e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8006150:	2701      	movs	r7, #1
}
 8006152:	4638      	mov	r0, r7
 8006154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006156:	4620      	mov	r0, r4
 8006158:	f7ff feea 	bl	8005f30 <HAL_RTC_WaitForSynchro>
 800615c:	2800      	cmp	r0, #0
 800615e:	d0d6      	beq.n	800610e <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	22ff      	movs	r2, #255	; 0xff
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006166:	2304      	movs	r3, #4
 8006168:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800616a:	2300      	movs	r3, #0
 800616c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800616e:	2701      	movs	r7, #1
 8006170:	e7ef      	b.n	8006152 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8006172:	2702      	movs	r7, #2
 8006174:	e7ed      	b.n	8006152 <HAL_RTC_SetTime+0xda>

08006176 <HAL_RTC_SetDate>:
{
 8006176:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8006178:	7f03      	ldrb	r3, [r0, #28]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d066      	beq.n	800624c <HAL_RTC_SetDate+0xd6>
 800617e:	2301      	movs	r3, #1
 8006180:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006182:	2302      	movs	r3, #2
 8006184:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006186:	b93a      	cbnz	r2, 8006198 <HAL_RTC_SetDate+0x22>
 8006188:	784b      	ldrb	r3, [r1, #1]
 800618a:	f013 0f10 	tst.w	r3, #16
 800618e:	d003      	beq.n	8006198 <HAL_RTC_SetDate+0x22>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006190:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006194:	330a      	adds	r3, #10
 8006196:	704b      	strb	r3, [r1, #1]
 8006198:	460e      	mov	r6, r1
 800619a:	4604      	mov	r4, r0
  if(Format == RTC_FORMAT_BIN)
 800619c:	2a00      	cmp	r2, #0
 800619e:	d132      	bne.n	8006206 <HAL_RTC_SetDate+0x90>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80061a0:	78c8      	ldrb	r0, [r1, #3]
 80061a2:	f7ff ff5e 	bl	8006062 <RTC_ByteToBcd2>
 80061a6:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80061a8:	7870      	ldrb	r0, [r6, #1]
 80061aa:	f7ff ff5a 	bl	8006062 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80061ae:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80061b2:	78b0      	ldrb	r0, [r6, #2]
 80061b4:	f7ff ff55 	bl	8006062 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80061b8:	4328      	orrs	r0, r5
                 ((uint32_t)sDate->WeekDay << 13U));
 80061ba:	7835      	ldrb	r5, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80061bc:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	22ca      	movs	r2, #202	; 0xca
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	2253      	movs	r2, #83	; 0x53
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80061cc:	4620      	mov	r0, r4
 80061ce:	f7ff fec8 	bl	8005f62 <RTC_EnterInitMode>
 80061d2:	4606      	mov	r6, r0
 80061d4:	bb10      	cbnz	r0, 800621c <HAL_RTC_SetDate+0xa6>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80061dc:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80061e0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	68d3      	ldr	r3, [r2, #12]
 80061e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ea:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f013 0f20 	tst.w	r3, #32
 80061f4:	d01c      	beq.n	8006230 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	22ff      	movs	r2, #255	; 0xff
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80061fc:	2301      	movs	r3, #1
 80061fe:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8006200:	2300      	movs	r3, #0
 8006202:	7723      	strb	r3, [r4, #28]
    return HAL_OK;
 8006204:	e012      	b.n	800622c <HAL_RTC_SetDate+0xb6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006206:	78cd      	ldrb	r5, [r1, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006208:	7848      	ldrb	r0, [r1, #1]
 800620a:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800620c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8006210:	788d      	ldrb	r5, [r1, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006212:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006214:	780d      	ldrb	r5, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006216:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 800621a:	e7d1      	b.n	80061c0 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	22ff      	movs	r2, #255	; 0xff
 8006220:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006222:	2304      	movs	r3, #4
 8006224:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8006226:	2300      	movs	r3, #0
 8006228:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800622a:	2601      	movs	r6, #1
}
 800622c:	4630      	mov	r0, r6
 800622e:	bd70      	pop	{r4, r5, r6, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006230:	4620      	mov	r0, r4
 8006232:	f7ff fe7d 	bl	8005f30 <HAL_RTC_WaitForSynchro>
 8006236:	2800      	cmp	r0, #0
 8006238:	d0dd      	beq.n	80061f6 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	22ff      	movs	r2, #255	; 0xff
 800623e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006240:	2304      	movs	r3, #4
 8006242:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8006244:	2300      	movs	r3, #0
 8006246:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8006248:	2601      	movs	r6, #1
 800624a:	e7ef      	b.n	800622c <HAL_RTC_SetDate+0xb6>
 __HAL_LOCK(hrtc);
 800624c:	2602      	movs	r6, #2
 800624e:	e7ed      	b.n	800622c <HAL_RTC_SetDate+0xb6>

08006250 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006250:	0903      	lsrs	r3, r0, #4
 8006252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006256:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8006258:	f000 000f 	and.w	r0, r0, #15
 800625c:	4410      	add	r0, r2
}
 800625e:	b2c0      	uxtb	r0, r0
 8006260:	4770      	bx	lr

08006262 <HAL_RTC_GetTime>:
{
 8006262:	b570      	push	{r4, r5, r6, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006264:	6803      	ldr	r3, [r0, #0]
 8006266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006268:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800626a:	6803      	ldr	r3, [r0, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006272:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006274:	6803      	ldr	r3, [r0, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800627c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006280:	0c1d      	lsrs	r5, r3, #16
 8006282:	f005 003f 	and.w	r0, r5, #63	; 0x3f
 8006286:	7008      	strb	r0, [r1, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006288:	f3c3 2606 	ubfx	r6, r3, #8, #7
 800628c:	704e      	strb	r6, [r1, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800628e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8006292:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006294:	f005 0540 	and.w	r5, r5, #64	; 0x40
 8006298:	70cd      	strb	r5, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 800629a:	b95a      	cbnz	r2, 80062b4 <HAL_RTC_GetTime+0x52>
 800629c:	460d      	mov	r5, r1
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800629e:	f7ff ffd7 	bl	8006250 <RTC_Bcd2ToByte>
 80062a2:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80062a4:	4630      	mov	r0, r6
 80062a6:	f7ff ffd3 	bl	8006250 <RTC_Bcd2ToByte>
 80062aa:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80062ac:	4620      	mov	r0, r4
 80062ae:	f7ff ffcf 	bl	8006250 <RTC_Bcd2ToByte>
 80062b2:	70a8      	strb	r0, [r5, #2]
}
 80062b4:	2000      	movs	r0, #0
 80062b6:	bd70      	pop	{r4, r5, r6, pc}

080062b8 <HAL_RTC_GetDate>:
{
 80062b8:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80062ba:	6803      	ldr	r3, [r0, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80062c6:	0c18      	lsrs	r0, r3, #16
 80062c8:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80062ca:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80062ce:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80062d0:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80062d4:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80062d6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80062da:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80062dc:	b95a      	cbnz	r2, 80062f6 <HAL_RTC_GetDate+0x3e>
 80062de:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80062e0:	f7ff ffb6 	bl	8006250 <RTC_Bcd2ToByte>
 80062e4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80062e6:	4630      	mov	r0, r6
 80062e8:	f7ff ffb2 	bl	8006250 <RTC_Bcd2ToByte>
 80062ec:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80062ee:	4628      	mov	r0, r5
 80062f0:	f7ff ffae 	bl	8006250 <RTC_Bcd2ToByte>
 80062f4:	70a0      	strb	r0, [r4, #2]
}
 80062f6:	2000      	movs	r0, #0
 80062f8:	bd70      	pop	{r4, r5, r6, pc}

080062fa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fc:	4605      	mov	r5, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	4616      	mov	r6, r2
 8006302:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	ea37 0303 	bics.w	r3, r7, r3
 800630c:	bf0c      	ite	eq
 800630e:	2301      	moveq	r3, #1
 8006310:	2300      	movne	r3, #0
 8006312:	42b3      	cmp	r3, r6
 8006314:	d037      	beq.n	8006386 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006316:	f1b4 3fff 	cmp.w	r4, #4294967295
 800631a:	d0f3      	beq.n	8006304 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800631c:	f7fd ff64 	bl	80041e8 <HAL_GetTick>
 8006320:	9b06      	ldr	r3, [sp, #24]
 8006322:	1ac0      	subs	r0, r0, r3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d201      	bcs.n	800632c <SPI_WaitFlagStateUntilTimeout+0x32>
 8006328:	2c00      	cmp	r4, #0
 800632a:	d1eb      	bne.n	8006304 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800632c:	682a      	ldr	r2, [r5, #0]
 800632e:	6853      	ldr	r3, [r2, #4]
 8006330:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006334:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006336:	686b      	ldr	r3, [r5, #4]
 8006338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633c:	d00b      	beq.n	8006356 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800633e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006344:	d014      	beq.n	8006370 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006346:	2301      	movs	r3, #1
 8006348:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800634c:	2300      	movs	r3, #0
 800634e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8006352:	2003      	movs	r0, #3
 8006354:	e018      	b.n	8006388 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006356:	68ab      	ldr	r3, [r5, #8]
 8006358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635c:	d002      	beq.n	8006364 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006362:	d1ec      	bne.n	800633e <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8006364:	682a      	ldr	r2, [r5, #0]
 8006366:	6813      	ldr	r3, [r2, #0]
 8006368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e7e6      	b.n	800633e <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8006370:	682a      	ldr	r2, [r5, #0]
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	682a      	ldr	r2, [r5, #0]
 800637c:	6813      	ldr	r3, [r2, #0]
 800637e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e7df      	b.n	8006346 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8006386:	2000      	movs	r0, #0
}
 8006388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800638c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b530      	push	{r4, r5, lr}
 800638e:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006390:	4c16      	ldr	r4, [pc, #88]	; (80063ec <SPI_EndRxTxTransaction+0x60>)
 8006392:	6824      	ldr	r4, [r4, #0]
 8006394:	4d16      	ldr	r5, [pc, #88]	; (80063f0 <SPI_EndRxTxTransaction+0x64>)
 8006396:	fba5 3404 	umull	r3, r4, r5, r4
 800639a:	0d64      	lsrs	r4, r4, #21
 800639c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80063a0:	fb05 f404 	mul.w	r4, r5, r4
 80063a4:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063a6:	6844      	ldr	r4, [r0, #4]
 80063a8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80063ac:	d00b      	beq.n	80063c6 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	b1c3      	cbz	r3, 80063e4 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063b8:	6803      	ldr	r3, [r0, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063c0:	d1f5      	bne.n	80063ae <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	e00f      	b.n	80063e6 <SPI_EndRxTxTransaction+0x5a>
 80063c6:	460b      	mov	r3, r1
 80063c8:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063ca:	9200      	str	r2, [sp, #0]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2180      	movs	r1, #128	; 0x80
 80063d0:	f7ff ff93 	bl	80062fa <SPI_WaitFlagStateUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	b130      	cbz	r0, 80063e6 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80063da:	f043 0320 	orr.w	r3, r3, #32
 80063de:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e000      	b.n	80063e6 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	b005      	add	sp, #20
 80063ea:	bd30      	pop	{r4, r5, pc}
 80063ec:	20000030 	.word	0x20000030
 80063f0:	165e9f81 	.word	0x165e9f81

080063f4 <SPI_EndRxTransaction>:
{
 80063f4:	b510      	push	{r4, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063fa:	6840      	ldr	r0, [r0, #4]
 80063fc:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8006400:	d016      	beq.n	8006430 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006402:	6860      	ldr	r0, [r4, #4]
 8006404:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8006408:	d12e      	bne.n	8006468 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800640a:	68a3      	ldr	r3, [r4, #8]
 800640c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006410:	d01b      	beq.n	800644a <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006412:	9200      	str	r2, [sp, #0]
 8006414:	460b      	mov	r3, r1
 8006416:	2200      	movs	r2, #0
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	4620      	mov	r0, r4
 800641c:	f7ff ff6d 	bl	80062fa <SPI_WaitFlagStateUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	b350      	cbz	r0, 800647a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006424:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006426:	f043 0320 	orr.w	r3, r3, #32
 800642a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e024      	b.n	800647a <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006436:	d002      	beq.n	800643e <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d1e1      	bne.n	8006402 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 800643e:	6820      	ldr	r0, [r4, #0]
 8006440:	6803      	ldr	r3, [r0, #0]
 8006442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006446:	6003      	str	r3, [r0, #0]
 8006448:	e7db      	b.n	8006402 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800644a:	9200      	str	r2, [sp, #0]
 800644c:	460b      	mov	r3, r1
 800644e:	2200      	movs	r2, #0
 8006450:	2101      	movs	r1, #1
 8006452:	4620      	mov	r0, r4
 8006454:	f7ff ff51 	bl	80062fa <SPI_WaitFlagStateUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	b170      	cbz	r0, 800647a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800645e:	f043 0320 	orr.w	r3, r3, #32
 8006462:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e008      	b.n	800647a <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006468:	9200      	str	r2, [sp, #0]
 800646a:	460b      	mov	r3, r1
 800646c:	2200      	movs	r2, #0
 800646e:	2101      	movs	r1, #1
 8006470:	4620      	mov	r0, r4
 8006472:	f7ff ff42 	bl	80062fa <SPI_WaitFlagStateUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	b910      	cbnz	r0, 8006480 <SPI_EndRxTransaction+0x8c>
}
 800647a:	4618      	mov	r0, r3
 800647c:	b002      	add	sp, #8
 800647e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006480:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006482:	f043 0320 	orr.w	r3, r3, #32
 8006486:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e7f6      	b.n	800647a <SPI_EndRxTransaction+0x86>

0800648c <HAL_SPI_Init>:
  if (hspi == NULL)
 800648c:	2800      	cmp	r0, #0
 800648e:	d03b      	beq.n	8006508 <HAL_SPI_Init+0x7c>
{
 8006490:	b510      	push	{r4, lr}
 8006492:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006494:	2300      	movs	r3, #0
 8006496:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006498:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800649c:	2b00      	cmp	r3, #0
 800649e:	d02e      	beq.n	80064fe <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 80064a0:	2302      	movs	r3, #2
 80064a2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80064a6:	6822      	ldr	r2, [r4, #0]
 80064a8:	6813      	ldr	r3, [r2, #0]
 80064aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ae:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80064b0:	6863      	ldr	r3, [r4, #4]
 80064b2:	68a2      	ldr	r2, [r4, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	68e2      	ldr	r2, [r4, #12]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	6922      	ldr	r2, [r4, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	6962      	ldr	r2, [r4, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	69a2      	ldr	r2, [r4, #24]
 80064c4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80064c8:	4313      	orrs	r3, r2
 80064ca:	69e2      	ldr	r2, [r4, #28]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	6a22      	ldr	r2, [r4, #32]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80064da:	8b63      	ldrh	r3, [r4, #26]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064e2:	6822      	ldr	r2, [r4, #0]
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	69d3      	ldr	r3, [r2, #28]
 80064ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064f0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064f2:	2000      	movs	r0, #0
 80064f4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80064fc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80064fe:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006502:	f7fc ffcd 	bl	80034a0 <HAL_SPI_MspInit>
 8006506:	e7cb      	b.n	80064a0 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8006508:	2001      	movs	r0, #1
}
 800650a:	4770      	bx	lr

0800650c <HAL_SPI_Transmit>:
{
 800650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006510:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8006512:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8006516:	2c01      	cmp	r4, #1
 8006518:	f000 80c3 	beq.w	80066a2 <HAL_SPI_Transmit+0x196>
 800651c:	461d      	mov	r5, r3
 800651e:	4617      	mov	r7, r2
 8006520:	4688      	mov	r8, r1
 8006522:	4604      	mov	r4, r0
 8006524:	2301      	movs	r3, #1
 8006526:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800652a:	f7fd fe5d 	bl	80041e8 <HAL_GetTick>
 800652e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006530:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d009      	beq.n	800654e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800653a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800653c:	2301      	movs	r3, #1
 800653e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006542:	2300      	movs	r3, #0
 8006544:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006548:	b002      	add	sp, #8
 800654a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800654e:	f1b8 0f00 	cmp.w	r8, #0
 8006552:	f000 8098 	beq.w	8006686 <HAL_SPI_Transmit+0x17a>
 8006556:	2f00      	cmp	r7, #0
 8006558:	f000 8097 	beq.w	800668a <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800655c:	2303      	movs	r3, #3
 800655e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006562:	2300      	movs	r3, #0
 8006564:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006566:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800656a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800656c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800656e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006570:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006572:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006574:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006576:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657e:	d01c      	beq.n	80065ba <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006588:	d103      	bne.n	8006592 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006590:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006598:	d015      	beq.n	80065c6 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800659a:	6863      	ldr	r3, [r4, #4]
 800659c:	b10b      	cbz	r3, 80065a2 <HAL_SPI_Transmit+0x96>
 800659e:	2f01      	cmp	r7, #1
 80065a0:	d149      	bne.n	8006636 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	7812      	ldrb	r2, [r2, #0]
 80065a8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065ac:	3301      	adds	r3, #1
 80065ae:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80065b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065b2:	3b01      	subs	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80065b8:	e03d      	b.n	8006636 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 80065ba:	6822      	ldr	r2, [r4, #0]
 80065bc:	6813      	ldr	r3, [r2, #0]
 80065be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	e7dc      	b.n	8006580 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c6:	6863      	ldr	r3, [r4, #4]
 80065c8:	b10b      	cbz	r3, 80065ce <HAL_SPI_Transmit+0xc2>
 80065ca:	2f01      	cmp	r7, #1
 80065cc:	d115      	bne.n	80065fa <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	8812      	ldrh	r2, [r2, #0]
 80065d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065d8:	3302      	adds	r3, #2
 80065da:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80065dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80065e4:	e009      	b.n	80065fa <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065e6:	f7fd fdff 	bl	80041e8 <HAL_GetTick>
 80065ea:	1b80      	subs	r0, r0, r6
 80065ec:	42a8      	cmp	r0, r5
 80065ee:	d302      	bcc.n	80065f6 <HAL_SPI_Transmit+0xea>
 80065f0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065f4:	d14b      	bne.n	800668e <HAL_SPI_Transmit+0x182>
 80065f6:	2d00      	cmp	r5, #0
 80065f8:	d04b      	beq.n	8006692 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 80065fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d02c      	beq.n	800665c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	f012 0f02 	tst.w	r2, #2
 800660a:	d0ec      	beq.n	80065e6 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800660c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800660e:	8812      	ldrh	r2, [r2, #0]
 8006610:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006612:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006614:	3302      	adds	r3, #2
 8006616:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006618:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800661a:	3b01      	subs	r3, #1
 800661c:	b29b      	uxth	r3, r3
 800661e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8006620:	e7eb      	b.n	80065fa <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006622:	f7fd fde1 	bl	80041e8 <HAL_GetTick>
 8006626:	1b80      	subs	r0, r0, r6
 8006628:	42a8      	cmp	r0, r5
 800662a:	d302      	bcc.n	8006632 <HAL_SPI_Transmit+0x126>
 800662c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006630:	d131      	bne.n	8006696 <HAL_SPI_Transmit+0x18a>
 8006632:	2d00      	cmp	r5, #0
 8006634:	d031      	beq.n	800669a <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8006636:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006638:	b29b      	uxth	r3, r3
 800663a:	b17b      	cbz	r3, 800665c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	f012 0f02 	tst.w	r2, #2
 8006644:	d0ed      	beq.n	8006622 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006646:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800664c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800664e:	3301      	adds	r3, #1
 8006650:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006652:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006654:	3b01      	subs	r3, #1
 8006656:	b29b      	uxth	r3, r3
 8006658:	86e3      	strh	r3, [r4, #54]	; 0x36
 800665a:	e7ec      	b.n	8006636 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800665c:	4632      	mov	r2, r6
 800665e:	4629      	mov	r1, r5
 8006660:	4620      	mov	r0, r4
 8006662:	f7ff fe93 	bl	800638c <SPI_EndRxTxTransaction>
 8006666:	b108      	cbz	r0, 800666c <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006668:	2320      	movs	r3, #32
 800666a:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800666c:	68a3      	ldr	r3, [r4, #8]
 800666e:	b933      	cbnz	r3, 800667e <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	9201      	str	r2, [sp, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800667e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006680:	b96b      	cbnz	r3, 800669e <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006682:	2000      	movs	r0, #0
 8006684:	e75a      	b.n	800653c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8006686:	2001      	movs	r0, #1
 8006688:	e758      	b.n	800653c <HAL_SPI_Transmit+0x30>
 800668a:	2001      	movs	r0, #1
 800668c:	e756      	b.n	800653c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800668e:	2003      	movs	r0, #3
 8006690:	e754      	b.n	800653c <HAL_SPI_Transmit+0x30>
 8006692:	2003      	movs	r0, #3
 8006694:	e752      	b.n	800653c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8006696:	2003      	movs	r0, #3
 8006698:	e750      	b.n	800653c <HAL_SPI_Transmit+0x30>
 800669a:	2003      	movs	r0, #3
 800669c:	e74e      	b.n	800653c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800669e:	2001      	movs	r0, #1
 80066a0:	e74c      	b.n	800653c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80066a2:	2002      	movs	r0, #2
 80066a4:	e750      	b.n	8006548 <HAL_SPI_Transmit+0x3c>

080066a6 <HAL_SPI_TransmitReceive>:
{
 80066a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066aa:	b083      	sub	sp, #12
 80066ac:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80066b0:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80066b4:	2c01      	cmp	r4, #1
 80066b6:	f000 810b 	beq.w	80068d0 <HAL_SPI_TransmitReceive+0x22a>
 80066ba:	461d      	mov	r5, r3
 80066bc:	4617      	mov	r7, r2
 80066be:	460e      	mov	r6, r1
 80066c0:	4604      	mov	r4, r0
 80066c2:	2301      	movs	r3, #1
 80066c4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80066c8:	f7fd fd8e 	bl	80041e8 <HAL_GetTick>
 80066cc:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 80066ce:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80066d2:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80066d4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066d6:	2801      	cmp	r0, #1
 80066d8:	d015      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x60>
 80066da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066de:	d00a      	beq.n	80066f6 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80066e2:	2201      	movs	r2, #1
 80066e4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80066e8:	2200      	movs	r2, #0
 80066ea:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	b003      	add	sp, #12
 80066f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f040 80db 	bne.w	80068b4 <HAL_SPI_TransmitReceive+0x20e>
 80066fe:	2804      	cmp	r0, #4
 8006700:	d001      	beq.n	8006706 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8006702:	2302      	movs	r3, #2
 8006704:	e7ed      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006706:	2e00      	cmp	r6, #0
 8006708:	f000 80d6 	beq.w	80068b8 <HAL_SPI_TransmitReceive+0x212>
 800670c:	2f00      	cmp	r7, #0
 800670e:	f000 80d5 	beq.w	80068bc <HAL_SPI_TransmitReceive+0x216>
 8006712:	2d00      	cmp	r5, #0
 8006714:	f000 80d4 	beq.w	80068c0 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006718:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b04      	cmp	r3, #4
 8006720:	d002      	beq.n	8006728 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006722:	2305      	movs	r3, #5
 8006724:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006728:	2300      	movs	r3, #0
 800672a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800672c:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800672e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006730:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006732:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006734:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006736:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8006738:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800673a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006744:	d103      	bne.n	800674e <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800674c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006754:	d010      	beq.n	8006778 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006756:	6863      	ldr	r3, [r4, #4]
 8006758:	b10b      	cbz	r3, 800675e <HAL_SPI_TransmitReceive+0xb8>
 800675a:	2d01      	cmp	r5, #1
 800675c:	d10a      	bne.n	8006774 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800675e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006766:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006768:	3301      	adds	r3, #1
 800676a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800676c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800676e:	3b01      	subs	r3, #1
 8006770:	b29b      	uxth	r3, r3
 8006772:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006774:	2501      	movs	r5, #1
 8006776:	e069      	b.n	800684c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	b10b      	cbz	r3, 8006780 <HAL_SPI_TransmitReceive+0xda>
 800677c:	2d01      	cmp	r5, #1
 800677e:	d10a      	bne.n	8006796 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006780:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	8812      	ldrh	r2, [r2, #0]
 8006786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006788:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800678a:	3302      	adds	r3, #2
 800678c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800678e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006790:	3b01      	subs	r3, #1
 8006792:	b29b      	uxth	r3, r3
 8006794:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006796:	2501      	movs	r5, #1
 8006798:	e01b      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	f012 0f01 	tst.w	r2, #1
 80067a2:	d00d      	beq.n	80067c0 <HAL_SPI_TransmitReceive+0x11a>
 80067a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80067a6:	b292      	uxth	r2, r2
 80067a8:	b152      	cbz	r2, 80067c0 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067b2:	3302      	adds	r3, #2
 80067b4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80067b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80067be:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067c0:	f7fd fd12 	bl	80041e8 <HAL_GetTick>
 80067c4:	eba0 0009 	sub.w	r0, r0, r9
 80067c8:	4540      	cmp	r0, r8
 80067ca:	d302      	bcc.n	80067d2 <HAL_SPI_TransmitReceive+0x12c>
 80067cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80067d0:	d178      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	b91b      	cbnz	r3, 80067e0 <HAL_SPI_TransmitReceive+0x13a>
 80067d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d052      	beq.n	8006886 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	f012 0f02 	tst.w	r2, #2
 80067e8:	d0d7      	beq.n	800679a <HAL_SPI_TransmitReceive+0xf4>
 80067ea:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80067ec:	b292      	uxth	r2, r2
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d0d3      	beq.n	800679a <HAL_SPI_TransmitReceive+0xf4>
 80067f2:	2d00      	cmp	r5, #0
 80067f4:	d0d1      	beq.n	800679a <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80067f8:	8812      	ldrh	r2, [r2, #0]
 80067fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067fe:	3302      	adds	r3, #2
 8006800:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006802:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006804:	3b01      	subs	r3, #1
 8006806:	b29b      	uxth	r3, r3
 8006808:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800680a:	2500      	movs	r5, #0
 800680c:	e7c5      	b.n	800679a <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	f012 0f01 	tst.w	r2, #1
 8006816:	d00d      	beq.n	8006834 <HAL_SPI_TransmitReceive+0x18e>
 8006818:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800681a:	b292      	uxth	r2, r2
 800681c:	b152      	cbz	r2, 8006834 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006822:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006826:	3301      	adds	r3, #1
 8006828:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800682a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800682c:	3b01      	subs	r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006832:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006834:	f7fd fcd8 	bl	80041e8 <HAL_GetTick>
 8006838:	eba0 0009 	sub.w	r0, r0, r9
 800683c:	4540      	cmp	r0, r8
 800683e:	d302      	bcc.n	8006846 <HAL_SPI_TransmitReceive+0x1a0>
 8006840:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006844:	d140      	bne.n	80068c8 <HAL_SPI_TransmitReceive+0x222>
 8006846:	f1b8 0f00 	cmp.w	r8, #0
 800684a:	d03f      	beq.n	80068cc <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800684c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800684e:	b29b      	uxth	r3, r3
 8006850:	b913      	cbnz	r3, 8006858 <HAL_SPI_TransmitReceive+0x1b2>
 8006852:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006854:	b29b      	uxth	r3, r3
 8006856:	b1b3      	cbz	r3, 8006886 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	f012 0f02 	tst.w	r2, #2
 8006860:	d0d5      	beq.n	800680e <HAL_SPI_TransmitReceive+0x168>
 8006862:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006864:	b292      	uxth	r2, r2
 8006866:	2a00      	cmp	r2, #0
 8006868:	d0d1      	beq.n	800680e <HAL_SPI_TransmitReceive+0x168>
 800686a:	2d00      	cmp	r5, #0
 800686c:	d0cf      	beq.n	800680e <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800686e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006870:	7812      	ldrb	r2, [r2, #0]
 8006872:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006874:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006876:	3301      	adds	r3, #1
 8006878:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800687a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800687c:	3b01      	subs	r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006882:	2500      	movs	r5, #0
 8006884:	e7c3      	b.n	800680e <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006886:	464a      	mov	r2, r9
 8006888:	4641      	mov	r1, r8
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff fd7e 	bl	800638c <SPI_EndRxTxTransaction>
 8006890:	4603      	mov	r3, r0
 8006892:	b118      	cbz	r0, 800689c <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006894:	2320      	movs	r3, #32
 8006896:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006898:	2301      	movs	r3, #1
    goto error;
 800689a:	e722      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800689c:	68a2      	ldr	r2, [r4, #8]
 800689e:	2a00      	cmp	r2, #0
 80068a0:	f47f af1f 	bne.w	80066e2 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068a4:	9201      	str	r2, [sp, #4]
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	68d1      	ldr	r1, [r2, #12]
 80068aa:	9101      	str	r1, [sp, #4]
 80068ac:	6892      	ldr	r2, [r2, #8]
 80068ae:	9201      	str	r2, [sp, #4]
 80068b0:	9a01      	ldr	r2, [sp, #4]
 80068b2:	e716      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 80068b4:	2302      	movs	r3, #2
 80068b6:	e714      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e712      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
 80068bc:	2301      	movs	r3, #1
 80068be:	e710      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e70e      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e70c      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e70a      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
 80068cc:	2303      	movs	r3, #3
 80068ce:	e708      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 80068d0:	2302      	movs	r3, #2
 80068d2:	e70c      	b.n	80066ee <HAL_SPI_TransmitReceive+0x48>

080068d4 <HAL_SPI_Receive>:
{
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	4604      	mov	r4, r0
 80068dc:	460f      	mov	r7, r1
 80068de:	4690      	mov	r8, r2
 80068e0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068e2:	6843      	ldr	r3, [r0, #4]
 80068e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068e8:	d019      	beq.n	800691e <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 80068ea:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	f000 809f 	beq.w	8006a32 <HAL_SPI_Receive+0x15e>
 80068f4:	2301      	movs	r3, #1
 80068f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80068fa:	f7fd fc75 	bl	80041e8 <HAL_GetTick>
 80068fe:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006900:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d015      	beq.n	8006936 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800690a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800690c:	2301      	movs	r3, #1
 800690e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006912:	2300      	movs	r3, #0
 8006914:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006918:	b002      	add	sp, #8
 800691a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800691e:	6883      	ldr	r3, [r0, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e2      	bne.n	80068ea <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006924:	2304      	movs	r3, #4
 8006926:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800692a:	9500      	str	r5, [sp, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	460a      	mov	r2, r1
 8006930:	f7ff feb9 	bl	80066a6 <HAL_SPI_TransmitReceive>
 8006934:	e7f0      	b.n	8006918 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8006936:	2f00      	cmp	r7, #0
 8006938:	d06d      	beq.n	8006a16 <HAL_SPI_Receive+0x142>
 800693a:	f1b8 0f00 	cmp.w	r8, #0
 800693e:	d06c      	beq.n	8006a1a <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006940:	2304      	movs	r3, #4
 8006942:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006946:	2300      	movs	r3, #0
 8006948:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800694a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800694c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006950:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006954:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006956:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006958:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800695a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800695c:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800695e:	68a3      	ldr	r3, [r4, #8]
 8006960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006964:	d00b      	beq.n	800697e <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800696e:	d103      	bne.n	8006978 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006976:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006978:	68e3      	ldr	r3, [r4, #12]
 800697a:	b183      	cbz	r3, 800699e <HAL_SPI_Receive+0xca>
 800697c:	e02c      	b.n	80069d8 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	e7ed      	b.n	8006966 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800698a:	f7fd fc2d 	bl	80041e8 <HAL_GetTick>
 800698e:	1b80      	subs	r0, r0, r6
 8006990:	42a8      	cmp	r0, r5
 8006992:	d302      	bcc.n	800699a <HAL_SPI_Receive+0xc6>
 8006994:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006998:	d141      	bne.n	8006a1e <HAL_SPI_Receive+0x14a>
 800699a:	2d00      	cmp	r5, #0
 800699c:	d041      	beq.n	8006a22 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 800699e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d02b      	beq.n	80069fe <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	f012 0f01 	tst.w	r2, #1
 80069ae:	d0ec      	beq.n	800698a <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069b2:	7b1b      	ldrb	r3, [r3, #12]
 80069b4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069b8:	3301      	adds	r3, #1
 80069ba:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80069bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80069c4:	e7eb      	b.n	800699e <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069c6:	f7fd fc0f 	bl	80041e8 <HAL_GetTick>
 80069ca:	1b80      	subs	r0, r0, r6
 80069cc:	42a8      	cmp	r0, r5
 80069ce:	d302      	bcc.n	80069d6 <HAL_SPI_Receive+0x102>
 80069d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80069d4:	d127      	bne.n	8006a26 <HAL_SPI_Receive+0x152>
 80069d6:	b345      	cbz	r5, 8006a2a <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 80069d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069da:	b29b      	uxth	r3, r3
 80069dc:	b17b      	cbz	r3, 80069fe <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	f012 0f01 	tst.w	r2, #1
 80069e6:	d0ee      	beq.n	80069c6 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069f0:	3302      	adds	r3, #2
 80069f2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80069f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80069fc:	e7ec      	b.n	80069d8 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069fe:	4632      	mov	r2, r6
 8006a00:	4629      	mov	r1, r5
 8006a02:	4620      	mov	r0, r4
 8006a04:	f7ff fcf6 	bl	80063f4 <SPI_EndRxTransaction>
 8006a08:	b108      	cbz	r0, 8006a0e <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a0a:	2320      	movs	r3, #32
 8006a0c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a0e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006a10:	b96b      	cbnz	r3, 8006a2e <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a12:	2000      	movs	r0, #0
 8006a14:	e77a      	b.n	800690c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8006a16:	2001      	movs	r0, #1
 8006a18:	e778      	b.n	800690c <HAL_SPI_Receive+0x38>
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	e776      	b.n	800690c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8006a1e:	2003      	movs	r0, #3
 8006a20:	e774      	b.n	800690c <HAL_SPI_Receive+0x38>
 8006a22:	2003      	movs	r0, #3
 8006a24:	e772      	b.n	800690c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8006a26:	2003      	movs	r0, #3
 8006a28:	e770      	b.n	800690c <HAL_SPI_Receive+0x38>
 8006a2a:	2003      	movs	r0, #3
 8006a2c:	e76e      	b.n	800690c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8006a2e:	2001      	movs	r0, #1
 8006a30:	e76c      	b.n	800690c <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8006a32:	2002      	movs	r0, #2
 8006a34:	e770      	b.n	8006918 <HAL_SPI_Receive+0x44>
	...

08006a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3a:	6a03      	ldr	r3, [r0, #32]
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a44:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a46:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a48:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a4c:	680d      	ldr	r5, [r1, #0]
 8006a4e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a52:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a56:	688b      	ldr	r3, [r1, #8]
 8006a58:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a5a:	4d0d      	ldr	r5, [pc, #52]	; (8006a90 <TIM_OC1_SetConfig+0x58>)
 8006a5c:	42a8      	cmp	r0, r5
 8006a5e:	d009      	beq.n	8006a74 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	4d0b      	ldr	r5, [pc, #44]	; (8006a90 <TIM_OC1_SetConfig+0x58>)
 8006a62:	42a8      	cmp	r0, r5
 8006a64:	d00d      	beq.n	8006a82 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a66:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a68:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a6a:	684a      	ldr	r2, [r1, #4]
 8006a6c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6e:	6203      	str	r3, [r0, #32]
}
 8006a70:	bc70      	pop	{r4, r5, r6}
 8006a72:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a74:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006a78:	68cc      	ldr	r4, [r1, #12]
 8006a7a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	e7ee      	b.n	8006a60 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8006a86:	694c      	ldr	r4, [r1, #20]
 8006a88:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a8a:	698a      	ldr	r2, [r1, #24]
 8006a8c:	4322      	orrs	r2, r4
 8006a8e:	e7ea      	b.n	8006a66 <TIM_OC1_SetConfig+0x2e>
 8006a90:	40010000 	.word	0x40010000

08006a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a94:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a96:	6a03      	ldr	r3, [r0, #32]
 8006a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a9c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aa8:	680d      	ldr	r5, [r1, #0]
 8006aaa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ab0:	688d      	ldr	r5, [r1, #8]
 8006ab2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ab6:	4d0f      	ldr	r5, [pc, #60]	; (8006af4 <TIM_OC3_SetConfig+0x60>)
 8006ab8:	42a8      	cmp	r0, r5
 8006aba:	d009      	beq.n	8006ad0 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abc:	4d0d      	ldr	r5, [pc, #52]	; (8006af4 <TIM_OC3_SetConfig+0x60>)
 8006abe:	42a8      	cmp	r0, r5
 8006ac0:	d00e      	beq.n	8006ae0 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ac6:	684a      	ldr	r2, [r1, #4]
 8006ac8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aca:	6203      	str	r3, [r0, #32]
}
 8006acc:	bc30      	pop	{r4, r5}
 8006ace:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ad4:	68cd      	ldr	r5, [r1, #12]
 8006ad6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ade:	e7ed      	b.n	8006abc <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ae0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ae4:	694d      	ldr	r5, [r1, #20]
 8006ae6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aea:	698d      	ldr	r5, [r1, #24]
 8006aec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8006af0:	e7e7      	b.n	8006ac2 <TIM_OC3_SetConfig+0x2e>
 8006af2:	bf00      	nop
 8006af4:	40010000 	.word	0x40010000

08006af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006afa:	6a03      	ldr	r3, [r0, #32]
 8006afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b06:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b08:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b0c:	680d      	ldr	r5, [r1, #0]
 8006b0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b16:	688d      	ldr	r5, [r1, #8]
 8006b18:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1c:	4d07      	ldr	r5, [pc, #28]	; (8006b3c <TIM_OC4_SetConfig+0x44>)
 8006b1e:	42a8      	cmp	r0, r5
 8006b20:	d006      	beq.n	8006b30 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b22:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b24:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b26:	684a      	ldr	r2, [r1, #4]
 8006b28:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2a:	6203      	str	r3, [r0, #32]
}
 8006b2c:	bc30      	pop	{r4, r5}
 8006b2e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b30:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b34:	694d      	ldr	r5, [r1, #20]
 8006b36:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006b3a:	e7f2      	b.n	8006b22 <TIM_OC4_SetConfig+0x2a>
 8006b3c:	40010000 	.word	0x40010000

08006b40 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b40:	6802      	ldr	r2, [r0, #0]
 8006b42:	68d3      	ldr	r3, [r2, #12]
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b4a:	6802      	ldr	r2, [r0, #0]
 8006b4c:	6893      	ldr	r3, [r2, #8]
 8006b4e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b52:	2b06      	cmp	r3, #6
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	6013      	str	r3, [r2, #0]
}
 8006b5e:	2000      	movs	r0, #0
 8006b60:	4770      	bx	lr

08006b62 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006b62:	4770      	bx	lr

08006b64 <HAL_TIM_IC_CaptureCallback>:
}
 8006b64:	4770      	bx	lr

08006b66 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIM_TriggerCallback>:
}
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_IRQHandler>:
{
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b6e:	6803      	ldr	r3, [r0, #0]
 8006b70:	691a      	ldr	r2, [r3, #16]
 8006b72:	f012 0f02 	tst.w	r2, #2
 8006b76:	d011      	beq.n	8006b9c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	f012 0f02 	tst.w	r2, #2
 8006b7e:	d00d      	beq.n	8006b9c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b80:	f06f 0202 	mvn.w	r2, #2
 8006b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b86:	2301      	movs	r3, #1
 8006b88:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b8a:	6803      	ldr	r3, [r0, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	f013 0f03 	tst.w	r3, #3
 8006b92:	d070      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006b94:	f7ff ffe6 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	f012 0f04 	tst.w	r2, #4
 8006ba4:	d012      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	f012 0f04 	tst.w	r2, #4
 8006bac:	d00e      	beq.n	8006bcc <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bae:	f06f 0204 	mvn.w	r2, #4
 8006bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006bc0:	d05f      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff ffce 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	f012 0f08 	tst.w	r2, #8
 8006bd4:	d012      	beq.n	8006bfc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	f012 0f08 	tst.w	r2, #8
 8006bdc:	d00e      	beq.n	8006bfc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bde:	f06f 0208 	mvn.w	r2, #8
 8006be2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006be4:	2304      	movs	r3, #4
 8006be6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006be8:	6823      	ldr	r3, [r4, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f013 0f03 	tst.w	r3, #3
 8006bf0:	d04e      	beq.n	8006c90 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7ff ffb6 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	691a      	ldr	r2, [r3, #16]
 8006c00:	f012 0f10 	tst.w	r2, #16
 8006c04:	d012      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	f012 0f10 	tst.w	r2, #16
 8006c0c:	d00e      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c0e:	f06f 0210 	mvn.w	r2, #16
 8006c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c14:	2308      	movs	r3, #8
 8006c16:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006c20:	d03d      	beq.n	8006c9e <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	4620      	mov	r0, r4
 8006c24:	f7ff ff9e 	bl	8006b64 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	f012 0f01 	tst.w	r2, #1
 8006c34:	d003      	beq.n	8006c3e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	f012 0f01 	tst.w	r2, #1
 8006c3c:	d136      	bne.n	8006cac <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	691a      	ldr	r2, [r3, #16]
 8006c42:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006c46:	d003      	beq.n	8006c50 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c48:	68da      	ldr	r2, [r3, #12]
 8006c4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006c4e:	d134      	bne.n	8006cba <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006c58:	d003      	beq.n	8006c62 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006c60:	d132      	bne.n	8006cc8 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	f012 0f20 	tst.w	r2, #32
 8006c6a:	d003      	beq.n	8006c74 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	f012 0f20 	tst.w	r2, #32
 8006c72:	d130      	bne.n	8006cd6 <HAL_TIM_IRQHandler+0x16c>
}
 8006c74:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c76:	f7ff ff74 	bl	8006b62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff ff73 	bl	8006b66 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c80:	e78a      	b.n	8006b98 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c82:	4620      	mov	r0, r4
 8006c84:	f7ff ff6d 	bl	8006b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7ff ff6c 	bl	8006b66 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c8e:	e79b      	b.n	8006bc8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c90:	4620      	mov	r0, r4
 8006c92:	f7ff ff66 	bl	8006b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7ff ff65 	bl	8006b66 <HAL_TIM_PWM_PulseFinishedCallback>
 8006c9c:	e7ac      	b.n	8006bf8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f7ff ff5f 	bl	8006b62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f7ff ff5e 	bl	8006b66 <HAL_TIM_PWM_PulseFinishedCallback>
 8006caa:	e7bd      	b.n	8006c28 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cac:	f06f 0201 	mvn.w	r2, #1
 8006cb0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f7fc fb40 	bl	8003338 <HAL_TIM_PeriodElapsedCallback>
 8006cb8:	e7c1      	b.n	8006c3e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006cbe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	f000 f9c5 	bl	8007050 <HAL_TIMEx_BreakCallback>
 8006cc6:	e7c3      	b.n	8006c50 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ccc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7ff ff4a 	bl	8006b68 <HAL_TIM_TriggerCallback>
 8006cd4:	e7c5      	b.n	8006c62 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cd6:	f06f 0220 	mvn.w	r2, #32
 8006cda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f000 f9b6 	bl	800704e <HAL_TIMEx_CommutCallback>
}
 8006ce2:	e7c7      	b.n	8006c74 <HAL_TIM_IRQHandler+0x10a>

08006ce4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006ce4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce6:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <TIM_Base_SetConfig+0x98>)
 8006ce8:	4290      	cmp	r0, r2
 8006cea:	d00e      	beq.n	8006d0a <TIM_Base_SetConfig+0x26>
 8006cec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006cf0:	d00b      	beq.n	8006d0a <TIM_Base_SetConfig+0x26>
 8006cf2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006cf6:	4290      	cmp	r0, r2
 8006cf8:	d007      	beq.n	8006d0a <TIM_Base_SetConfig+0x26>
 8006cfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cfe:	4290      	cmp	r0, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_Base_SetConfig+0x26>
 8006d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d06:	4290      	cmp	r0, r2
 8006d08:	d103      	bne.n	8006d12 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006d0e:	684a      	ldr	r2, [r1, #4]
 8006d10:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d12:	4a1a      	ldr	r2, [pc, #104]	; (8006d7c <TIM_Base_SetConfig+0x98>)
 8006d14:	4290      	cmp	r0, r2
 8006d16:	d01a      	beq.n	8006d4e <TIM_Base_SetConfig+0x6a>
 8006d18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006d1c:	d017      	beq.n	8006d4e <TIM_Base_SetConfig+0x6a>
 8006d1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006d22:	4290      	cmp	r0, r2
 8006d24:	d013      	beq.n	8006d4e <TIM_Base_SetConfig+0x6a>
 8006d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d2a:	4290      	cmp	r0, r2
 8006d2c:	d00f      	beq.n	8006d4e <TIM_Base_SetConfig+0x6a>
 8006d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d32:	4290      	cmp	r0, r2
 8006d34:	d00b      	beq.n	8006d4e <TIM_Base_SetConfig+0x6a>
 8006d36:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006d3a:	4290      	cmp	r0, r2
 8006d3c:	d007      	beq.n	8006d4e <TIM_Base_SetConfig+0x6a>
 8006d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d42:	4290      	cmp	r0, r2
 8006d44:	d003      	beq.n	8006d4e <TIM_Base_SetConfig+0x6a>
 8006d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d4a:	4290      	cmp	r0, r2
 8006d4c:	d103      	bne.n	8006d56 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d52:	68ca      	ldr	r2, [r1, #12]
 8006d54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d5a:	694a      	ldr	r2, [r1, #20]
 8006d5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006d5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d60:	688b      	ldr	r3, [r1, #8]
 8006d62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006d64:	680b      	ldr	r3, [r1, #0]
 8006d66:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <TIM_Base_SetConfig+0x98>)
 8006d6a:	4298      	cmp	r0, r3
 8006d6c:	d002      	beq.n	8006d74 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	6143      	str	r3, [r0, #20]
}
 8006d72:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006d74:	690b      	ldr	r3, [r1, #16]
 8006d76:	6303      	str	r3, [r0, #48]	; 0x30
 8006d78:	e7f9      	b.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d7a:	bf00      	nop
 8006d7c:	40010000 	.word	0x40010000

08006d80 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006d80:	b1a8      	cbz	r0, 8006dae <HAL_TIM_Base_Init+0x2e>
{
 8006d82:	b510      	push	{r4, lr}
 8006d84:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d8a:	b15b      	cbz	r3, 8006da4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	2302      	movs	r3, #2
 8006d8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d92:	1d21      	adds	r1, r4, #4
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	f7ff ffa5 	bl	8006ce4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006da0:	2000      	movs	r0, #0
}
 8006da2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006da4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006da8:	f7fc fbfe 	bl	80035a8 <HAL_TIM_Base_MspInit>
 8006dac:	e7ee      	b.n	8006d8c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006dae:	2001      	movs	r0, #1
}
 8006db0:	4770      	bx	lr

08006db2 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006db2:	b1a8      	cbz	r0, 8006de0 <HAL_TIM_PWM_Init+0x2e>
{
 8006db4:	b510      	push	{r4, lr}
 8006db6:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006db8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006dbc:	b15b      	cbz	r3, 8006dd6 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc4:	1d21      	adds	r1, r4, #4
 8006dc6:	6820      	ldr	r0, [r4, #0]
 8006dc8:	f7ff ff8c 	bl	8006ce4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006dd2:	2000      	movs	r0, #0
}
 8006dd4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006dd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006dda:	f7fc fb99 	bl	8003510 <HAL_TIM_PWM_MspInit>
 8006dde:	e7ee      	b.n	8006dbe <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006de0:	2001      	movs	r0, #1
}
 8006de2:	4770      	bx	lr

08006de4 <TIM_OC2_SetConfig>:
{
 8006de4:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de6:	6a03      	ldr	r3, [r0, #32]
 8006de8:	f023 0310 	bic.w	r3, r3, #16
 8006dec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006dee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006df0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006df2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df8:	680d      	ldr	r5, [r1, #0]
 8006dfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006dfe:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e02:	688d      	ldr	r5, [r1, #8]
 8006e04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e08:	4d0e      	ldr	r5, [pc, #56]	; (8006e44 <TIM_OC2_SetConfig+0x60>)
 8006e0a:	42a8      	cmp	r0, r5
 8006e0c:	d009      	beq.n	8006e22 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e0e:	4d0d      	ldr	r5, [pc, #52]	; (8006e44 <TIM_OC2_SetConfig+0x60>)
 8006e10:	42a8      	cmp	r0, r5
 8006e12:	d00e      	beq.n	8006e32 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8006e14:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006e16:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006e18:	684a      	ldr	r2, [r1, #4]
 8006e1a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006e1c:	6203      	str	r3, [r0, #32]
}
 8006e1e:	bc30      	pop	{r4, r5}
 8006e20:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e26:	68cd      	ldr	r5, [r1, #12]
 8006e28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e30:	e7ed      	b.n	8006e0e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e32:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e36:	694d      	ldr	r5, [r1, #20]
 8006e38:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e3c:	698d      	ldr	r5, [r1, #24]
 8006e3e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006e42:	e7e7      	b.n	8006e14 <TIM_OC2_SetConfig+0x30>
 8006e44:	40010000 	.word	0x40010000

08006e48 <HAL_TIM_PWM_ConfigChannel>:
{
 8006e48:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006e4a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d066      	beq.n	8006f20 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8006e52:	460d      	mov	r5, r1
 8006e54:	4604      	mov	r4, r0
 8006e56:	2301      	movs	r3, #1
 8006e58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8006e62:	2a0c      	cmp	r2, #12
 8006e64:	d81a      	bhi.n	8006e9c <HAL_TIM_PWM_ConfigChannel+0x54>
 8006e66:	e8df f002 	tbb	[pc, r2]
 8006e6a:	1907      	.short	0x1907
 8006e6c:	19201919 	.word	0x19201919
 8006e70:	19341919 	.word	0x19341919
 8006e74:	1919      	.short	0x1919
 8006e76:	47          	.byte	0x47
 8006e77:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e78:	6800      	ldr	r0, [r0, #0]
 8006e7a:	f7ff fddd 	bl	8006a38 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	6993      	ldr	r3, [r2, #24]
 8006e82:	f043 0308 	orr.w	r3, r3, #8
 8006e86:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e88:	6822      	ldr	r2, [r4, #0]
 8006e8a:	6993      	ldr	r3, [r2, #24]
 8006e8c:	f023 0304 	bic.w	r3, r3, #4
 8006e90:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e92:	6822      	ldr	r2, [r4, #0]
 8006e94:	6993      	ldr	r3, [r2, #24]
 8006e96:	6929      	ldr	r1, [r5, #16]
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006ea8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	f7ff ff9a 	bl	8006de4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eb0:	6822      	ldr	r2, [r4, #0]
 8006eb2:	6993      	ldr	r3, [r2, #24]
 8006eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006eb8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006eba:	6822      	ldr	r2, [r4, #0]
 8006ebc:	6993      	ldr	r3, [r2, #24]
 8006ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ec2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	6993      	ldr	r3, [r2, #24]
 8006ec8:	6929      	ldr	r1, [r5, #16]
 8006eca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006ece:	6193      	str	r3, [r2, #24]
      break;
 8006ed0:	e7e4      	b.n	8006e9c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ed2:	6800      	ldr	r0, [r0, #0]
 8006ed4:	f7ff fdde 	bl	8006a94 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	69d3      	ldr	r3, [r2, #28]
 8006edc:	f043 0308 	orr.w	r3, r3, #8
 8006ee0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ee2:	6822      	ldr	r2, [r4, #0]
 8006ee4:	69d3      	ldr	r3, [r2, #28]
 8006ee6:	f023 0304 	bic.w	r3, r3, #4
 8006eea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eec:	6822      	ldr	r2, [r4, #0]
 8006eee:	69d3      	ldr	r3, [r2, #28]
 8006ef0:	6929      	ldr	r1, [r5, #16]
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	61d3      	str	r3, [r2, #28]
      break;
 8006ef6:	e7d1      	b.n	8006e9c <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ef8:	6800      	ldr	r0, [r0, #0]
 8006efa:	f7ff fdfd 	bl	8006af8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006efe:	6822      	ldr	r2, [r4, #0]
 8006f00:	69d3      	ldr	r3, [r2, #28]
 8006f02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f06:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	69d3      	ldr	r3, [r2, #28]
 8006f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f10:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	69d3      	ldr	r3, [r2, #28]
 8006f16:	6929      	ldr	r1, [r5, #16]
 8006f18:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006f1c:	61d3      	str	r3, [r2, #28]
      break;
 8006f1e:	e7bd      	b.n	8006e9c <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8006f20:	2002      	movs	r0, #2
 8006f22:	e7c1      	b.n	8006ea8 <HAL_TIM_PWM_ConfigChannel+0x60>

08006f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f24:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f26:	f001 011f 	and.w	r1, r1, #31
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f30:	6a03      	ldr	r3, [r0, #32]
 8006f32:	ea23 0304 	bic.w	r3, r3, r4
 8006f36:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f38:	6a03      	ldr	r3, [r0, #32]
 8006f3a:	408a      	lsls	r2, r1
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	6203      	str	r3, [r0, #32]
}
 8006f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_TIM_PWM_Start>:
{
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	6800      	ldr	r0, [r0, #0]
 8006f50:	f7ff ffe8 	bl	8006f24 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <HAL_TIM_PWM_Start+0x38>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00b      	beq.n	8006f74 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f5c:	6822      	ldr	r2, [r4, #0]
 8006f5e:	6893      	ldr	r3, [r2, #8]
 8006f60:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f64:	2b06      	cmp	r3, #6
 8006f66:	d003      	beq.n	8006f70 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8006f68:	6813      	ldr	r3, [r2, #0]
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	6013      	str	r3, [r2, #0]
}
 8006f70:	2000      	movs	r0, #0
 8006f72:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8006f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44
 8006f7c:	e7ee      	b.n	8006f5c <HAL_TIM_PWM_Start+0x14>
 8006f7e:	bf00      	nop
 8006f80:	40010000 	.word	0x40010000

08006f84 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d033      	beq.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8006f8c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	2302      	movs	r3, #2
 8006f96:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f9a:	6803      	ldr	r3, [r0, #0]
 8006f9c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f9e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fa4:	680a      	ldr	r2, [r1, #0]
 8006fa6:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006faa:	6803      	ldr	r3, [r0, #0]
 8006fac:	4a12      	ldr	r2, [pc, #72]	; (8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d012      	beq.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb6:	d00f      	beq.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006fb8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006fd0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fd8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fdc:	684a      	ldr	r2, [r1, #4]
 8006fde:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fe0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006fee:	4618      	mov	r0, r3
}
 8006ff0:	bc30      	pop	{r4, r5}
 8006ff2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006ff4:	2002      	movs	r0, #2
}
 8006ff6:	4770      	bx	lr
 8006ff8:	40010000 	.word	0x40010000

08006ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ffc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007000:	2b01      	cmp	r3, #1
 8007002:	d022      	beq.n	800704a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8007004:	2301      	movs	r3, #1
 8007006:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800700a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800700c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007010:	688a      	ldr	r2, [r1, #8]
 8007012:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007018:	684a      	ldr	r2, [r1, #4]
 800701a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800701c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007020:	680a      	ldr	r2, [r1, #0]
 8007022:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007028:	690a      	ldr	r2, [r1, #16]
 800702a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800702c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007030:	694a      	ldr	r2, [r1, #20]
 8007032:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007038:	69ca      	ldr	r2, [r1, #28]
 800703a:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800703c:	6802      	ldr	r2, [r0, #0]
 800703e:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007040:	2300      	movs	r3, #0
 8007042:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007046:	4618      	mov	r0, r3
 8007048:	4770      	bx	lr
  __HAL_LOCK(htim);
 800704a:	2002      	movs	r0, #2
}
 800704c:	4770      	bx	lr

0800704e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800704e:	4770      	bx	lr

08007050 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007050:	4770      	bx	lr

08007052 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007052:	6802      	ldr	r2, [r0, #0]
 8007054:	68d3      	ldr	r3, [r2, #12]
 8007056:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800705a:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800705c:	2320      	movs	r3, #32
 800705e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8007062:	4770      	bx	lr

08007064 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007064:	6802      	ldr	r2, [r0, #0]
 8007066:	68d3      	ldr	r3, [r2, #12]
 8007068:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800706c:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706e:	6802      	ldr	r2, [r0, #0]
 8007070:	6953      	ldr	r3, [r2, #20]
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007078:	2320      	movs	r3, #32
 800707a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800707e:	4770      	bx	lr

08007080 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007080:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b21      	cmp	r3, #33	; 0x21
 8007088:	d12a      	bne.n	80070e0 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800708a:	6883      	ldr	r3, [r0, #8]
 800708c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007090:	d016      	beq.n	80070c0 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007092:	6a03      	ldr	r3, [r0, #32]
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	6202      	str	r2, [r0, #32]
 8007098:	781a      	ldrb	r2, [r3, #0]
 800709a:	6803      	ldr	r3, [r0, #0]
 800709c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800709e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	84c3      	strh	r3, [r0, #38]	; 0x26
 80070a6:	b9eb      	cbnz	r3, 80070e4 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070a8:	6802      	ldr	r2, [r0, #0]
 80070aa:	68d3      	ldr	r3, [r2, #12]
 80070ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b0:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070b2:	6802      	ldr	r2, [r0, #0]
 80070b4:	68d3      	ldr	r3, [r2, #12]
 80070b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ba:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80070bc:	2000      	movs	r0, #0
 80070be:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80070c0:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	6802      	ldr	r2, [r0, #0]
 80070c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ca:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80070cc:	6903      	ldr	r3, [r0, #16]
 80070ce:	b91b      	cbnz	r3, 80070d8 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80070d0:	6a03      	ldr	r3, [r0, #32]
 80070d2:	3302      	adds	r3, #2
 80070d4:	6203      	str	r3, [r0, #32]
 80070d6:	e7e2      	b.n	800709e <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80070d8:	6a03      	ldr	r3, [r0, #32]
 80070da:	3301      	adds	r3, #1
 80070dc:	6203      	str	r3, [r0, #32]
 80070de:	e7de      	b.n	800709e <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80070e0:	2002      	movs	r0, #2
 80070e2:	4770      	bx	lr
    return HAL_OK;
 80070e4:	2000      	movs	r0, #0
  }
}
 80070e6:	4770      	bx	lr

080070e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070e8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80070ec:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ee:	6802      	ldr	r2, [r0, #0]
 80070f0:	6913      	ldr	r3, [r2, #16]
 80070f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070f6:	68c1      	ldr	r1, [r0, #12]
 80070f8:	430b      	orrs	r3, r1
 80070fa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070fc:	6883      	ldr	r3, [r0, #8]
 80070fe:	6902      	ldr	r2, [r0, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	6942      	ldr	r2, [r0, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	69c2      	ldr	r2, [r0, #28]
 8007108:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800710a:	6801      	ldr	r1, [r0, #0]
 800710c:	68cb      	ldr	r3, [r1, #12]
 800710e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007112:	f023 030c 	bic.w	r3, r3, #12
 8007116:	4313      	orrs	r3, r2
 8007118:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800711a:	6802      	ldr	r2, [r0, #0]
 800711c:	6953      	ldr	r3, [r2, #20]
 800711e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007122:	6981      	ldr	r1, [r0, #24]
 8007124:	430b      	orrs	r3, r1
 8007126:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007128:	69c3      	ldr	r3, [r0, #28]
 800712a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712e:	d03b      	beq.n	80071a8 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007130:	6803      	ldr	r3, [r0, #0]
 8007132:	4a71      	ldr	r2, [pc, #452]	; (80072f8 <UART_SetConfig+0x210>)
 8007134:	4293      	cmp	r3, r2
 8007136:	f000 80ab 	beq.w	8007290 <UART_SetConfig+0x1a8>
 800713a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800713e:	4293      	cmp	r3, r2
 8007140:	f000 80a6 	beq.w	8007290 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007144:	f7fe fdee 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007148:	f04f 0900 	mov.w	r9, #0
 800714c:	1806      	adds	r6, r0, r0
 800714e:	eb49 0709 	adc.w	r7, r9, r9
 8007152:	eb16 0b00 	adds.w	fp, r6, r0
 8007156:	eb47 0c09 	adc.w	ip, r7, r9
 800715a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800715e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007162:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007166:	4693      	mov	fp, r2
 8007168:	469c      	mov	ip, r3
 800716a:	6863      	ldr	r3, [r4, #4]
 800716c:	009a      	lsls	r2, r3, #2
 800716e:	0f9b      	lsrs	r3, r3, #30
 8007170:	eb10 000b 	adds.w	r0, r0, fp
 8007174:	eb49 010c 	adc.w	r1, r9, ip
 8007178:	f7f9 fcc0 	bl	8000afc <__aeabi_uldivmod>
 800717c:	4d5f      	ldr	r5, [pc, #380]	; (80072fc <UART_SetConfig+0x214>)
 800717e:	fba5 3200 	umull	r3, r2, r5, r0
 8007182:	0951      	lsrs	r1, r2, #5
 8007184:	2264      	movs	r2, #100	; 0x64
 8007186:	fb02 0211 	mls	r2, r2, r1, r0
 800718a:	0113      	lsls	r3, r2, #4
 800718c:	3332      	adds	r3, #50	; 0x32
 800718e:	fba5 2303 	umull	r2, r3, r5, r3
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007198:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800719c:	f003 030f 	and.w	r3, r3, #15
 80071a0:	6821      	ldr	r1, [r4, #0]
 80071a2:	4413      	add	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
    }
  }
}
 80071a6:	e0a4      	b.n	80072f2 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071a8:	6803      	ldr	r3, [r0, #0]
 80071aa:	4a53      	ldr	r2, [pc, #332]	; (80072f8 <UART_SetConfig+0x210>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d039      	beq.n	8007224 <UART_SetConfig+0x13c>
 80071b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d035      	beq.n	8007224 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80071b8:	f7fe fdb4 	bl	8005d24 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071bc:	4683      	mov	fp, r0
 80071be:	f04f 0c00 	mov.w	ip, #0
 80071c2:	1806      	adds	r6, r0, r0
 80071c4:	eb4c 070c 	adc.w	r7, ip, ip
 80071c8:	eb16 0800 	adds.w	r8, r6, r0
 80071cc:	eb47 090c 	adc.w	r9, r7, ip
 80071d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071dc:	4690      	mov	r8, r2
 80071de:	4699      	mov	r9, r3
 80071e0:	6862      	ldr	r2, [r4, #4]
 80071e2:	2100      	movs	r1, #0
 80071e4:	1892      	adds	r2, r2, r2
 80071e6:	eb41 0301 	adc.w	r3, r1, r1
 80071ea:	eb1b 0008 	adds.w	r0, fp, r8
 80071ee:	eb4c 0109 	adc.w	r1, ip, r9
 80071f2:	f7f9 fc83 	bl	8000afc <__aeabi_uldivmod>
 80071f6:	4d41      	ldr	r5, [pc, #260]	; (80072fc <UART_SetConfig+0x214>)
 80071f8:	fba5 3200 	umull	r3, r2, r5, r0
 80071fc:	0951      	lsrs	r1, r2, #5
 80071fe:	2264      	movs	r2, #100	; 0x64
 8007200:	fb02 0211 	mls	r2, r2, r1, r0
 8007204:	00d3      	lsls	r3, r2, #3
 8007206:	3332      	adds	r3, #50	; 0x32
 8007208:	fba5 2303 	umull	r2, r3, r5, r3
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	005a      	lsls	r2, r3, #1
 8007210:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007214:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	6821      	ldr	r1, [r4, #0]
 800721e:	4413      	add	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
 8007222:	e066      	b.n	80072f2 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007224:	f7fe fd8e 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007228:	4680      	mov	r8, r0
 800722a:	f04f 0900 	mov.w	r9, #0
 800722e:	1806      	adds	r6, r0, r0
 8007230:	eb49 0709 	adc.w	r7, r9, r9
 8007234:	eb16 0b00 	adds.w	fp, r6, r0
 8007238:	eb47 0c09 	adc.w	ip, r7, r9
 800723c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007240:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007244:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8007248:	4693      	mov	fp, r2
 800724a:	469c      	mov	ip, r3
 800724c:	6862      	ldr	r2, [r4, #4]
 800724e:	2100      	movs	r1, #0
 8007250:	1892      	adds	r2, r2, r2
 8007252:	eb41 0301 	adc.w	r3, r1, r1
 8007256:	eb18 000b 	adds.w	r0, r8, fp
 800725a:	eb49 010c 	adc.w	r1, r9, ip
 800725e:	f7f9 fc4d 	bl	8000afc <__aeabi_uldivmod>
 8007262:	4d26      	ldr	r5, [pc, #152]	; (80072fc <UART_SetConfig+0x214>)
 8007264:	fba5 3200 	umull	r3, r2, r5, r0
 8007268:	0951      	lsrs	r1, r2, #5
 800726a:	2264      	movs	r2, #100	; 0x64
 800726c:	fb02 0211 	mls	r2, r2, r1, r0
 8007270:	00d3      	lsls	r3, r2, #3
 8007272:	3332      	adds	r3, #50	; 0x32
 8007274:	fba5 2303 	umull	r2, r3, r5, r3
 8007278:	095b      	lsrs	r3, r3, #5
 800727a:	005a      	lsls	r2, r3, #1
 800727c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007280:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	6821      	ldr	r1, [r4, #0]
 800728a:	4413      	add	r3, r2
 800728c:	608b      	str	r3, [r1, #8]
 800728e:	e030      	b.n	80072f2 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007290:	f7fe fd58 	bl	8005d44 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007294:	f04f 0900 	mov.w	r9, #0
 8007298:	1806      	adds	r6, r0, r0
 800729a:	eb49 0709 	adc.w	r7, r9, r9
 800729e:	eb16 0b00 	adds.w	fp, r6, r0
 80072a2:	eb47 0c09 	adc.w	ip, r7, r9
 80072a6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80072aa:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80072ae:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80072b2:	4693      	mov	fp, r2
 80072b4:	469c      	mov	ip, r3
 80072b6:	6863      	ldr	r3, [r4, #4]
 80072b8:	009a      	lsls	r2, r3, #2
 80072ba:	0f9b      	lsrs	r3, r3, #30
 80072bc:	eb10 000b 	adds.w	r0, r0, fp
 80072c0:	eb49 010c 	adc.w	r1, r9, ip
 80072c4:	f7f9 fc1a 	bl	8000afc <__aeabi_uldivmod>
 80072c8:	4d0c      	ldr	r5, [pc, #48]	; (80072fc <UART_SetConfig+0x214>)
 80072ca:	fba5 3200 	umull	r3, r2, r5, r0
 80072ce:	0951      	lsrs	r1, r2, #5
 80072d0:	2264      	movs	r2, #100	; 0x64
 80072d2:	fb02 0211 	mls	r2, r2, r1, r0
 80072d6:	0113      	lsls	r3, r2, #4
 80072d8:	3332      	adds	r3, #50	; 0x32
 80072da:	fba5 2303 	umull	r2, r3, r5, r3
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072e4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	6821      	ldr	r1, [r4, #0]
 80072ee:	4413      	add	r3, r2
 80072f0:	608b      	str	r3, [r1, #8]
}
 80072f2:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80072f6:	bf00      	nop
 80072f8:	40011000 	.word	0x40011000
 80072fc:	51eb851f 	.word	0x51eb851f

08007300 <UART_WaitOnFlagUntilTimeout>:
{
 8007300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	4605      	mov	r5, r0
 8007306:	460f      	mov	r7, r1
 8007308:	4616      	mov	r6, r2
 800730a:	4698      	mov	r8, r3
 800730c:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	682b      	ldr	r3, [r5, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	ea37 0303 	bics.w	r3, r7, r3
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	42b3      	cmp	r3, r6
 800731e:	d11d      	bne.n	800735c <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8007320:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007324:	d0f3      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007326:	b12c      	cbz	r4, 8007334 <UART_WaitOnFlagUntilTimeout+0x34>
 8007328:	f7fc ff5e 	bl	80041e8 <HAL_GetTick>
 800732c:	eba0 0008 	sub.w	r0, r0, r8
 8007330:	42a0      	cmp	r0, r4
 8007332:	d9ec      	bls.n	800730e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007334:	682a      	ldr	r2, [r5, #0]
 8007336:	68d3      	ldr	r3, [r2, #12]
 8007338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800733c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800733e:	682a      	ldr	r2, [r5, #0]
 8007340:	6953      	ldr	r3, [r2, #20]
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007348:	2320      	movs	r3, #32
 800734a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800734e:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8007352:	2300      	movs	r3, #0
 8007354:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8007358:	2003      	movs	r0, #3
 800735a:	e000      	b.n	800735e <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 800735c:	2000      	movs	r0, #0
}
 800735e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007362 <HAL_UART_Init>:
  if (huart == NULL)
 8007362:	b358      	cbz	r0, 80073bc <HAL_UART_Init+0x5a>
{
 8007364:	b510      	push	{r4, lr}
 8007366:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007368:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800736c:	b30b      	cbz	r3, 80073b2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800736e:	2324      	movs	r3, #36	; 0x24
 8007370:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007374:	6822      	ldr	r2, [r4, #0]
 8007376:	68d3      	ldr	r3, [r2, #12]
 8007378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800737c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800737e:	4620      	mov	r0, r4
 8007380:	f7ff feb2 	bl	80070e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007384:	6822      	ldr	r2, [r4, #0]
 8007386:	6913      	ldr	r3, [r2, #16]
 8007388:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800738c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	6953      	ldr	r3, [r2, #20]
 8007392:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007396:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	68d3      	ldr	r3, [r2, #12]
 800739c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80073a0:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073a2:	2000      	movs	r0, #0
 80073a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80073a6:	2320      	movs	r3, #32
 80073a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80073ac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80073b0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80073b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80073b6:	f7fc f98f 	bl	80036d8 <HAL_UART_MspInit>
 80073ba:	e7d8      	b.n	800736e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80073bc:	2001      	movs	r0, #1
}
 80073be:	4770      	bx	lr

080073c0 <HAL_UART_Transmit>:
{
 80073c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073c4:	b083      	sub	sp, #12
 80073c6:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80073c8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d156      	bne.n	8007480 <HAL_UART_Transmit+0xc0>
 80073d2:	4604      	mov	r4, r0
 80073d4:	460d      	mov	r5, r1
 80073d6:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80073d8:	2900      	cmp	r1, #0
 80073da:	d056      	beq.n	800748a <HAL_UART_Transmit+0xca>
 80073dc:	2a00      	cmp	r2, #0
 80073de:	d056      	beq.n	800748e <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 80073e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d054      	beq.n	8007492 <HAL_UART_Transmit+0xd2>
 80073e8:	2301      	movs	r3, #1
 80073ea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ee:	f04f 0900 	mov.w	r9, #0
 80073f2:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073f6:	2321      	movs	r3, #33	; 0x21
 80073f8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80073fc:	f7fc fef4 	bl	80041e8 <HAL_GetTick>
 8007400:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8007402:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8007406:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800740a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 800740e:	e010      	b.n	8007432 <HAL_UART_Transmit+0x72>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007410:	9600      	str	r6, [sp, #0]
 8007412:	463b      	mov	r3, r7
 8007414:	2200      	movs	r2, #0
 8007416:	2180      	movs	r1, #128	; 0x80
 8007418:	4620      	mov	r0, r4
 800741a:	f7ff ff71 	bl	8007300 <UART_WaitOnFlagUntilTimeout>
 800741e:	2800      	cmp	r0, #0
 8007420:	d139      	bne.n	8007496 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007422:	882b      	ldrh	r3, [r5, #0]
 8007424:	6822      	ldr	r2, [r4, #0]
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	b9c3      	cbnz	r3, 8007462 <HAL_UART_Transmit+0xa2>
          pData += 2U;
 8007430:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8007432:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007434:	b29b      	uxth	r3, r3
 8007436:	b1b3      	cbz	r3, 8007466 <HAL_UART_Transmit+0xa6>
      huart->TxXferCount--;
 8007438:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800743a:	3b01      	subs	r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007440:	68a3      	ldr	r3, [r4, #8]
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007446:	d0e3      	beq.n	8007410 <HAL_UART_Transmit+0x50>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007448:	9600      	str	r6, [sp, #0]
 800744a:	463b      	mov	r3, r7
 800744c:	2200      	movs	r2, #0
 800744e:	2180      	movs	r1, #128	; 0x80
 8007450:	4620      	mov	r0, r4
 8007452:	f7ff ff55 	bl	8007300 <UART_WaitOnFlagUntilTimeout>
 8007456:	bb00      	cbnz	r0, 800749a <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007458:	782a      	ldrb	r2, [r5, #0]
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	605a      	str	r2, [r3, #4]
 800745e:	3501      	adds	r5, #1
 8007460:	e7e7      	b.n	8007432 <HAL_UART_Transmit+0x72>
          pData += 1U;
 8007462:	3501      	adds	r5, #1
 8007464:	e7e5      	b.n	8007432 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007466:	9600      	str	r6, [sp, #0]
 8007468:	463b      	mov	r3, r7
 800746a:	2200      	movs	r2, #0
 800746c:	2140      	movs	r1, #64	; 0x40
 800746e:	4620      	mov	r0, r4
 8007470:	f7ff ff46 	bl	8007300 <UART_WaitOnFlagUntilTimeout>
 8007474:	4603      	mov	r3, r0
 8007476:	b990      	cbnz	r0, 800749e <HAL_UART_Transmit+0xde>
    huart->gState = HAL_UART_STATE_READY;
 8007478:	2220      	movs	r2, #32
 800747a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    return HAL_OK;
 800747e:	e000      	b.n	8007482 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
}
 8007482:	4618      	mov	r0, r3
 8007484:	b003      	add	sp, #12
 8007486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e7f9      	b.n	8007482 <HAL_UART_Transmit+0xc2>
 800748e:	2301      	movs	r3, #1
 8007490:	e7f7      	b.n	8007482 <HAL_UART_Transmit+0xc2>
    __HAL_LOCK(huart);
 8007492:	2302      	movs	r3, #2
 8007494:	e7f5      	b.n	8007482 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e7f3      	b.n	8007482 <HAL_UART_Transmit+0xc2>
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e7f1      	b.n	8007482 <HAL_UART_Transmit+0xc2>
      return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e7ef      	b.n	8007482 <HAL_UART_Transmit+0xc2>

080074a2 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80074a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d116      	bne.n	80074da <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 80074ac:	b1b9      	cbz	r1, 80074de <HAL_UART_Transmit_IT+0x3c>
 80074ae:	b1c2      	cbz	r2, 80074e2 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 80074b0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d016      	beq.n	80074e6 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 80074b8:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80074ba:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80074bc:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074be:	2300      	movs	r3, #0
 80074c0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074c2:	2221      	movs	r2, #33	; 0x21
 80074c4:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80074c8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80074cc:	6801      	ldr	r1, [r0, #0]
 80074ce:	68ca      	ldr	r2, [r1, #12]
 80074d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074d4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80074d6:	4618      	mov	r0, r3
 80074d8:	4770      	bx	lr
    return HAL_BUSY;
 80074da:	2002      	movs	r0, #2
 80074dc:	4770      	bx	lr
      return HAL_ERROR;
 80074de:	2001      	movs	r0, #1
 80074e0:	4770      	bx	lr
 80074e2:	2001      	movs	r0, #1
 80074e4:	4770      	bx	lr
    __HAL_LOCK(huart);
 80074e6:	2002      	movs	r0, #2
}
 80074e8:	4770      	bx	lr
	...

080074ec <HAL_UART_Receive_DMA>:
{
 80074ec:	b530      	push	{r4, r5, lr}
 80074ee:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80074f0:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80074f4:	b2e4      	uxtb	r4, r4
 80074f6:	2c20      	cmp	r4, #32
 80074f8:	d13d      	bne.n	8007576 <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d03e      	beq.n	800757c <HAL_UART_Receive_DMA+0x90>
 80074fe:	2a00      	cmp	r2, #0
 8007500:	d03e      	beq.n	8007580 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 8007502:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007506:	2b01      	cmp	r3, #1
 8007508:	d03c      	beq.n	8007584 <HAL_UART_Receive_DMA+0x98>
 800750a:	4613      	mov	r3, r2
 800750c:	460a      	mov	r2, r1
 800750e:	4604      	mov	r4, r0
 8007510:	2101      	movs	r1, #1
 8007512:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 8007516:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8007518:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751a:	2500      	movs	r5, #0
 800751c:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800751e:	2122      	movs	r1, #34	; 0x22
 8007520:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007524:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007526:	4818      	ldr	r0, [pc, #96]	; (8007588 <HAL_UART_Receive_DMA+0x9c>)
 8007528:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800752a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752c:	4817      	ldr	r0, [pc, #92]	; (800758c <HAL_UART_Receive_DMA+0xa0>)
 800752e:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007532:	4817      	ldr	r0, [pc, #92]	; (8007590 <HAL_UART_Receive_DMA+0xa4>)
 8007534:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 8007536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007538:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800753a:	6821      	ldr	r1, [r4, #0]
 800753c:	3104      	adds	r1, #4
 800753e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007540:	f7fd f944 	bl	80047cc <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007544:	9501      	str	r5, [sp, #4]
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	9201      	str	r2, [sp, #4]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	9201      	str	r2, [sp, #4]
 8007550:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8007552:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800755c:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	6953      	ldr	r3, [r2, #20]
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	6953      	ldr	r3, [r2, #20]
 800756c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007570:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007572:	4628      	mov	r0, r5
 8007574:	e000      	b.n	8007578 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 8007576:	2002      	movs	r0, #2
}
 8007578:	b003      	add	sp, #12
 800757a:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 800757c:	2001      	movs	r0, #1
 800757e:	e7fb      	b.n	8007578 <HAL_UART_Receive_DMA+0x8c>
 8007580:	2001      	movs	r0, #1
 8007582:	e7f9      	b.n	8007578 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8007584:	2002      	movs	r0, #2
 8007586:	e7f7      	b.n	8007578 <HAL_UART_Receive_DMA+0x8c>
 8007588:	080075fd 	.word	0x080075fd
 800758c:	080076d9 	.word	0x080076d9
 8007590:	080076e5 	.word	0x080076e5

08007594 <HAL_UART_AbortTransmit>:
{
 8007594:	b510      	push	{r4, lr}
 8007596:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007598:	6802      	ldr	r2, [r0, #0]
 800759a:	68d3      	ldr	r3, [r2, #12]
 800759c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075a0:	60d3      	str	r3, [r2, #12]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80075a2:	6803      	ldr	r3, [r0, #0]
 80075a4:	695a      	ldr	r2, [r3, #20]
 80075a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80075aa:	d00b      	beq.n	80075c4 <HAL_UART_AbortTransmit+0x30>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075b2:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 80075b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80075b6:	b12b      	cbz	r3, 80075c4 <HAL_UART_AbortTransmit+0x30>
      huart->hdmatx->XferAbortCallback = NULL;
 80075b8:	2200      	movs	r2, #0
 80075ba:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80075bc:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80075be:	f7fd f93a 	bl	8004836 <HAL_DMA_Abort>
 80075c2:	b928      	cbnz	r0, 80075d0 <HAL_UART_AbortTransmit+0x3c>
  huart->TxXferCount = 0x00U;
 80075c4:	2000      	movs	r0, #0
 80075c6:	84e0      	strh	r0, [r4, #38]	; 0x26
  huart->gState = HAL_UART_STATE_READY;
 80075c8:	2320      	movs	r3, #32
 80075ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80075ce:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80075d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80075d2:	f7fd fa7b 	bl	8004acc <HAL_DMA_GetError>
 80075d6:	2820      	cmp	r0, #32
 80075d8:	d1f4      	bne.n	80075c4 <HAL_UART_AbortTransmit+0x30>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075da:	2310      	movs	r3, #16
 80075dc:	63e3      	str	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 80075de:	2003      	movs	r0, #3
 80075e0:	e7f5      	b.n	80075ce <HAL_UART_AbortTransmit+0x3a>

080075e2 <UART_EndTransmit_IT>:
{
 80075e2:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075e4:	6801      	ldr	r1, [r0, #0]
 80075e6:	68cb      	ldr	r3, [r1, #12]
 80075e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ec:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80075ee:	2320      	movs	r3, #32
 80075f0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80075f4:	f7fb fe86 	bl	8003304 <HAL_UART_TxCpltCallback>
}
 80075f8:	2000      	movs	r0, #0
 80075fa:	bd08      	pop	{r3, pc}

080075fc <UART_DMAReceiveCplt>:
{
 80075fc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007600:	6802      	ldr	r2, [r0, #0]
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007608:	d113      	bne.n	8007632 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 800760a:	2200      	movs	r2, #0
 800760c:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	68ca      	ldr	r2, [r1, #12]
 8007612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007616:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007618:	6819      	ldr	r1, [r3, #0]
 800761a:	694a      	ldr	r2, [r1, #20]
 800761c:	f022 0201 	bic.w	r2, r2, #1
 8007620:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007622:	6819      	ldr	r1, [r3, #0]
 8007624:	694a      	ldr	r2, [r1, #20]
 8007626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762a:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 800762c:	2220      	movs	r2, #32
 800762e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8007632:	4618      	mov	r0, r3
 8007634:	f7fb fe64 	bl	8003300 <HAL_UART_RxCpltCallback>
}
 8007638:	bd08      	pop	{r3, pc}

0800763a <UART_Receive_IT>:
{
 800763a:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800763c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b22      	cmp	r3, #34	; 0x22
 8007644:	d145      	bne.n	80076d2 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007646:	6883      	ldr	r3, [r0, #8]
 8007648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800764c:	d00e      	beq.n	800766c <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800764e:	6903      	ldr	r3, [r0, #16]
 8007650:	bb03      	cbnz	r3, 8007694 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007652:	6803      	ldr	r3, [r0, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007658:	1c59      	adds	r1, r3, #1
 800765a:	6281      	str	r1, [r0, #40]	; 0x28
 800765c:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800765e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007660:	3b01      	subs	r3, #1
 8007662:	b29b      	uxth	r3, r3
 8007664:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007666:	b1f3      	cbz	r3, 80076a6 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8007668:	2000      	movs	r0, #0
 800766a:	e033      	b.n	80076d4 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800766c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800766e:	6903      	ldr	r3, [r0, #16]
 8007670:	b943      	cbnz	r3, 8007684 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007672:	6803      	ldr	r3, [r0, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800767c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800767e:	3302      	adds	r3, #2
 8007680:	6283      	str	r3, [r0, #40]	; 0x28
 8007682:	e7ec      	b.n	800765e <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007684:	6803      	ldr	r3, [r0, #0]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800768c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800768e:	3301      	adds	r3, #1
 8007690:	6283      	str	r3, [r0, #40]	; 0x28
 8007692:	e7e4      	b.n	800765e <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007694:	6803      	ldr	r3, [r0, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800769a:	1c51      	adds	r1, r2, #1
 800769c:	6281      	str	r1, [r0, #40]	; 0x28
 800769e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a2:	7013      	strb	r3, [r2, #0]
 80076a4:	e7db      	b.n	800765e <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076a6:	6802      	ldr	r2, [r0, #0]
 80076a8:	68d3      	ldr	r3, [r2, #12]
 80076aa:	f023 0320 	bic.w	r3, r3, #32
 80076ae:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076b0:	6802      	ldr	r2, [r0, #0]
 80076b2:	68d3      	ldr	r3, [r2, #12]
 80076b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b8:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076ba:	6802      	ldr	r2, [r0, #0]
 80076bc:	6953      	ldr	r3, [r2, #20]
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80076c4:	2320      	movs	r3, #32
 80076c6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80076ca:	f7fb fe19 	bl	8003300 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80076ce:	2000      	movs	r0, #0
 80076d0:	e000      	b.n	80076d4 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80076d2:	2002      	movs	r0, #2
}
 80076d4:	bd08      	pop	{r3, pc}

080076d6 <HAL_UART_RxHalfCpltCallback>:
}
 80076d6:	4770      	bx	lr

080076d8 <UART_DMARxHalfCplt>:
{
 80076d8:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80076da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80076dc:	f7ff fffb 	bl	80076d6 <HAL_UART_RxHalfCpltCallback>
}
 80076e0:	bd08      	pop	{r3, pc}

080076e2 <HAL_UART_ErrorCallback>:
}
 80076e2:	4770      	bx	lr

080076e4 <UART_DMAError>:
{
 80076e4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076e8:	6823      	ldr	r3, [r4, #0]
 80076ea:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076ec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b21      	cmp	r3, #33	; 0x21
 80076f4:	d010      	beq.n	8007718 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	695a      	ldr	r2, [r3, #20]
 80076fa:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076fe:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b22      	cmp	r3, #34	; 0x22
 8007706:	d011      	beq.n	800772c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800770a:	f043 0310 	orr.w	r3, r3, #16
 800770e:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8007710:	4620      	mov	r0, r4
 8007712:	f7ff ffe6 	bl	80076e2 <HAL_UART_ErrorCallback>
}
 8007716:	bd10      	pop	{r4, pc}
 8007718:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800771c:	2a00      	cmp	r2, #0
 800771e:	d0ea      	beq.n	80076f6 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8007720:	2300      	movs	r3, #0
 8007722:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007724:	4620      	mov	r0, r4
 8007726:	f7ff fc94 	bl	8007052 <UART_EndTxTransfer>
 800772a:	e7e4      	b.n	80076f6 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800772c:	2a00      	cmp	r2, #0
 800772e:	d0eb      	beq.n	8007708 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8007730:	2300      	movs	r3, #0
 8007732:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007734:	4620      	mov	r0, r4
 8007736:	f7ff fc95 	bl	8007064 <UART_EndRxTransfer>
 800773a:	e7e5      	b.n	8007708 <UART_DMAError+0x24>

0800773c <HAL_UART_IRQHandler>:
{
 800773c:	b510      	push	{r4, lr}
 800773e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007740:	6802      	ldr	r2, [r0, #0]
 8007742:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007744:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007746:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8007748:	f013 000f 	ands.w	r0, r3, #15
 800774c:	d105      	bne.n	800775a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800774e:	f013 0f20 	tst.w	r3, #32
 8007752:	d002      	beq.n	800775a <HAL_UART_IRQHandler+0x1e>
 8007754:	f011 0f20 	tst.w	r1, #32
 8007758:	d156      	bne.n	8007808 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800775a:	2800      	cmp	r0, #0
 800775c:	d06a      	beq.n	8007834 <HAL_UART_IRQHandler+0xf8>
 800775e:	f012 0201 	ands.w	r2, r2, #1
 8007762:	d102      	bne.n	800776a <HAL_UART_IRQHandler+0x2e>
 8007764:	f411 7f90 	tst.w	r1, #288	; 0x120
 8007768:	d064      	beq.n	8007834 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800776a:	f013 0f01 	tst.w	r3, #1
 800776e:	d006      	beq.n	800777e <HAL_UART_IRQHandler+0x42>
 8007770:	f411 7f80 	tst.w	r1, #256	; 0x100
 8007774:	d003      	beq.n	800777e <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007776:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007778:	f040 0001 	orr.w	r0, r0, #1
 800777c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800777e:	f013 0f04 	tst.w	r3, #4
 8007782:	d004      	beq.n	800778e <HAL_UART_IRQHandler+0x52>
 8007784:	b11a      	cbz	r2, 800778e <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007786:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007788:	f040 0002 	orr.w	r0, r0, #2
 800778c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800778e:	f013 0f02 	tst.w	r3, #2
 8007792:	d004      	beq.n	800779e <HAL_UART_IRQHandler+0x62>
 8007794:	b11a      	cbz	r2, 800779e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007796:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007798:	f040 0004 	orr.w	r0, r0, #4
 800779c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800779e:	f013 0f08 	tst.w	r3, #8
 80077a2:	d007      	beq.n	80077b4 <HAL_UART_IRQHandler+0x78>
 80077a4:	f011 0f20 	tst.w	r1, #32
 80077a8:	d100      	bne.n	80077ac <HAL_UART_IRQHandler+0x70>
 80077aa:	b11a      	cbz	r2, 80077b4 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80077ae:	f042 0208 	orr.w	r2, r2, #8
 80077b2:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d048      	beq.n	800784c <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077ba:	f013 0f20 	tst.w	r3, #32
 80077be:	d002      	beq.n	80077c6 <HAL_UART_IRQHandler+0x8a>
 80077c0:	f011 0f20 	tst.w	r1, #32
 80077c4:	d124      	bne.n	8007810 <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80077d0:	f012 0f08 	tst.w	r2, #8
 80077d4:	d100      	bne.n	80077d8 <HAL_UART_IRQHandler+0x9c>
 80077d6:	b33b      	cbz	r3, 8007828 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 80077d8:	4620      	mov	r0, r4
 80077da:	f7ff fc43 	bl	8007064 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80077e6:	d01b      	beq.n	8007820 <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ee:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80077f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077f2:	b18b      	cbz	r3, 8007818 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077f4:	4a1a      	ldr	r2, [pc, #104]	; (8007860 <HAL_UART_IRQHandler+0x124>)
 80077f6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80077fa:	f7fd f866 	bl	80048ca <HAL_DMA_Abort_IT>
 80077fe:	b328      	cbz	r0, 800784c <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007800:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007802:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007804:	4798      	blx	r3
 8007806:	e021      	b.n	800784c <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 8007808:	4620      	mov	r0, r4
 800780a:	f7ff ff16 	bl	800763a <UART_Receive_IT>
      return;
 800780e:	e01d      	b.n	800784c <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 8007810:	4620      	mov	r0, r4
 8007812:	f7ff ff12 	bl	800763a <UART_Receive_IT>
 8007816:	e7d6      	b.n	80077c6 <HAL_UART_IRQHandler+0x8a>
            HAL_UART_ErrorCallback(huart);
 8007818:	4620      	mov	r0, r4
 800781a:	f7ff ff62 	bl	80076e2 <HAL_UART_ErrorCallback>
 800781e:	e015      	b.n	800784c <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 8007820:	4620      	mov	r0, r4
 8007822:	f7ff ff5e 	bl	80076e2 <HAL_UART_ErrorCallback>
 8007826:	e011      	b.n	800784c <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 8007828:	4620      	mov	r0, r4
 800782a:	f7ff ff5a 	bl	80076e2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782e:	2300      	movs	r3, #0
 8007830:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007832:	e00b      	b.n	800784c <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007834:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007838:	d002      	beq.n	8007840 <HAL_UART_IRQHandler+0x104>
 800783a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800783e:	d106      	bne.n	800784e <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007840:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007844:	d002      	beq.n	800784c <HAL_UART_IRQHandler+0x110>
 8007846:	f011 0f40 	tst.w	r1, #64	; 0x40
 800784a:	d104      	bne.n	8007856 <HAL_UART_IRQHandler+0x11a>
}
 800784c:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 800784e:	4620      	mov	r0, r4
 8007850:	f7ff fc16 	bl	8007080 <UART_Transmit_IT>
    return;
 8007854:	e7fa      	b.n	800784c <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 8007856:	4620      	mov	r0, r4
 8007858:	f7ff fec3 	bl	80075e2 <UART_EndTransmit_IT>
    return;
 800785c:	e7f6      	b.n	800784c <HAL_UART_IRQHandler+0x110>
 800785e:	bf00      	nop
 8007860:	08007865 	.word	0x08007865

08007864 <UART_DMAAbortOnError>:
{
 8007864:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007866:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8007868:	2300      	movs	r3, #0
 800786a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800786c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800786e:	f7ff ff38 	bl	80076e2 <HAL_UART_ErrorCallback>
}
 8007872:	bd08      	pop	{r3, pc}

08007874 <HAL_UART_AbortReceiveCpltCallback>:
}
 8007874:	4770      	bx	lr
	...

08007878 <HAL_UART_AbortReceive_IT>:
{
 8007878:	b510      	push	{r4, lr}
 800787a:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800787c:	6802      	ldr	r2, [r0, #0]
 800787e:	68d3      	ldr	r3, [r2, #12]
 8007880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007884:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007886:	6802      	ldr	r2, [r0, #0]
 8007888:	6953      	ldr	r3, [r2, #20]
 800788a:	f023 0301 	bic.w	r3, r3, #1
 800788e:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	6803      	ldr	r3, [r0, #0]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007898:	d018      	beq.n	80078cc <HAL_UART_AbortReceive_IT+0x54>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789a:	695a      	ldr	r2, [r3, #20]
 800789c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a0:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 80078a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80078a4:	b153      	cbz	r3, 80078bc <HAL_UART_AbortReceive_IT+0x44>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80078a6:	4a0d      	ldr	r2, [pc, #52]	; (80078dc <HAL_UART_AbortReceive_IT+0x64>)
 80078a8:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078aa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80078ac:	f7fd f80d 	bl	80048ca <HAL_DMA_Abort_IT>
 80078b0:	b110      	cbz	r0, 80078b8 <HAL_UART_AbortReceive_IT+0x40>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80078b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80078b6:	4798      	blx	r3
}
 80078b8:	2000      	movs	r0, #0
 80078ba:	bd10      	pop	{r4, pc}
      huart->RxXferCount = 0x00U;
 80078bc:	2300      	movs	r3, #0
 80078be:	85c3      	strh	r3, [r0, #46]	; 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 80078c0:	2320      	movs	r3, #32
 80078c2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_AbortReceiveCpltCallback(huart);
 80078c6:	f7ff ffd5 	bl	8007874 <HAL_UART_AbortReceiveCpltCallback>
 80078ca:	e7f5      	b.n	80078b8 <HAL_UART_AbortReceive_IT+0x40>
    huart->RxXferCount = 0x00U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	85c3      	strh	r3, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 80078d0:	2320      	movs	r3, #32
 80078d2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    HAL_UART_AbortReceiveCpltCallback(huart);
 80078d6:	f7ff ffcd 	bl	8007874 <HAL_UART_AbortReceiveCpltCallback>
 80078da:	e7ed      	b.n	80078b8 <HAL_UART_AbortReceive_IT+0x40>
 80078dc:	080078e1 	.word	0x080078e1

080078e0 <UART_DMARxOnlyAbortCallback>:
{
 80078e0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 80078e8:	2320      	movs	r3, #32
 80078ea:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  HAL_UART_AbortReceiveCpltCallback(huart);
 80078ee:	f7ff ffc1 	bl	8007874 <HAL_UART_AbortReceiveCpltCallback>
}
 80078f2:	bd08      	pop	{r3, pc}

080078f4 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80078f4:	2884      	cmp	r0, #132	; 0x84
 80078f6:	d001      	beq.n	80078fc <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80078f8:	3003      	adds	r0, #3
 80078fa:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078fc:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80078fe:	4770      	bx	lr

08007900 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007900:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007902:	f000 ff25 	bl	8008750 <vTaskStartScheduler>
  
  return osOK;
}
 8007906:	2000      	movs	r0, #0
 8007908:	bd08      	pop	{r3, pc}

0800790a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800790a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800790e:	b087      	sub	sp, #28
 8007910:	4604      	mov	r4, r0
 8007912:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007914:	6945      	ldr	r5, [r0, #20]
 8007916:	b1a5      	cbz	r5, 8007942 <osThreadCreate+0x38>
 8007918:	6986      	ldr	r6, [r0, #24]
 800791a:	b196      	cbz	r6, 8007942 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800791c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8007920:	f8d0 9000 	ldr.w	r9, [r0]
 8007924:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8007928:	f7ff ffe4 	bl	80078f4 <makeFreeRtosPriority>
 800792c:	6922      	ldr	r2, [r4, #16]
 800792e:	9602      	str	r6, [sp, #8]
 8007930:	9501      	str	r5, [sp, #4]
 8007932:	9000      	str	r0, [sp, #0]
 8007934:	463b      	mov	r3, r7
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	f000 fe9b 	bl	8008674 <xTaskCreateStatic>
 800793e:	9005      	str	r0, [sp, #20]
 8007940:	e013      	b.n	800796a <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007942:	6865      	ldr	r5, [r4, #4]
 8007944:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007946:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800794a:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 800794e:	f7ff ffd1 	bl	80078f4 <makeFreeRtosPriority>
 8007952:	ab05      	add	r3, sp, #20
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	9000      	str	r0, [sp, #0]
 8007958:	463b      	mov	r3, r7
 800795a:	fa1f f288 	uxth.w	r2, r8
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	f000 fec1 	bl	80086e8 <xTaskCreate>
 8007966:	2801      	cmp	r0, #1
 8007968:	d103      	bne.n	8007972 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800796a:	9805      	ldr	r0, [sp, #20]
}
 800796c:	b007      	add	sp, #28
 800796e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8007972:	2000      	movs	r0, #0
 8007974:	e7fa      	b.n	800796c <osThreadCreate+0x62>

08007976 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007976:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007978:	4603      	mov	r3, r0
 800797a:	b900      	cbnz	r0, 800797e <osDelay+0x8>
 800797c:	2301      	movs	r3, #1
 800797e:	4618      	mov	r0, r3
 8007980:	f001 f898 	bl	8008ab4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007984:	2000      	movs	r0, #0
 8007986:	bd08      	pop	{r3, pc}

08007988 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007988:	b510      	push	{r4, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800798e:	6844      	ldr	r4, [r0, #4]
 8007990:	b16c      	cbz	r4, 80079ae <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8007992:	2901      	cmp	r1, #1
 8007994:	d009      	beq.n	80079aa <osTimerCreate+0x22>
 8007996:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8007998:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 800799a:	9401      	str	r4, [sp, #4]
 800799c:	9100      	str	r1, [sp, #0]
 800799e:	2101      	movs	r1, #1
 80079a0:	4809      	ldr	r0, [pc, #36]	; (80079c8 <osTimerCreate+0x40>)
 80079a2:	f001 fc73 	bl	800928c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80079a6:	b002      	add	sp, #8
 80079a8:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 80079aa:	2201      	movs	r2, #1
 80079ac:	e7f4      	b.n	8007998 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 80079ae:	2901      	cmp	r1, #1
 80079b0:	d007      	beq.n	80079c2 <osTimerCreate+0x3a>
 80079b2:	2200      	movs	r2, #0
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80079b4:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 80079b6:	9100      	str	r1, [sp, #0]
 80079b8:	2101      	movs	r1, #1
 80079ba:	4803      	ldr	r0, [pc, #12]	; (80079c8 <osTimerCreate+0x40>)
 80079bc:	f001 fc4a 	bl	8009254 <xTimerCreate>
 80079c0:	e7f1      	b.n	80079a6 <osTimerCreate+0x1e>
 80079c2:	2201      	movs	r2, #1
 80079c4:	e7f6      	b.n	80079b4 <osTimerCreate+0x2c>
 80079c6:	bf00      	nop
 80079c8:	0800a73c 	.word	0x0800a73c

080079cc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80079cc:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80079ce:	6841      	ldr	r1, [r0, #4]
 80079d0:	b119      	cbz	r1, 80079da <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80079d2:	2001      	movs	r0, #1
 80079d4:	f000 fa8f 	bl	8007ef6 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80079d8:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 80079da:	2001      	movs	r0, #1
 80079dc:	f000 fa80 	bl	8007ee0 <xQueueCreateMutex>
 80079e0:	e7fa      	b.n	80079d8 <osMutexCreate+0xc>

080079e2 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079e2:	f100 0308 	add.w	r3, r0, #8
 80079e6:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80079e8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ec:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079ee:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80079f6:	4770      	bx	lr

080079f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80079fc:	4770      	bx	lr

080079fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80079fe:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007a00:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007a0a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007a0c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007a0e:	6803      	ldr	r3, [r0, #0]
 8007a10:	3301      	adds	r3, #1
 8007a12:	6003      	str	r3, [r0, #0]
}
 8007a14:	4770      	bx	lr

08007a16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007a16:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007a18:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a1a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007a1e:	d002      	beq.n	8007a26 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a20:	f100 0208 	add.w	r2, r0, #8
 8007a24:	e002      	b.n	8007a2c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a26:	6902      	ldr	r2, [r0, #16]
 8007a28:	e004      	b.n	8007a34 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	6853      	ldr	r3, [r2, #4]
 8007a2e:	681c      	ldr	r4, [r3, #0]
 8007a30:	42ac      	cmp	r4, r5
 8007a32:	d9fa      	bls.n	8007a2a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a34:	6853      	ldr	r3, [r2, #4]
 8007a36:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a38:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a3a:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a3c:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a3e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8007a40:	6803      	ldr	r3, [r0, #0]
 8007a42:	3301      	adds	r3, #1
 8007a44:	6003      	str	r3, [r0, #0]
}
 8007a46:	bc30      	pop	{r4, r5}
 8007a48:	4770      	bx	lr

08007a4a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a4a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a4c:	6842      	ldr	r2, [r0, #4]
 8007a4e:	6881      	ldr	r1, [r0, #8]
 8007a50:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a52:	6882      	ldr	r2, [r0, #8]
 8007a54:	6841      	ldr	r1, [r0, #4]
 8007a56:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a58:	685a      	ldr	r2, [r3, #4]
 8007a5a:	4282      	cmp	r2, r0
 8007a5c:	d006      	beq.n	8007a6c <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a5e:	2200      	movs	r2, #0
 8007a60:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	3a01      	subs	r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a68:	6818      	ldr	r0, [r3, #0]
}
 8007a6a:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a6c:	6882      	ldr	r2, [r0, #8]
 8007a6e:	605a      	str	r2, [r3, #4]
 8007a70:	e7f5      	b.n	8007a5e <uxListRemove+0x14>

08007a72 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a74:	b123      	cbz	r3, 8007a80 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a76:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007a78:	6818      	ldr	r0, [r3, #0]
 8007a7a:	f1c0 0007 	rsb	r0, r0, #7
 8007a7e:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007a80:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8007a82:	4770      	bx	lr

08007a84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a84:	b510      	push	{r4, lr}
 8007a86:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a88:	f001 fe14 	bl	80096b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d004      	beq.n	8007a9e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8007a94:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8007a96:	f001 fe2f 	bl	80096f8 <vPortExitCritical>

	return xReturn;
}
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007a9e:	2401      	movs	r4, #1
 8007aa0:	e7f9      	b.n	8007a96 <prvIsQueueFull+0x12>

08007aa2 <prvIsQueueEmpty>:
{
 8007aa2:	b510      	push	{r4, lr}
 8007aa4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007aa6:	f001 fe05 	bl	80096b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007aac:	b123      	cbz	r3, 8007ab8 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8007aae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007ab0:	f001 fe22 	bl	80096f8 <vPortExitCritical>
}
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8007ab8:	2401      	movs	r4, #1
 8007aba:	e7f9      	b.n	8007ab0 <prvIsQueueEmpty+0xe>

08007abc <prvCopyDataToQueue>:
{
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ac2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ac4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007ac6:	b95a      	cbnz	r2, 8007ae0 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ac8:	6803      	ldr	r3, [r0, #0]
 8007aca:	b11b      	cbz	r3, 8007ad4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8007acc:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ace:	3501      	adds	r5, #1
 8007ad0:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ad4:	6880      	ldr	r0, [r0, #8]
 8007ad6:	f001 f9ab 	bl	8008e30 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	e7f6      	b.n	8007ace <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8007ae0:	b96e      	cbnz	r6, 8007afe <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ae2:	6840      	ldr	r0, [r0, #4]
 8007ae4:	f002 f882 	bl	8009bec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ae8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007af0:	68a2      	ldr	r2, [r4, #8]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d319      	bcc.n	8007b2a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007afa:	2000      	movs	r0, #0
 8007afc:	e7e7      	b.n	8007ace <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007afe:	68c0      	ldr	r0, [r0, #12]
 8007b00:	f002 f874 	bl	8009bec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007b06:	4252      	negs	r2, r2
 8007b08:	68e3      	ldr	r3, [r4, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b0e:	6821      	ldr	r1, [r4, #0]
 8007b10:	428b      	cmp	r3, r1
 8007b12:	d202      	bcs.n	8007b1a <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b14:	68a3      	ldr	r3, [r4, #8]
 8007b16:	441a      	add	r2, r3
 8007b18:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007b1a:	2e02      	cmp	r6, #2
 8007b1c:	d001      	beq.n	8007b22 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e7d5      	b.n	8007ace <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b22:	b125      	cbz	r5, 8007b2e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8007b24:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8007b26:	2000      	movs	r0, #0
 8007b28:	e7d1      	b.n	8007ace <prvCopyDataToQueue+0x12>
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e7cf      	b.n	8007ace <prvCopyDataToQueue+0x12>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	e7cd      	b.n	8007ace <prvCopyDataToQueue+0x12>

08007b32 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b32:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007b34:	b172      	cbz	r2, 8007b54 <prvCopyDataFromQueue+0x22>
{
 8007b36:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b38:	68c3      	ldr	r3, [r0, #12]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b3e:	6884      	ldr	r4, [r0, #8]
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d301      	bcc.n	8007b48 <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b44:	6803      	ldr	r3, [r0, #0]
 8007b46:	60c3      	str	r3, [r0, #12]
 8007b48:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b4a:	68c1      	ldr	r1, [r0, #12]
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	f002 f84d 	bl	8009bec <memcpy>
}
 8007b52:	bd10      	pop	{r4, pc}
 8007b54:	4770      	bx	lr

08007b56 <prvUnlockQueue>:
{
 8007b56:	b538      	push	{r3, r4, r5, lr}
 8007b58:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8007b5a:	f001 fdab 	bl	80096b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007b5e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8007b62:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b64:	e003      	b.n	8007b6e <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8007b66:	f001 f8eb 	bl	8008d40 <vTaskMissedYield>
			--cTxLock;
 8007b6a:	3c01      	subs	r4, #1
 8007b6c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	dd08      	ble.n	8007b84 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b74:	b133      	cbz	r3, 8007b84 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b76:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007b7a:	f001 f84f 	bl	8008c1c <xTaskRemoveFromEventList>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0f3      	beq.n	8007b6a <prvUnlockQueue+0x14>
 8007b82:	e7f0      	b.n	8007b66 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8007b84:	23ff      	movs	r3, #255	; 0xff
 8007b86:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007b8a:	f001 fdb5 	bl	80096f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007b8e:	f001 fd91 	bl	80096b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007b92:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8007b96:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b98:	e003      	b.n	8007ba2 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8007b9a:	f001 f8d1 	bl	8008d40 <vTaskMissedYield>
				--cRxLock;
 8007b9e:	3c01      	subs	r4, #1
 8007ba0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ba2:	2c00      	cmp	r4, #0
 8007ba4:	dd08      	ble.n	8007bb8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba6:	692b      	ldr	r3, [r5, #16]
 8007ba8:	b133      	cbz	r3, 8007bb8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007baa:	f105 0010 	add.w	r0, r5, #16
 8007bae:	f001 f835 	bl	8008c1c <xTaskRemoveFromEventList>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d0f3      	beq.n	8007b9e <prvUnlockQueue+0x48>
 8007bb6:	e7f0      	b.n	8007b9a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8007bb8:	23ff      	movs	r3, #255	; 0xff
 8007bba:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8007bbe:	f001 fd9b 	bl	80096f8 <vPortExitCritical>
}
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}

08007bc4 <xQueueGenericReset>:
{
 8007bc4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8007bc6:	b940      	cbnz	r0, 8007bda <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericReset+0x14>
 8007bda:	4604      	mov	r4, r0
 8007bdc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007bde:	f001 fd69 	bl	80096b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007be2:	6821      	ldr	r1, [r4, #0]
 8007be4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007be6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be8:	fb03 1002 	mla	r0, r3, r2, r1
 8007bec:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007bee:	2000      	movs	r0, #0
 8007bf0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007bf2:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bf4:	3a01      	subs	r2, #1
 8007bf6:	fb02 1303 	mla	r3, r2, r3, r1
 8007bfa:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007bfc:	23ff      	movs	r3, #255	; 0xff
 8007bfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007c06:	b9a5      	cbnz	r5, 8007c32 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	b91b      	cbnz	r3, 8007c14 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8007c0c:	f001 fd74 	bl	80096f8 <vPortExitCritical>
}
 8007c10:	2001      	movs	r0, #1
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c14:	f104 0010 	add.w	r0, r4, #16
 8007c18:	f001 f800 	bl	8008c1c <xTaskRemoveFromEventList>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d0f5      	beq.n	8007c0c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8007c20:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <xQueueGenericReset+0x80>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	e7ec      	b.n	8007c0c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c32:	f104 0010 	add.w	r0, r4, #16
 8007c36:	f7ff fed4 	bl	80079e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c3e:	f7ff fed0 	bl	80079e2 <vListInitialise>
 8007c42:	e7e3      	b.n	8007c0c <xQueueGenericReset+0x48>
 8007c44:	e000ed04 	.word	0xe000ed04

08007c48 <prvInitialiseNewQueue>:
{
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	461d      	mov	r5, r3
 8007c4c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c4e:	460b      	mov	r3, r1
 8007c50:	b149      	cbz	r1, 8007c66 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c52:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8007c54:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c56:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	f7ff ffb2 	bl	8007bc4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007c60:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 8007c64:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c66:	6024      	str	r4, [r4, #0]
 8007c68:	e7f4      	b.n	8007c54 <prvInitialiseNewQueue+0xc>

08007c6a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c6a:	b940      	cbnz	r0, 8007c7e <xQueueGenericCreateStatic+0x14>
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	e7fe      	b.n	8007c7c <xQueueGenericCreateStatic+0x12>
	{
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8007c84:	b153      	cbz	r3, 8007c9c <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007c86:	b192      	cbz	r2, 8007cae <xQueueGenericCreateStatic+0x44>
 8007c88:	b989      	cbnz	r1, 8007cae <xQueueGenericCreateStatic+0x44>
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	e7fe      	b.n	8007c9a <xQueueGenericCreateStatic+0x30>
 8007c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca0:	f383 8811 	msr	BASEPRI, r3
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	e7fe      	b.n	8007cac <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007cae:	b94a      	cbnz	r2, 8007cc4 <xQueueGenericCreateStatic+0x5a>
 8007cb0:	b141      	cbz	r1, 8007cc4 <xQueueGenericCreateStatic+0x5a>
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	e7fe      	b.n	8007cc2 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007cc4:	2050      	movs	r0, #80	; 0x50
 8007cc6:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007cc8:	9803      	ldr	r0, [sp, #12]
 8007cca:	2850      	cmp	r0, #80	; 0x50
 8007ccc:	d008      	beq.n	8007ce0 <xQueueGenericCreateStatic+0x76>
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	e7fe      	b.n	8007cde <xQueueGenericCreateStatic+0x74>
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ce4:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007cec:	9400      	str	r4, [sp, #0]
 8007cee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007cf2:	f7ff ffa9 	bl	8007c48 <prvInitialiseNewQueue>
	}
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	b004      	add	sp, #16
 8007cfa:	bd10      	pop	{r4, pc}

08007cfc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cfc:	b940      	cbnz	r0, 8007d10 <xQueueGenericCreate+0x14>
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	e7fe      	b.n	8007d0e <xQueueGenericCreate+0x12>
	{
 8007d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d12:	b083      	sub	sp, #12
 8007d14:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8007d16:	b111      	cbz	r1, 8007d1e <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d18:	fb01 f000 	mul.w	r0, r1, r0
 8007d1c:	e000      	b.n	8007d20 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8007d1e:	2000      	movs	r0, #0
 8007d20:	4617      	mov	r7, r2
 8007d22:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007d24:	3050      	adds	r0, #80	; 0x50
 8007d26:	f001 fe7b 	bl	8009a20 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	b150      	cbz	r0, 8007d44 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d34:	9000      	str	r0, [sp, #0]
 8007d36:	463b      	mov	r3, r7
 8007d38:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8007d3c:	4621      	mov	r1, r4
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f7ff ff82 	bl	8007c48 <prvInitialiseNewQueue>
	}
 8007d44:	4628      	mov	r0, r5
 8007d46:	b003      	add	sp, #12
 8007d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007d4c <xQueueGenericSend>:
{
 8007d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007d52:	b160      	cbz	r0, 8007d6e <xQueueGenericSend+0x22>
 8007d54:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d56:	b999      	cbnz	r1, 8007d80 <xQueueGenericSend+0x34>
 8007d58:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007d5a:	b18a      	cbz	r2, 8007d80 <xQueueGenericSend+0x34>
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	e7fe      	b.n	8007d6c <xQueueGenericSend+0x20>
 8007d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	e7fe      	b.n	8007d7e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d10b      	bne.n	8007d9c <xQueueGenericSend+0x50>
 8007d84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007d86:	2a01      	cmp	r2, #1
 8007d88:	d008      	beq.n	8007d9c <xQueueGenericSend+0x50>
 8007d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	e7fe      	b.n	8007d9a <xQueueGenericSend+0x4e>
 8007d9c:	461e      	mov	r6, r3
 8007d9e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007da0:	f000 ffda 	bl	8008d58 <xTaskGetSchedulerState>
 8007da4:	b950      	cbnz	r0, 8007dbc <xQueueGenericSend+0x70>
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	b153      	cbz	r3, 8007dc0 <xQueueGenericSend+0x74>
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	e7fe      	b.n	8007dba <xQueueGenericSend+0x6e>
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	e03a      	b.n	8007e36 <xQueueGenericSend+0xea>
 8007dc0:	2500      	movs	r5, #0
 8007dc2:	e038      	b.n	8007e36 <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f7ff fe77 	bl	8007abc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dd0:	b94b      	cbnz	r3, 8007de6 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8007dd2:	b1a8      	cbz	r0, 8007e00 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8007dd4:	4b3b      	ldr	r3, [pc, #236]	; (8007ec4 <xQueueGenericSend+0x178>)
 8007dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	e00c      	b.n	8007e00 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007de6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007dea:	f000 ff17 	bl	8008c1c <xTaskRemoveFromEventList>
 8007dee:	b138      	cbz	r0, 8007e00 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8007df0:	4b34      	ldr	r3, [pc, #208]	; (8007ec4 <xQueueGenericSend+0x178>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007e00:	f001 fc7a 	bl	80096f8 <vPortExitCritical>
				return pdPASS;
 8007e04:	2001      	movs	r0, #1
}
 8007e06:	b005      	add	sp, #20
 8007e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8007e0a:	f001 fc75 	bl	80096f8 <vPortExitCritical>
					return errQUEUE_FULL;
 8007e0e:	2000      	movs	r0, #0
 8007e10:	e7f9      	b.n	8007e06 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e12:	a802      	add	r0, sp, #8
 8007e14:	f000 ff48 	bl	8008ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e18:	2501      	movs	r5, #1
 8007e1a:	e019      	b.n	8007e50 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007e22:	e021      	b.n	8007e68 <xQueueGenericSend+0x11c>
 8007e24:	2300      	movs	r3, #0
 8007e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e2a:	e023      	b.n	8007e74 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff fe92 	bl	8007b56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e32:	f000 fd73 	bl	800891c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007e36:	f001 fc3d 	bl	80096b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e3a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007e3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d3c0      	bcc.n	8007dc4 <xQueueGenericSend+0x78>
 8007e42:	2e02      	cmp	r6, #2
 8007e44:	d0be      	beq.n	8007dc4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e46:	9b01      	ldr	r3, [sp, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0de      	beq.n	8007e0a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8007e4c:	2d00      	cmp	r5, #0
 8007e4e:	d0e0      	beq.n	8007e12 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8007e50:	f001 fc52 	bl	80096f8 <vPortExitCritical>
		vTaskSuspendAll();
 8007e54:	f000 fcc8 	bl	80087e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e58:	f001 fc2c 	bl	80096b4 <vPortEnterCritical>
 8007e5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e60:	b25b      	sxtb	r3, r3
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d0d9      	beq.n	8007e1c <xQueueGenericSend+0xd0>
 8007e68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007e6c:	b25b      	sxtb	r3, r3
 8007e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e72:	d0d7      	beq.n	8007e24 <xQueueGenericSend+0xd8>
 8007e74:	f001 fc40 	bl	80096f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e78:	a901      	add	r1, sp, #4
 8007e7a:	a802      	add	r0, sp, #8
 8007e7c:	f000 ff20 	bl	8008cc0 <xTaskCheckForTimeOut>
 8007e80:	b9c8      	cbnz	r0, 8007eb6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff fdfe 	bl	8007a84 <prvIsQueueFull>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d0cf      	beq.n	8007e2c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007e8c:	9901      	ldr	r1, [sp, #4]
 8007e8e:	f104 0010 	add.w	r0, r4, #16
 8007e92:	f000 fe8f 	bl	8008bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e96:	4620      	mov	r0, r4
 8007e98:	f7ff fe5d 	bl	8007b56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e9c:	f000 fd3e 	bl	800891c <xTaskResumeAll>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	d1c8      	bne.n	8007e36 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8007ea4:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <xQueueGenericSend+0x178>)
 8007ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	e7bf      	b.n	8007e36 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f7ff fe4d 	bl	8007b56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ebc:	f000 fd2e 	bl	800891c <xTaskResumeAll>
			return errQUEUE_FULL;
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	e7a0      	b.n	8007e06 <xQueueGenericSend+0xba>
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8007ec8:	b148      	cbz	r0, 8007ede <prvInitialiseMutex+0x16>
	{
 8007eca:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ecc:	2100      	movs	r1, #0
 8007ece:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007ed0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007ed2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	460a      	mov	r2, r1
 8007ed8:	f7ff ff38 	bl	8007d4c <xQueueGenericSend>
	}
 8007edc:	bd08      	pop	{r3, pc}
 8007ede:	4770      	bx	lr

08007ee0 <xQueueCreateMutex>:
	{
 8007ee0:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	2001      	movs	r0, #1
 8007ee8:	f7ff ff08 	bl	8007cfc <xQueueGenericCreate>
 8007eec:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007eee:	f7ff ffeb 	bl	8007ec8 <prvInitialiseMutex>
	}
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	bd10      	pop	{r4, pc}

08007ef6 <xQueueCreateMutexStatic>:
	{
 8007ef6:	b510      	push	{r4, lr}
 8007ef8:	b082      	sub	sp, #8
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007efa:	9000      	str	r0, [sp, #0]
 8007efc:	460b      	mov	r3, r1
 8007efe:	2200      	movs	r2, #0
 8007f00:	4611      	mov	r1, r2
 8007f02:	2001      	movs	r0, #1
 8007f04:	f7ff feb1 	bl	8007c6a <xQueueGenericCreateStatic>
 8007f08:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007f0a:	f7ff ffdd 	bl	8007ec8 <prvInitialiseMutex>
	}
 8007f0e:	4620      	mov	r0, r4
 8007f10:	b002      	add	sp, #8
 8007f12:	bd10      	pop	{r4, pc}

08007f14 <xQueueGenericSendFromISR>:
{
 8007f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007f18:	b160      	cbz	r0, 8007f34 <xQueueGenericSendFromISR+0x20>
 8007f1a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f1c:	b999      	cbnz	r1, 8007f46 <xQueueGenericSendFromISR+0x32>
 8007f1e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8007f20:	b188      	cbz	r0, 8007f46 <xQueueGenericSendFromISR+0x32>
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	e7fe      	b.n	8007f32 <xQueueGenericSendFromISR+0x1e>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	e7fe      	b.n	8007f44 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d10b      	bne.n	8007f62 <xQueueGenericSendFromISR+0x4e>
 8007f4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f4c:	2801      	cmp	r0, #1
 8007f4e:	d008      	beq.n	8007f62 <xQueueGenericSendFromISR+0x4e>
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	e7fe      	b.n	8007f60 <xQueueGenericSendFromISR+0x4c>
 8007f62:	461f      	mov	r7, r3
 8007f64:	4690      	mov	r8, r2
 8007f66:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f68:	f001 fcce 	bl	8009908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f6c:	f3ef 8611 	mrs	r6, BASEPRI
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d303      	bcc.n	8007f90 <xQueueGenericSendFromISR+0x7c>
 8007f88:	2f02      	cmp	r7, #2
 8007f8a:	d001      	beq.n	8007f90 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	e00f      	b.n	8007fb0 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f90:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8007f94:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f96:	463a      	mov	r2, r7
 8007f98:	4649      	mov	r1, r9
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f7ff fd8e 	bl	8007abc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007fa0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007fa4:	d008      	beq.n	8007fb8 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fa6:	1c6b      	adds	r3, r5, #1
 8007fa8:	b25b      	sxtb	r3, r3
 8007faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8007fae:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007fb0:	f386 8811 	msr	BASEPRI, r6
}
 8007fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fba:	b15b      	cbz	r3, 8007fd4 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fbc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007fc0:	f000 fe2c 	bl	8008c1c <xTaskRemoveFromEventList>
 8007fc4:	b140      	cbz	r0, 8007fd8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8007fc6:	f1b8 0f00 	cmp.w	r8, #0
 8007fca:	d007      	beq.n	8007fdc <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fcc:	2001      	movs	r0, #1
 8007fce:	f8c8 0000 	str.w	r0, [r8]
 8007fd2:	e7ed      	b.n	8007fb0 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	e7eb      	b.n	8007fb0 <xQueueGenericSendFromISR+0x9c>
 8007fd8:	2001      	movs	r0, #1
 8007fda:	e7e9      	b.n	8007fb0 <xQueueGenericSendFromISR+0x9c>
 8007fdc:	2001      	movs	r0, #1
 8007fde:	e7e7      	b.n	8007fb0 <xQueueGenericSendFromISR+0x9c>

08007fe0 <xQueueReceive>:
{
 8007fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007fe6:	b160      	cbz	r0, 8008002 <xQueueReceive+0x22>
 8007fe8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fea:	b999      	cbnz	r1, 8008014 <xQueueReceive+0x34>
 8007fec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007fee:	b18b      	cbz	r3, 8008014 <xQueueReceive+0x34>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	e7fe      	b.n	8008000 <xQueueReceive+0x20>
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	e7fe      	b.n	8008012 <xQueueReceive+0x32>
 8008014:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008016:	f000 fe9f 	bl	8008d58 <xTaskGetSchedulerState>
 800801a:	b950      	cbnz	r0, 8008032 <xQueueReceive+0x52>
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	b153      	cbz	r3, 8008036 <xQueueReceive+0x56>
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	e7fe      	b.n	8008030 <xQueueReceive+0x50>
 8008032:	2600      	movs	r6, #0
 8008034:	e03e      	b.n	80080b4 <xQueueReceive+0xd4>
 8008036:	2600      	movs	r6, #0
 8008038:	e03c      	b.n	80080b4 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800803a:	4639      	mov	r1, r7
 800803c:	4620      	mov	r0, r4
 800803e:	f7ff fd78 	bl	8007b32 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008042:	3d01      	subs	r5, #1
 8008044:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	b923      	cbnz	r3, 8008054 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800804a:	f001 fb55 	bl	80096f8 <vPortExitCritical>
				return pdPASS;
 800804e:	2001      	movs	r0, #1
}
 8008050:	b005      	add	sp, #20
 8008052:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008054:	f104 0010 	add.w	r0, r4, #16
 8008058:	f000 fde0 	bl	8008c1c <xTaskRemoveFromEventList>
 800805c:	2800      	cmp	r0, #0
 800805e:	d0f4      	beq.n	800804a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8008060:	4b34      	ldr	r3, [pc, #208]	; (8008134 <xQueueReceive+0x154>)
 8008062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008066:	601a      	str	r2, [r3, #0]
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	e7eb      	b.n	800804a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8008072:	f001 fb41 	bl	80096f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008076:	2000      	movs	r0, #0
 8008078:	e7ea      	b.n	8008050 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800807a:	a802      	add	r0, sp, #8
 800807c:	f000 fe14 	bl	8008ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008080:	2601      	movs	r6, #1
 8008082:	e021      	b.n	80080c8 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8008084:	2300      	movs	r3, #0
 8008086:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800808a:	e029      	b.n	80080e0 <xQueueReceive+0x100>
 800808c:	2300      	movs	r3, #0
 800808e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008092:	e02b      	b.n	80080ec <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8008094:	4620      	mov	r0, r4
 8008096:	f7ff fd5e 	bl	8007b56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809a:	f000 fc3f 	bl	800891c <xTaskResumeAll>
 800809e:	e009      	b.n	80080b4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7ff fd58 	bl	8007b56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a6:	f000 fc39 	bl	800891c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7ff fcf9 	bl	8007aa2 <prvIsQueueEmpty>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d13d      	bne.n	8008130 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 80080b4:	f001 fafe 	bl	80096b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080ba:	2d00      	cmp	r5, #0
 80080bc:	d1bd      	bne.n	800803a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0d6      	beq.n	8008072 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 80080c4:	2e00      	cmp	r6, #0
 80080c6:	d0d8      	beq.n	800807a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 80080c8:	f001 fb16 	bl	80096f8 <vPortExitCritical>
		vTaskSuspendAll();
 80080cc:	f000 fb8c 	bl	80087e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080d0:	f001 faf0 	bl	80096b4 <vPortEnterCritical>
 80080d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80080d8:	b25b      	sxtb	r3, r3
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d0d1      	beq.n	8008084 <xQueueReceive+0xa4>
 80080e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80080e4:	b25b      	sxtb	r3, r3
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d0cf      	beq.n	800808c <xQueueReceive+0xac>
 80080ec:	f001 fb04 	bl	80096f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080f0:	a901      	add	r1, sp, #4
 80080f2:	a802      	add	r0, sp, #8
 80080f4:	f000 fde4 	bl	8008cc0 <xTaskCheckForTimeOut>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d1d1      	bne.n	80080a0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7ff fcd0 	bl	8007aa2 <prvIsQueueEmpty>
 8008102:	2800      	cmp	r0, #0
 8008104:	d0c6      	beq.n	8008094 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008106:	9901      	ldr	r1, [sp, #4]
 8008108:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800810c:	f000 fd52 	bl	8008bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008110:	4620      	mov	r0, r4
 8008112:	f7ff fd20 	bl	8007b56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008116:	f000 fc01 	bl	800891c <xTaskResumeAll>
 800811a:	2800      	cmp	r0, #0
 800811c:	d1ca      	bne.n	80080b4 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800811e:	4b05      	ldr	r3, [pc, #20]	; (8008134 <xQueueReceive+0x154>)
 8008120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	e7c1      	b.n	80080b4 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8008130:	2000      	movs	r0, #0
 8008132:	e78d      	b.n	8008050 <xQueueReceive+0x70>
 8008134:	e000ed04 	.word	0xe000ed04

08008138 <xQueueSemaphoreTake>:
{
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800813e:	b940      	cbnz	r0, 8008152 <xQueueSemaphoreTake+0x1a>
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	e7fe      	b.n	8008150 <xQueueSemaphoreTake+0x18>
 8008152:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008154:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008156:	b143      	cbz	r3, 800816a <xQueueSemaphoreTake+0x32>
 8008158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	e7fe      	b.n	8008168 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800816a:	f000 fdf5 	bl	8008d58 <xTaskGetSchedulerState>
 800816e:	b950      	cbnz	r0, 8008186 <xQueueSemaphoreTake+0x4e>
 8008170:	9b01      	ldr	r3, [sp, #4]
 8008172:	b15b      	cbz	r3, 800818c <xQueueSemaphoreTake+0x54>
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	e7fe      	b.n	8008184 <xQueueSemaphoreTake+0x4c>
 8008186:	2500      	movs	r5, #0
 8008188:	462e      	mov	r6, r5
 800818a:	e051      	b.n	8008230 <xQueueSemaphoreTake+0xf8>
 800818c:	2500      	movs	r5, #0
 800818e:	462e      	mov	r6, r5
 8008190:	e04e      	b.n	8008230 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008192:	3b01      	subs	r3, #1
 8008194:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	b913      	cbnz	r3, 80081a0 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800819a:	f000 ff01 	bl	8008fa0 <pvTaskIncrementMutexHeldCount>
 800819e:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	b163      	cbz	r3, 80081be <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081a4:	f104 0010 	add.w	r0, r4, #16
 80081a8:	f000 fd38 	bl	8008c1c <xTaskRemoveFromEventList>
 80081ac:	b138      	cbz	r0, 80081be <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 80081ae:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <xQueueSemaphoreTake+0x198>)
 80081b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80081be:	f001 fa9b 	bl	80096f8 <vPortExitCritical>
				return pdPASS;
 80081c2:	2501      	movs	r5, #1
}
 80081c4:	4628      	mov	r0, r5
 80081c6:	b004      	add	sp, #16
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081ca:	b145      	cbz	r5, 80081de <xQueueSemaphoreTake+0xa6>
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	e7fe      	b.n	80081dc <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 80081de:	f001 fa8b 	bl	80096f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80081e2:	e7ef      	b.n	80081c4 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081e4:	a802      	add	r0, sp, #8
 80081e6:	f000 fd5f 	bl	8008ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ea:	2601      	movs	r6, #1
 80081ec:	e02a      	b.n	8008244 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 80081ee:	2300      	movs	r3, #0
 80081f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80081f4:	e032      	b.n	800825c <xQueueSemaphoreTake+0x124>
 80081f6:	2300      	movs	r3, #0
 80081f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081fc:	e034      	b.n	8008268 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 80081fe:	f001 fa59 	bl	80096b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008202:	68a0      	ldr	r0, [r4, #8]
 8008204:	f000 fdb8 	bl	8008d78 <xTaskPriorityInherit>
 8008208:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800820a:	f001 fa75 	bl	80096f8 <vPortExitCritical>
 800820e:	e03b      	b.n	8008288 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff fca0 	bl	8007b56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008216:	f000 fb81 	bl	800891c <xTaskResumeAll>
 800821a:	e009      	b.n	8008230 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff fc9a 	bl	8007b56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008222:	f000 fb7b 	bl	800891c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008226:	4620      	mov	r0, r4
 8008228:	f7ff fc3b 	bl	8007aa2 <prvIsQueueEmpty>
 800822c:	2800      	cmp	r0, #0
 800822e:	d140      	bne.n	80082b2 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8008230:	f001 fa40 	bl	80096b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008234:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1ab      	bne.n	8008192 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800823a:	9b01      	ldr	r3, [sp, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0c4      	beq.n	80081ca <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8008240:	2e00      	cmp	r6, #0
 8008242:	d0cf      	beq.n	80081e4 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8008244:	f001 fa58 	bl	80096f8 <vPortExitCritical>
		vTaskSuspendAll();
 8008248:	f000 face 	bl	80087e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800824c:	f001 fa32 	bl	80096b4 <vPortEnterCritical>
 8008250:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008254:	b25b      	sxtb	r3, r3
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825a:	d0c8      	beq.n	80081ee <xQueueSemaphoreTake+0xb6>
 800825c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008260:	b25b      	sxtb	r3, r3
 8008262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008266:	d0c6      	beq.n	80081f6 <xQueueSemaphoreTake+0xbe>
 8008268:	f001 fa46 	bl	80096f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800826c:	a901      	add	r1, sp, #4
 800826e:	a802      	add	r0, sp, #8
 8008270:	f000 fd26 	bl	8008cc0 <xTaskCheckForTimeOut>
 8008274:	2800      	cmp	r0, #0
 8008276:	d1d1      	bne.n	800821c <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008278:	4620      	mov	r0, r4
 800827a:	f7ff fc12 	bl	8007aa2 <prvIsQueueEmpty>
 800827e:	2800      	cmp	r0, #0
 8008280:	d0c6      	beq.n	8008210 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008282:	6823      	ldr	r3, [r4, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0ba      	beq.n	80081fe <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008288:	9901      	ldr	r1, [sp, #4]
 800828a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800828e:	f000 fc91 	bl	8008bb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008292:	4620      	mov	r0, r4
 8008294:	f7ff fc5f 	bl	8007b56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008298:	f000 fb40 	bl	800891c <xTaskResumeAll>
 800829c:	2800      	cmp	r0, #0
 800829e:	d1c7      	bne.n	8008230 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 80082a0:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <xQueueSemaphoreTake+0x198>)
 80082a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	e7be      	b.n	8008230 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	d086      	beq.n	80081c4 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 80082b6:	f001 f9fd 	bl	80096b4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082ba:	4620      	mov	r0, r4
 80082bc:	f7ff fbd9 	bl	8007a72 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082c0:	4601      	mov	r1, r0
 80082c2:	68a0      	ldr	r0, [r4, #8]
 80082c4:	f000 fe0c 	bl	8008ee0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80082c8:	f001 fa16 	bl	80096f8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80082cc:	2500      	movs	r5, #0
 80082ce:	e779      	b.n	80081c4 <xQueueSemaphoreTake+0x8c>
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082d4:	2300      	movs	r3, #0
 80082d6:	2b07      	cmp	r3, #7
 80082d8:	d80c      	bhi.n	80082f4 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082da:	4a07      	ldr	r2, [pc, #28]	; (80082f8 <vQueueAddToRegistry+0x24>)
 80082dc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80082e0:	b10a      	cbz	r2, 80082e6 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082e2:	3301      	adds	r3, #1
 80082e4:	e7f7      	b.n	80082d6 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082e6:	4a04      	ldr	r2, [pc, #16]	; (80082f8 <vQueueAddToRegistry+0x24>)
 80082e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082f0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082f2:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20003100 	.word	0x20003100

080082fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4604      	mov	r4, r0
 8008300:	460d      	mov	r5, r1
 8008302:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008304:	f001 f9d6 	bl	80096b4 <vPortEnterCritical>
 8008308:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800830c:	b25b      	sxtb	r3, r3
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d00d      	beq.n	8008330 <vQueueWaitForMessageRestricted+0x34>
 8008314:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008318:	b25b      	sxtb	r3, r3
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d00b      	beq.n	8008338 <vQueueWaitForMessageRestricted+0x3c>
 8008320:	f001 f9ea 	bl	80096f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008324:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008326:	b15b      	cbz	r3, 8008340 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008328:	4620      	mov	r0, r4
 800832a:	f7ff fc14 	bl	8007b56 <prvUnlockQueue>
	}
 800832e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008330:	2300      	movs	r3, #0
 8008332:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008336:	e7ed      	b.n	8008314 <vQueueWaitForMessageRestricted+0x18>
 8008338:	2300      	movs	r3, #0
 800833a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800833e:	e7ef      	b.n	8008320 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008340:	4632      	mov	r2, r6
 8008342:	4629      	mov	r1, r5
 8008344:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008348:	f000 fc4c 	bl	8008be4 <vTaskPlaceOnEventListRestricted>
 800834c:	e7ec      	b.n	8008328 <vQueueWaitForMessageRestricted+0x2c>
	...

08008350 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008350:	4b08      	ldr	r3, [pc, #32]	; (8008374 <prvResetNextTaskUnblockTime+0x24>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	b13b      	cbz	r3, 8008368 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <prvResetNextTaskUnblockTime+0x24>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <prvResetNextTaskUnblockTime+0x28>)
 8008364:	601a      	str	r2, [r3, #0]
	}
}
 8008366:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8008368:	4b03      	ldr	r3, [pc, #12]	; (8008378 <prvResetNextTaskUnblockTime+0x28>)
 800836a:	f04f 32ff 	mov.w	r2, #4294967295
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	2000080c 	.word	0x2000080c
 8008378:	200008e4 	.word	0x200008e4

0800837c <prvInitialiseNewTask>:
{
 800837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008380:	4681      	mov	r9, r0
 8008382:	460d      	mov	r5, r1
 8008384:	4617      	mov	r7, r2
 8008386:	469a      	mov	sl, r3
 8008388:	9e08      	ldr	r6, [sp, #32]
 800838a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800838e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	21a5      	movs	r1, #165	; 0xa5
 8008394:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008396:	f001 fc34 	bl	8009c02 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800839a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800839c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80083a0:	3a01      	subs	r2, #1
 80083a2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083a6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80083aa:	6467      	str	r7, [r4, #68]	; 0x44
	if( pcName != NULL )
 80083ac:	b38d      	cbz	r5, 8008412 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ae:	2300      	movs	r3, #0
 80083b0:	2b0f      	cmp	r3, #15
 80083b2:	d807      	bhi.n	80083c4 <prvInitialiseNewTask+0x48>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083b4:	5ce9      	ldrb	r1, [r5, r3]
 80083b6:	18e2      	adds	r2, r4, r3
 80083b8:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80083bc:	5cea      	ldrb	r2, [r5, r3]
 80083be:	b10a      	cbz	r2, 80083c4 <prvInitialiseNewTask+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083c0:	3301      	adds	r3, #1
 80083c2:	e7f5      	b.n	80083b0 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083c4:	2300      	movs	r3, #0
 80083c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083ca:	2e06      	cmp	r6, #6
 80083cc:	d900      	bls.n	80083d0 <prvInitialiseNewTask+0x54>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083ce:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80083d0:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80083d2:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80083d4:	2500      	movs	r5, #0
 80083d6:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083d8:	1d20      	adds	r0, r4, #4
 80083da:	f7ff fb0d 	bl	80079f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083de:	f104 0018 	add.w	r0, r4, #24
 80083e2:	f7ff fb09 	bl	80079f8 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083e6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e8:	f1c6 0607 	rsb	r6, r6, #7
 80083ec:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083ee:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulRunTimeCounter = 0UL;
 80083f0:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ulNotifiedValue = 0;
 80083f2:	65e5      	str	r5, [r4, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083f4:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083f8:	4652      	mov	r2, sl
 80083fa:	4649      	mov	r1, r9
 80083fc:	4638      	mov	r0, r7
 80083fe:	f001 f92f 	bl	8009660 <pxPortInitialiseStack>
 8008402:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008404:	f1b8 0f00 	cmp.w	r8, #0
 8008408:	d001      	beq.n	800840e <prvInitialiseNewTask+0x92>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800840a:	f8c8 4000 	str.w	r4, [r8]
}
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008412:	2300      	movs	r3, #0
 8008414:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008418:	e7d7      	b.n	80083ca <prvInitialiseNewTask+0x4e>
	...

0800841c <prvInitialiseTaskLists>:
{
 800841c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800841e:	2400      	movs	r4, #0
 8008420:	e007      	b.n	8008432 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008422:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008426:	0093      	lsls	r3, r2, #2
 8008428:	480e      	ldr	r0, [pc, #56]	; (8008464 <prvInitialiseTaskLists+0x48>)
 800842a:	4418      	add	r0, r3
 800842c:	f7ff fad9 	bl	80079e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008430:	3401      	adds	r4, #1
 8008432:	2c06      	cmp	r4, #6
 8008434:	d9f5      	bls.n	8008422 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008436:	4d0c      	ldr	r5, [pc, #48]	; (8008468 <prvInitialiseTaskLists+0x4c>)
 8008438:	4628      	mov	r0, r5
 800843a:	f7ff fad2 	bl	80079e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800843e:	4c0b      	ldr	r4, [pc, #44]	; (800846c <prvInitialiseTaskLists+0x50>)
 8008440:	4620      	mov	r0, r4
 8008442:	f7ff face 	bl	80079e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008446:	480a      	ldr	r0, [pc, #40]	; (8008470 <prvInitialiseTaskLists+0x54>)
 8008448:	f7ff facb 	bl	80079e2 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800844c:	4809      	ldr	r0, [pc, #36]	; (8008474 <prvInitialiseTaskLists+0x58>)
 800844e:	f7ff fac8 	bl	80079e2 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008452:	4809      	ldr	r0, [pc, #36]	; (8008478 <prvInitialiseTaskLists+0x5c>)
 8008454:	f7ff fac5 	bl	80079e2 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008458:	4b08      	ldr	r3, [pc, #32]	; (800847c <prvInitialiseTaskLists+0x60>)
 800845a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <prvInitialiseTaskLists+0x64>)
 800845e:	601c      	str	r4, [r3, #0]
}
 8008460:	bd38      	pop	{r3, r4, r5, pc}
 8008462:	bf00      	nop
 8008464:	20000814 	.word	0x20000814
 8008468:	200008bc 	.word	0x200008bc
 800846c:	200008d0 	.word	0x200008d0
 8008470:	200008ec 	.word	0x200008ec
 8008474:	20000918 	.word	0x20000918
 8008478:	20000904 	.word	0x20000904
 800847c:	2000080c 	.word	0x2000080c
 8008480:	20000810 	.word	0x20000810

08008484 <prvAddNewTaskToReadyList>:
{
 8008484:	b510      	push	{r4, lr}
 8008486:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008488:	f001 f914 	bl	80096b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800848c:	4a21      	ldr	r2, [pc, #132]	; (8008514 <prvAddNewTaskToReadyList+0x90>)
 800848e:	6813      	ldr	r3, [r2, #0]
 8008490:	3301      	adds	r3, #1
 8008492:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008494:	4b20      	ldr	r3, [pc, #128]	; (8008518 <prvAddNewTaskToReadyList+0x94>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	b15b      	cbz	r3, 80084b2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800849a:	4b20      	ldr	r3, [pc, #128]	; (800851c <prvAddNewTaskToReadyList+0x98>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	b96b      	cbnz	r3, 80084bc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084a0:	4b1d      	ldr	r3, [pc, #116]	; (8008518 <prvAddNewTaskToReadyList+0x94>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d807      	bhi.n	80084bc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80084ac:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <prvAddNewTaskToReadyList+0x94>)
 80084ae:	601c      	str	r4, [r3, #0]
 80084b0:	e004      	b.n	80084bc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80084b2:	4b19      	ldr	r3, [pc, #100]	; (8008518 <prvAddNewTaskToReadyList+0x94>)
 80084b4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084b6:	6813      	ldr	r3, [r2, #0]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d027      	beq.n	800850c <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 80084bc:	4a18      	ldr	r2, [pc, #96]	; (8008520 <prvAddNewTaskToReadyList+0x9c>)
 80084be:	6813      	ldr	r3, [r2, #0]
 80084c0:	3301      	adds	r3, #1
 80084c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80084c4:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
 80084c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084c8:	2201      	movs	r2, #1
 80084ca:	409a      	lsls	r2, r3
 80084cc:	4915      	ldr	r1, [pc, #84]	; (8008524 <prvAddNewTaskToReadyList+0xa0>)
 80084ce:	6808      	ldr	r0, [r1, #0]
 80084d0:	4302      	orrs	r2, r0
 80084d2:	600a      	str	r2, [r1, #0]
 80084d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80084d8:	009a      	lsls	r2, r3, #2
 80084da:	1d21      	adds	r1, r4, #4
 80084dc:	4812      	ldr	r0, [pc, #72]	; (8008528 <prvAddNewTaskToReadyList+0xa4>)
 80084de:	4410      	add	r0, r2
 80084e0:	f7ff fa8d 	bl	80079fe <vListInsertEnd>
	taskEXIT_CRITICAL();
 80084e4:	f001 f908 	bl	80096f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <prvAddNewTaskToReadyList+0x98>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	b16b      	cbz	r3, 800850a <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <prvAddNewTaskToReadyList+0x94>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d207      	bcs.n	800850a <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <prvAddNewTaskToReadyList+0xa8>)
 80084fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	f3bf 8f6f 	isb	sy
}
 800850a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800850c:	f7ff ff86 	bl	800841c <prvInitialiseTaskLists>
 8008510:	e7d4      	b.n	80084bc <prvAddNewTaskToReadyList+0x38>
 8008512:	bf00      	nop
 8008514:	200008a4 	.word	0x200008a4
 8008518:	20000808 	.word	0x20000808
 800851c:	20000900 	.word	0x20000900
 8008520:	200008b4 	.word	0x200008b4
 8008524:	200008b8 	.word	0x200008b8
 8008528:	20000814 	.word	0x20000814
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <prvDeleteTCB>:
	{
 8008530:	b510      	push	{r4, lr}
 8008532:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008534:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8008538:	b933      	cbnz	r3, 8008548 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800853a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800853c:	f001 faf4 	bl	8009b28 <vPortFree>
				vPortFree( pxTCB );
 8008540:	4620      	mov	r0, r4
 8008542:	f001 faf1 	bl	8009b28 <vPortFree>
	}
 8008546:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008548:	2b01      	cmp	r3, #1
 800854a:	d00a      	beq.n	8008562 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800854c:	2b02      	cmp	r3, #2
 800854e:	d0fa      	beq.n	8008546 <prvDeleteTCB+0x16>
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	e7fe      	b.n	8008560 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8008562:	f001 fae1 	bl	8009b28 <vPortFree>
 8008566:	e7ee      	b.n	8008546 <prvDeleteTCB+0x16>

08008568 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008568:	4b0f      	ldr	r3, [pc, #60]	; (80085a8 <prvCheckTasksWaitingTermination+0x40>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	b1d3      	cbz	r3, 80085a4 <prvCheckTasksWaitingTermination+0x3c>
{
 800856e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8008570:	f001 f8a0 	bl	80096b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008574:	4b0d      	ldr	r3, [pc, #52]	; (80085ac <prvCheckTasksWaitingTermination+0x44>)
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800857a:	1d20      	adds	r0, r4, #4
 800857c:	f7ff fa65 	bl	8007a4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008580:	4a0b      	ldr	r2, [pc, #44]	; (80085b0 <prvCheckTasksWaitingTermination+0x48>)
 8008582:	6813      	ldr	r3, [r2, #0]
 8008584:	3b01      	subs	r3, #1
 8008586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008588:	4a07      	ldr	r2, [pc, #28]	; (80085a8 <prvCheckTasksWaitingTermination+0x40>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	3b01      	subs	r3, #1
 800858e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8008590:	f001 f8b2 	bl	80096f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008594:	4620      	mov	r0, r4
 8008596:	f7ff ffcb 	bl	8008530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800859a:	4b03      	ldr	r3, [pc, #12]	; (80085a8 <prvCheckTasksWaitingTermination+0x40>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e6      	bne.n	8008570 <prvCheckTasksWaitingTermination+0x8>
}
 80085a2:	bd10      	pop	{r4, pc}
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	200008a8 	.word	0x200008a8
 80085ac:	20000918 	.word	0x20000918
 80085b0:	200008a4 	.word	0x200008a4

080085b4 <prvIdleTask>:
{
 80085b4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80085b6:	f7ff ffd7 	bl	8008568 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085ba:	4b06      	ldr	r3, [pc, #24]	; (80085d4 <prvIdleTask+0x20>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d9f9      	bls.n	80085b6 <prvIdleTask+0x2>
				taskYIELD();
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <prvIdleTask+0x24>)
 80085c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	e7f0      	b.n	80085b6 <prvIdleTask+0x2>
 80085d4:	20000814 	.word	0x20000814
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	4604      	mov	r4, r0
 80085e0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085e2:	4b1d      	ldr	r3, [pc, #116]	; (8008658 <prvAddCurrentTaskToDelayedList+0x7c>)
 80085e4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e6:	4b1d      	ldr	r3, [pc, #116]	; (800865c <prvAddCurrentTaskToDelayedList+0x80>)
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	3004      	adds	r0, #4
 80085ec:	f7ff fa2d 	bl	8007a4a <uxListRemove>
 80085f0:	b950      	cbnz	r0, 8008608 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80085f2:	4b1a      	ldr	r3, [pc, #104]	; (800865c <prvAddCurrentTaskToDelayedList+0x80>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	2301      	movs	r3, #1
 80085fa:	fa03 f202 	lsl.w	r2, r3, r2
 80085fe:	4918      	ldr	r1, [pc, #96]	; (8008660 <prvAddCurrentTaskToDelayedList+0x84>)
 8008600:	680b      	ldr	r3, [r1, #0]
 8008602:	ea23 0302 	bic.w	r3, r3, r2
 8008606:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008608:	f1b4 3fff 	cmp.w	r4, #4294967295
 800860c:	d013      	beq.n	8008636 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800860e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008610:	4b12      	ldr	r3, [pc, #72]	; (800865c <prvAddCurrentTaskToDelayedList+0x80>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008616:	42a5      	cmp	r5, r4
 8008618:	d816      	bhi.n	8008648 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800861a:	4b12      	ldr	r3, [pc, #72]	; (8008664 <prvAddCurrentTaskToDelayedList+0x88>)
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	4b0f      	ldr	r3, [pc, #60]	; (800865c <prvAddCurrentTaskToDelayedList+0x80>)
 8008620:	6819      	ldr	r1, [r3, #0]
 8008622:	3104      	adds	r1, #4
 8008624:	f7ff f9f7 	bl	8007a16 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8008628:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <prvAddCurrentTaskToDelayedList+0x8c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	42a3      	cmp	r3, r4
 800862e:	d912      	bls.n	8008656 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8008630:	4b0d      	ldr	r3, [pc, #52]	; (8008668 <prvAddCurrentTaskToDelayedList+0x8c>)
 8008632:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008634:	e00f      	b.n	8008656 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008636:	2e00      	cmp	r6, #0
 8008638:	d0e9      	beq.n	800860e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <prvAddCurrentTaskToDelayedList+0x80>)
 800863c:	6819      	ldr	r1, [r3, #0]
 800863e:	3104      	adds	r1, #4
 8008640:	480a      	ldr	r0, [pc, #40]	; (800866c <prvAddCurrentTaskToDelayedList+0x90>)
 8008642:	f7ff f9dc 	bl	80079fe <vListInsertEnd>
 8008646:	e006      	b.n	8008656 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008648:	4b09      	ldr	r3, [pc, #36]	; (8008670 <prvAddCurrentTaskToDelayedList+0x94>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	4b03      	ldr	r3, [pc, #12]	; (800865c <prvAddCurrentTaskToDelayedList+0x80>)
 800864e:	6819      	ldr	r1, [r3, #0]
 8008650:	3104      	adds	r1, #4
 8008652:	f7ff f9e0 	bl	8007a16 <vListInsert>
}
 8008656:	bd70      	pop	{r4, r5, r6, pc}
 8008658:	2000092c 	.word	0x2000092c
 800865c:	20000808 	.word	0x20000808
 8008660:	200008b8 	.word	0x200008b8
 8008664:	2000080c 	.word	0x2000080c
 8008668:	200008e4 	.word	0x200008e4
 800866c:	20000904 	.word	0x20000904
 8008670:	20000810 	.word	0x20000810

08008674 <xTaskCreateStatic>:
	{
 8008674:	b570      	push	{r4, r5, r6, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800867a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800867c:	b945      	cbnz	r5, 8008690 <xTaskCreateStatic+0x1c>
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	e7fe      	b.n	800868e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008690:	b944      	cbnz	r4, 80086a4 <xTaskCreateStatic+0x30>
 8008692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008696:	f383 8811 	msr	BASEPRI, r3
 800869a:	f3bf 8f6f 	isb	sy
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	e7fe      	b.n	80086a2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80086a4:	2664      	movs	r6, #100	; 0x64
 80086a6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086a8:	9e04      	ldr	r6, [sp, #16]
 80086aa:	2e64      	cmp	r6, #100	; 0x64
 80086ac:	d008      	beq.n	80086c0 <xTaskCreateStatic+0x4c>
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	e7fe      	b.n	80086be <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086c0:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086c2:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086c4:	2502      	movs	r5, #2
 80086c6:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086ca:	2500      	movs	r5, #0
 80086cc:	9503      	str	r5, [sp, #12]
 80086ce:	9402      	str	r4, [sp, #8]
 80086d0:	ad05      	add	r5, sp, #20
 80086d2:	9501      	str	r5, [sp, #4]
 80086d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80086d6:	9500      	str	r5, [sp, #0]
 80086d8:	f7ff fe50 	bl	800837c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086dc:	4620      	mov	r0, r4
 80086de:	f7ff fed1 	bl	8008484 <prvAddNewTaskToReadyList>
	}
 80086e2:	9805      	ldr	r0, [sp, #20]
 80086e4:	b006      	add	sp, #24
 80086e6:	bd70      	pop	{r4, r5, r6, pc}

080086e8 <xTaskCreate>:
	{
 80086e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086ec:	b085      	sub	sp, #20
 80086ee:	4607      	mov	r7, r0
 80086f0:	4688      	mov	r8, r1
 80086f2:	4615      	mov	r5, r2
 80086f4:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086f6:	0090      	lsls	r0, r2, #2
 80086f8:	f001 f992 	bl	8009a20 <pvPortMalloc>
			if( pxStack != NULL )
 80086fc:	b308      	cbz	r0, 8008742 <xTaskCreate+0x5a>
 80086fe:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008700:	2064      	movs	r0, #100	; 0x64
 8008702:	f001 f98d 	bl	8009a20 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008706:	4604      	mov	r4, r0
 8008708:	b1b8      	cbz	r0, 800873a <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800870a:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800870c:	b1e4      	cbz	r4, 8008748 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800870e:	2300      	movs	r3, #0
 8008710:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008714:	9303      	str	r3, [sp, #12]
 8008716:	9402      	str	r4, [sp, #8]
 8008718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	464b      	mov	r3, r9
 8008722:	462a      	mov	r2, r5
 8008724:	4641      	mov	r1, r8
 8008726:	4638      	mov	r0, r7
 8008728:	f7ff fe28 	bl	800837c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800872c:	4620      	mov	r0, r4
 800872e:	f7ff fea9 	bl	8008484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008732:	2001      	movs	r0, #1
	}
 8008734:	b005      	add	sp, #20
 8008736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800873a:	4630      	mov	r0, r6
 800873c:	f001 f9f4 	bl	8009b28 <vPortFree>
 8008740:	e7e4      	b.n	800870c <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008742:	f04f 30ff 	mov.w	r0, #4294967295
 8008746:	e7f5      	b.n	8008734 <xTaskCreate+0x4c>
 8008748:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800874c:	e7f2      	b.n	8008734 <xTaskCreate+0x4c>
	...

08008750 <vTaskStartScheduler>:
{
 8008750:	b510      	push	{r4, lr}
 8008752:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008754:	2400      	movs	r4, #0
 8008756:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008758:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800875a:	aa07      	add	r2, sp, #28
 800875c:	a906      	add	r1, sp, #24
 800875e:	a805      	add	r0, sp, #20
 8008760:	f7fa f9e6 	bl	8002b30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008764:	9b05      	ldr	r3, [sp, #20]
 8008766:	9302      	str	r3, [sp, #8]
 8008768:	9b06      	ldr	r3, [sp, #24]
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	9400      	str	r4, [sp, #0]
 800876e:	4623      	mov	r3, r4
 8008770:	9a07      	ldr	r2, [sp, #28]
 8008772:	4918      	ldr	r1, [pc, #96]	; (80087d4 <vTaskStartScheduler+0x84>)
 8008774:	4818      	ldr	r0, [pc, #96]	; (80087d8 <vTaskStartScheduler+0x88>)
 8008776:	f7ff ff7d 	bl	8008674 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800877a:	b140      	cbz	r0, 800878e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800877c:	f000 fd38 	bl	80091f0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008780:	2801      	cmp	r0, #1
 8008782:	d006      	beq.n	8008792 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008784:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008788:	d01a      	beq.n	80087c0 <vTaskStartScheduler+0x70>
}
 800878a:	b008      	add	sp, #32
 800878c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800878e:	2000      	movs	r0, #0
 8008790:	e7f6      	b.n	8008780 <vTaskStartScheduler+0x30>
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80087a2:	4b0e      	ldr	r3, [pc, #56]	; (80087dc <vTaskStartScheduler+0x8c>)
 80087a4:	f04f 32ff 	mov.w	r2, #4294967295
 80087a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087aa:	4b0d      	ldr	r3, [pc, #52]	; (80087e0 <vTaskStartScheduler+0x90>)
 80087ac:	2201      	movs	r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087b0:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <vTaskStartScheduler+0x94>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80087b6:	f7fa f9b7 	bl	8002b28 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 80087ba:	f001 f81d 	bl	80097f8 <xPortStartScheduler>
 80087be:	e7e4      	b.n	800878a <vTaskStartScheduler+0x3a>
 80087c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	e7fe      	b.n	80087d0 <vTaskStartScheduler+0x80>
 80087d2:	bf00      	nop
 80087d4:	0800a850 	.word	0x0800a850
 80087d8:	080085b5 	.word	0x080085b5
 80087dc:	200008e4 	.word	0x200008e4
 80087e0:	20000900 	.word	0x20000900
 80087e4:	2000092c 	.word	0x2000092c

080087e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80087e8:	4a02      	ldr	r2, [pc, #8]	; (80087f4 <vTaskSuspendAll+0xc>)
 80087ea:	6813      	ldr	r3, [r2, #0]
 80087ec:	3301      	adds	r3, #1
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	200008b0 	.word	0x200008b0

080087f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80087f8:	4b01      	ldr	r3, [pc, #4]	; (8008800 <xTaskGetTickCount+0x8>)
 80087fa:	6818      	ldr	r0, [r3, #0]
}
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	2000092c 	.word	0x2000092c

08008804 <xTaskIncrementTick>:
{
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008806:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <xTaskIncrementTick+0xec>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d164      	bne.n	80088d8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800880e:	4b39      	ldr	r3, [pc, #228]	; (80088f4 <xTaskIncrementTick+0xf0>)
 8008810:	681d      	ldr	r5, [r3, #0]
 8008812:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008814:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008816:	b9c5      	cbnz	r5, 800884a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008818:	4b37      	ldr	r3, [pc, #220]	; (80088f8 <xTaskIncrementTick+0xf4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	b143      	cbz	r3, 8008832 <xTaskIncrementTick+0x2e>
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	e7fe      	b.n	8008830 <xTaskIncrementTick+0x2c>
 8008832:	4a31      	ldr	r2, [pc, #196]	; (80088f8 <xTaskIncrementTick+0xf4>)
 8008834:	6811      	ldr	r1, [r2, #0]
 8008836:	4b31      	ldr	r3, [pc, #196]	; (80088fc <xTaskIncrementTick+0xf8>)
 8008838:	6818      	ldr	r0, [r3, #0]
 800883a:	6010      	str	r0, [r2, #0]
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	4a30      	ldr	r2, [pc, #192]	; (8008900 <xTaskIncrementTick+0xfc>)
 8008840:	6813      	ldr	r3, [r2, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	f7ff fd83 	bl	8008350 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800884a:	4b2e      	ldr	r3, [pc, #184]	; (8008904 <xTaskIncrementTick+0x100>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	42ab      	cmp	r3, r5
 8008850:	d938      	bls.n	80088c4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8008852:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008854:	4b2c      	ldr	r3, [pc, #176]	; (8008908 <xTaskIncrementTick+0x104>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800885e:	009a      	lsls	r2, r3, #2
 8008860:	4b2a      	ldr	r3, [pc, #168]	; (800890c <xTaskIncrementTick+0x108>)
 8008862:	589b      	ldr	r3, [r3, r2]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d93c      	bls.n	80088e2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8008868:	2401      	movs	r4, #1
 800886a:	e03a      	b.n	80088e2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800886c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800886e:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <xTaskIncrementTick+0xf4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	b343      	cbz	r3, 80088c8 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008876:	4b20      	ldr	r3, [pc, #128]	; (80088f8 <xTaskIncrementTick+0xf4>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800887e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8008880:	429d      	cmp	r5, r3
 8008882:	d326      	bcc.n	80088d2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008884:	1d37      	adds	r7, r6, #4
 8008886:	4638      	mov	r0, r7
 8008888:	f7ff f8df 	bl	8007a4a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800888c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800888e:	b11b      	cbz	r3, 8008898 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008890:	f106 0018 	add.w	r0, r6, #24
 8008894:	f7ff f8d9 	bl	8007a4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008898:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800889a:	2201      	movs	r2, #1
 800889c:	409a      	lsls	r2, r3
 800889e:	491c      	ldr	r1, [pc, #112]	; (8008910 <xTaskIncrementTick+0x10c>)
 80088a0:	6808      	ldr	r0, [r1, #0]
 80088a2:	4302      	orrs	r2, r0
 80088a4:	600a      	str	r2, [r1, #0]
 80088a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80088aa:	009a      	lsls	r2, r3, #2
 80088ac:	4639      	mov	r1, r7
 80088ae:	4817      	ldr	r0, [pc, #92]	; (800890c <xTaskIncrementTick+0x108>)
 80088b0:	4410      	add	r0, r2
 80088b2:	f7ff f8a4 	bl	80079fe <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088b6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80088b8:	4b13      	ldr	r3, [pc, #76]	; (8008908 <xTaskIncrementTick+0x104>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088be:	429a      	cmp	r2, r3
 80088c0:	d2d4      	bcs.n	800886c <xTaskIncrementTick+0x68>
 80088c2:	e7d4      	b.n	800886e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 80088c4:	2400      	movs	r4, #0
 80088c6:	e7d2      	b.n	800886e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c8:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <xTaskIncrementTick+0x100>)
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295
 80088ce:	601a      	str	r2, [r3, #0]
					break;
 80088d0:	e7c0      	b.n	8008854 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80088d2:	4a0c      	ldr	r2, [pc, #48]	; (8008904 <xTaskIncrementTick+0x100>)
 80088d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088d6:	e7bd      	b.n	8008854 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80088d8:	4a0e      	ldr	r2, [pc, #56]	; (8008914 <xTaskIncrementTick+0x110>)
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	3301      	adds	r3, #1
 80088de:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80088e0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80088e2:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <xTaskIncrementTick+0x114>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	b103      	cbz	r3, 80088ea <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 80088e8:	2401      	movs	r4, #1
}
 80088ea:	4620      	mov	r0, r4
 80088ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ee:	bf00      	nop
 80088f0:	200008b0 	.word	0x200008b0
 80088f4:	2000092c 	.word	0x2000092c
 80088f8:	2000080c 	.word	0x2000080c
 80088fc:	20000810 	.word	0x20000810
 8008900:	200008e8 	.word	0x200008e8
 8008904:	200008e4 	.word	0x200008e4
 8008908:	20000808 	.word	0x20000808
 800890c:	20000814 	.word	0x20000814
 8008910:	200008b8 	.word	0x200008b8
 8008914:	200008ac 	.word	0x200008ac
 8008918:	20000930 	.word	0x20000930

0800891c <xTaskResumeAll>:
{
 800891c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800891e:	4b33      	ldr	r3, [pc, #204]	; (80089ec <xTaskResumeAll+0xd0>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	b943      	cbnz	r3, 8008936 <xTaskResumeAll+0x1a>
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	e7fe      	b.n	8008934 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8008936:	f000 febd 	bl	80096b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800893a:	4b2c      	ldr	r3, [pc, #176]	; (80089ec <xTaskResumeAll+0xd0>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	3a01      	subs	r2, #1
 8008940:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d14d      	bne.n	80089e4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008948:	4b29      	ldr	r3, [pc, #164]	; (80089f0 <xTaskResumeAll+0xd4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	b923      	cbnz	r3, 8008958 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800894e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008950:	f000 fed2 	bl	80096f8 <vPortExitCritical>
}
 8008954:	4620      	mov	r0, r4
 8008956:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8008958:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800895a:	4b26      	ldr	r3, [pc, #152]	; (80089f4 <xTaskResumeAll+0xd8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	b31b      	cbz	r3, 80089a8 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008960:	4b24      	ldr	r3, [pc, #144]	; (80089f4 <xTaskResumeAll+0xd8>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008966:	f104 0018 	add.w	r0, r4, #24
 800896a:	f7ff f86e 	bl	8007a4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800896e:	1d25      	adds	r5, r4, #4
 8008970:	4628      	mov	r0, r5
 8008972:	f7ff f86a 	bl	8007a4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008978:	2201      	movs	r2, #1
 800897a:	409a      	lsls	r2, r3
 800897c:	491e      	ldr	r1, [pc, #120]	; (80089f8 <xTaskResumeAll+0xdc>)
 800897e:	6808      	ldr	r0, [r1, #0]
 8008980:	4302      	orrs	r2, r0
 8008982:	600a      	str	r2, [r1, #0]
 8008984:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008988:	009a      	lsls	r2, r3, #2
 800898a:	4629      	mov	r1, r5
 800898c:	481b      	ldr	r0, [pc, #108]	; (80089fc <xTaskResumeAll+0xe0>)
 800898e:	4410      	add	r0, r2
 8008990:	f7ff f835 	bl	80079fe <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008994:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008996:	4b1a      	ldr	r3, [pc, #104]	; (8008a00 <xTaskResumeAll+0xe4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899c:	429a      	cmp	r2, r3
 800899e:	d3dc      	bcc.n	800895a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 80089a0:	4b18      	ldr	r3, [pc, #96]	; (8008a04 <xTaskResumeAll+0xe8>)
 80089a2:	2201      	movs	r2, #1
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	e7d8      	b.n	800895a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 80089a8:	b10c      	cbz	r4, 80089ae <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80089aa:	f7ff fcd1 	bl	8008350 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089ae:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <xTaskResumeAll+0xec>)
 80089b0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089b2:	b154      	cbz	r4, 80089ca <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 80089b4:	f7ff ff26 	bl	8008804 <xTaskIncrementTick>
 80089b8:	b110      	cbz	r0, 80089c0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <xTaskResumeAll+0xe8>)
 80089bc:	2201      	movs	r2, #1
 80089be:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089c0:	3c01      	subs	r4, #1
 80089c2:	d1f7      	bne.n	80089b4 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 80089c4:	4b10      	ldr	r3, [pc, #64]	; (8008a08 <xTaskResumeAll+0xec>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80089ca:	4b0e      	ldr	r3, [pc, #56]	; (8008a04 <xTaskResumeAll+0xe8>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	b15b      	cbz	r3, 80089e8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 80089d0:	4b0e      	ldr	r3, [pc, #56]	; (8008a0c <xTaskResumeAll+0xf0>)
 80089d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80089e0:	2401      	movs	r4, #1
 80089e2:	e7b5      	b.n	8008950 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 80089e4:	2400      	movs	r4, #0
 80089e6:	e7b3      	b.n	8008950 <xTaskResumeAll+0x34>
 80089e8:	2400      	movs	r4, #0
 80089ea:	e7b1      	b.n	8008950 <xTaskResumeAll+0x34>
 80089ec:	200008b0 	.word	0x200008b0
 80089f0:	200008a4 	.word	0x200008a4
 80089f4:	200008ec 	.word	0x200008ec
 80089f8:	200008b8 	.word	0x200008b8
 80089fc:	20000814 	.word	0x20000814
 8008a00:	20000808 	.word	0x20000808
 8008a04:	20000930 	.word	0x20000930
 8008a08:	200008ac 	.word	0x200008ac
 8008a0c:	e000ed04 	.word	0xe000ed04

08008a10 <vTaskDelayUntil>:
	{
 8008a10:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8008a12:	b150      	cbz	r0, 8008a2a <vTaskDelayUntil+0x1a>
 8008a14:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8008a16:	b989      	cbnz	r1, 8008a3c <vTaskDelayUntil+0x2c>
 8008a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	e7fe      	b.n	8008a28 <vTaskDelayUntil+0x18>
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	e7fe      	b.n	8008a3a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
 8008a3c:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <vTaskDelayUntil+0x98>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	b143      	cbz	r3, 8008a54 <vTaskDelayUntil+0x44>
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	e7fe      	b.n	8008a52 <vTaskDelayUntil+0x42>
 8008a54:	460c      	mov	r4, r1
		vTaskSuspendAll();
 8008a56:	f7ff fec7 	bl	80087e8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8008a5a:	4b14      	ldr	r3, [pc, #80]	; (8008aac <vTaskDelayUntil+0x9c>)
 8008a5c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008a5e:	682a      	ldr	r2, [r5, #0]
 8008a60:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
 8008a62:	4282      	cmp	r2, r0
 8008a64:	d918      	bls.n	8008a98 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008a66:	42a2      	cmp	r2, r4
 8008a68:	d80c      	bhi.n	8008a84 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
 8008a6a:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
 8008a6c:	f7ff ff56 	bl	800891c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008a70:	b938      	cbnz	r0, 8008a82 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
 8008a72:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <vTaskDelayUntil+0xa0>)
 8008a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	f3bf 8f6f 	isb	sy
	}
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008a84:	42a0      	cmp	r0, r4
 8008a86:	d301      	bcc.n	8008a8c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8008a88:	602c      	str	r4, [r5, #0]
 8008a8a:	e7ef      	b.n	8008a6c <vTaskDelayUntil+0x5c>
 8008a8c:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008a8e:	2100      	movs	r1, #0
 8008a90:	1a20      	subs	r0, r4, r0
 8008a92:	f7ff fda3 	bl	80085dc <prvAddCurrentTaskToDelayedList>
 8008a96:	e7e9      	b.n	8008a6c <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008a98:	42a2      	cmp	r2, r4
 8008a9a:	d801      	bhi.n	8008aa0 <vTaskDelayUntil+0x90>
 8008a9c:	42a0      	cmp	r0, r4
 8008a9e:	d201      	bcs.n	8008aa4 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
 8008aa0:	602c      	str	r4, [r5, #0]
 8008aa2:	e7f4      	b.n	8008a8e <vTaskDelayUntil+0x7e>
 8008aa4:	602c      	str	r4, [r5, #0]
 8008aa6:	e7e1      	b.n	8008a6c <vTaskDelayUntil+0x5c>
 8008aa8:	200008b0 	.word	0x200008b0
 8008aac:	2000092c 	.word	0x2000092c
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vTaskDelay>:
	{
 8008ab4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ab6:	b1a8      	cbz	r0, 8008ae4 <vTaskDelay+0x30>
 8008ab8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8008aba:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <vTaskDelay+0x44>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	b143      	cbz	r3, 8008ad2 <vTaskDelay+0x1e>
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	e7fe      	b.n	8008ad0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008ad2:	f7ff fe89 	bl	80087e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f7ff fd7f 	bl	80085dc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008ade:	f7ff ff1d 	bl	800891c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008ae2:	b938      	cbnz	r0, 8008af4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <vTaskDelay+0x48>)
 8008ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	f3bf 8f6f 	isb	sy
	}
 8008af4:	bd10      	pop	{r4, pc}
 8008af6:	bf00      	nop
 8008af8:	200008b0 	.word	0x200008b0
 8008afc:	e000ed04 	.word	0xe000ed04

08008b00 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b00:	4b26      	ldr	r3, [pc, #152]	; (8008b9c <vTaskSwitchContext+0x9c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	b11b      	cbz	r3, 8008b0e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8008b06:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <vTaskSwitchContext+0xa0>)
 8008b08:	2201      	movs	r2, #1
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	4770      	bx	lr
{
 8008b0e:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8008b10:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <vTaskSwitchContext+0xa0>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8008b16:	f7fa f808 	bl	8002b2a <getRunTimeCounterValue>
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8008b1a:	4b22      	ldr	r3, [pc, #136]	; (8008ba4 <vTaskSwitchContext+0xa4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4298      	cmp	r0, r3
 8008b20:	d905      	bls.n	8008b2e <vTaskSwitchContext+0x2e>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8008b22:	4a21      	ldr	r2, [pc, #132]	; (8008ba8 <vTaskSwitchContext+0xa8>)
 8008b24:	6811      	ldr	r1, [r2, #0]
 8008b26:	1ac3      	subs	r3, r0, r3
 8008b28:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8008b2a:	4413      	add	r3, r2
 8008b2c:	658b      	str	r3, [r1, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8008b2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <vTaskSwitchContext+0xa4>)
 8008b30:	6018      	str	r0, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b32:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <vTaskSwitchContext+0xac>)
 8008b34:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b36:	fab3 f383 	clz	r3, r3
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f1c3 031f 	rsb	r3, r3, #31
 8008b40:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008b44:	008a      	lsls	r2, r1, #2
 8008b46:	491a      	ldr	r1, [pc, #104]	; (8008bb0 <vTaskSwitchContext+0xb0>)
 8008b48:	588a      	ldr	r2, [r1, r2]
 8008b4a:	b942      	cbnz	r2, 8008b5e <vTaskSwitchContext+0x5e>
	__asm volatile
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	e7fe      	b.n	8008b5c <vTaskSwitchContext+0x5c>
 8008b5e:	4814      	ldr	r0, [pc, #80]	; (8008bb0 <vTaskSwitchContext+0xb0>)
 8008b60:	009a      	lsls	r2, r3, #2
 8008b62:	18d4      	adds	r4, r2, r3
 8008b64:	00a1      	lsls	r1, r4, #2
 8008b66:	4401      	add	r1, r0
 8008b68:	684c      	ldr	r4, [r1, #4]
 8008b6a:	6864      	ldr	r4, [r4, #4]
 8008b6c:	604c      	str	r4, [r1, #4]
 8008b6e:	441a      	add	r2, r3
 8008b70:	0091      	lsls	r1, r2, #2
 8008b72:	3108      	adds	r1, #8
 8008b74:	4408      	add	r0, r1
 8008b76:	4284      	cmp	r4, r0
 8008b78:	d009      	beq.n	8008b8e <vTaskSwitchContext+0x8e>
 8008b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008b7e:	009a      	lsls	r2, r3, #2
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <vTaskSwitchContext+0xb0>)
 8008b82:	4413      	add	r3, r2
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <vTaskSwitchContext+0xa8>)
 8008b8a:	601a      	str	r2, [r3, #0]
}
 8008b8c:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b8e:	6861      	ldr	r1, [r4, #4]
 8008b90:	4807      	ldr	r0, [pc, #28]	; (8008bb0 <vTaskSwitchContext+0xb0>)
 8008b92:	2214      	movs	r2, #20
 8008b94:	fb02 0203 	mla	r2, r2, r3, r0
 8008b98:	6051      	str	r1, [r2, #4]
 8008b9a:	e7ee      	b.n	8008b7a <vTaskSwitchContext+0x7a>
 8008b9c:	200008b0 	.word	0x200008b0
 8008ba0:	20000930 	.word	0x20000930
 8008ba4:	200008a0 	.word	0x200008a0
 8008ba8:	20000808 	.word	0x20000808
 8008bac:	200008b8 	.word	0x200008b8
 8008bb0:	20000814 	.word	0x20000814

08008bb4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8008bb4:	b940      	cbnz	r0, 8008bc8 <vTaskPlaceOnEventList+0x14>
 8008bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	e7fe      	b.n	8008bc6 <vTaskPlaceOnEventList+0x12>
{
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <vTaskPlaceOnEventList+0x2c>)
 8008bce:	6819      	ldr	r1, [r3, #0]
 8008bd0:	3118      	adds	r1, #24
 8008bd2:	f7fe ff20 	bl	8007a16 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f7ff fcff 	bl	80085dc <prvAddCurrentTaskToDelayedList>
}
 8008bde:	bd10      	pop	{r4, pc}
 8008be0:	20000808 	.word	0x20000808

08008be4 <vTaskPlaceOnEventListRestricted>:
	{
 8008be4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8008be6:	b940      	cbnz	r0, 8008bfa <vTaskPlaceOnEventListRestricted+0x16>
 8008be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	e7fe      	b.n	8008bf8 <vTaskPlaceOnEventListRestricted+0x14>
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bfe:	4a06      	ldr	r2, [pc, #24]	; (8008c18 <vTaskPlaceOnEventListRestricted+0x34>)
 8008c00:	6811      	ldr	r1, [r2, #0]
 8008c02:	3118      	adds	r1, #24
 8008c04:	f7fe fefb 	bl	80079fe <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8008c08:	b10d      	cbz	r5, 8008c0e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 8008c0a:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f7ff fce3 	bl	80085dc <prvAddCurrentTaskToDelayedList>
	}
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000808 	.word	0x20000808

08008c1c <xTaskRemoveFromEventList>:
{
 8008c1c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1e:	68c3      	ldr	r3, [r0, #12]
 8008c20:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008c22:	b944      	cbnz	r4, 8008c36 <xTaskRemoveFromEventList+0x1a>
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	e7fe      	b.n	8008c34 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c36:	f104 0518 	add.w	r5, r4, #24
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f7fe ff05 	bl	8007a4a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c40:	4b13      	ldr	r3, [pc, #76]	; (8008c90 <xTaskRemoveFromEventList+0x74>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	b9e3      	cbnz	r3, 8008c80 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c46:	1d25      	adds	r5, r4, #4
 8008c48:	4628      	mov	r0, r5
 8008c4a:	f7fe fefe 	bl	8007a4a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c50:	2201      	movs	r2, #1
 8008c52:	409a      	lsls	r2, r3
 8008c54:	490f      	ldr	r1, [pc, #60]	; (8008c94 <xTaskRemoveFromEventList+0x78>)
 8008c56:	6808      	ldr	r0, [r1, #0]
 8008c58:	4302      	orrs	r2, r0
 8008c5a:	600a      	str	r2, [r1, #0]
 8008c5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c60:	009a      	lsls	r2, r3, #2
 8008c62:	4629      	mov	r1, r5
 8008c64:	480c      	ldr	r0, [pc, #48]	; (8008c98 <xTaskRemoveFromEventList+0x7c>)
 8008c66:	4410      	add	r0, r2
 8008c68:	f7fe fec9 	bl	80079fe <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c6e:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <xTaskRemoveFromEventList+0x80>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d908      	bls.n	8008c8a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8008c78:	2001      	movs	r0, #1
 8008c7a:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <xTaskRemoveFromEventList+0x84>)
 8008c7c:	6018      	str	r0, [r3, #0]
}
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c80:	4629      	mov	r1, r5
 8008c82:	4808      	ldr	r0, [pc, #32]	; (8008ca4 <xTaskRemoveFromEventList+0x88>)
 8008c84:	f7fe febb 	bl	80079fe <vListInsertEnd>
 8008c88:	e7f0      	b.n	8008c6c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8008c8a:	2000      	movs	r0, #0
	return xReturn;
 8008c8c:	e7f7      	b.n	8008c7e <xTaskRemoveFromEventList+0x62>
 8008c8e:	bf00      	nop
 8008c90:	200008b0 	.word	0x200008b0
 8008c94:	200008b8 	.word	0x200008b8
 8008c98:	20000814 	.word	0x20000814
 8008c9c:	20000808 	.word	0x20000808
 8008ca0:	20000930 	.word	0x20000930
 8008ca4:	200008ec 	.word	0x200008ec

08008ca8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ca8:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <vTaskInternalSetTimeOutState+0x10>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cae:	4b03      	ldr	r3, [pc, #12]	; (8008cbc <vTaskInternalSetTimeOutState+0x14>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6043      	str	r3, [r0, #4]
}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	200008e8 	.word	0x200008e8
 8008cbc:	2000092c 	.word	0x2000092c

08008cc0 <xTaskCheckForTimeOut>:
{
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8008cc2:	b150      	cbz	r0, 8008cda <xTaskCheckForTimeOut+0x1a>
 8008cc4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8008cc6:	b989      	cbnz	r1, 8008cec <xTaskCheckForTimeOut+0x2c>
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	e7fe      	b.n	8008cd8 <xTaskCheckForTimeOut+0x18>
 8008cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	e7fe      	b.n	8008cea <xTaskCheckForTimeOut+0x2a>
 8008cec:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8008cee:	f000 fce1 	bl	80096b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008cf2:	4b11      	ldr	r3, [pc, #68]	; (8008d38 <xTaskCheckForTimeOut+0x78>)
 8008cf4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cf6:	6868      	ldr	r0, [r5, #4]
 8008cf8:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d00:	d016      	beq.n	8008d30 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d02:	682f      	ldr	r7, [r5, #0]
 8008d04:	4e0d      	ldr	r6, [pc, #52]	; (8008d3c <xTaskCheckForTimeOut+0x7c>)
 8008d06:	6836      	ldr	r6, [r6, #0]
 8008d08:	42b7      	cmp	r7, r6
 8008d0a:	d001      	beq.n	8008d10 <xTaskCheckForTimeOut+0x50>
 8008d0c:	4288      	cmp	r0, r1
 8008d0e:	d911      	bls.n	8008d34 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d803      	bhi.n	8008d1c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8008d14:	2300      	movs	r3, #0
 8008d16:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008d18:	2401      	movs	r4, #1
 8008d1a:	e005      	b.n	8008d28 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d20:	4628      	mov	r0, r5
 8008d22:	f7ff ffc1 	bl	8008ca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d28:	f000 fce6 	bl	80096f8 <vPortExitCritical>
}
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8008d30:	2400      	movs	r4, #0
 8008d32:	e7f9      	b.n	8008d28 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8008d34:	2401      	movs	r4, #1
 8008d36:	e7f7      	b.n	8008d28 <xTaskCheckForTimeOut+0x68>
 8008d38:	2000092c 	.word	0x2000092c
 8008d3c:	200008e8 	.word	0x200008e8

08008d40 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008d40:	4b01      	ldr	r3, [pc, #4]	; (8008d48 <vTaskMissedYield+0x8>)
 8008d42:	2201      	movs	r2, #1
 8008d44:	601a      	str	r2, [r3, #0]
}
 8008d46:	4770      	bx	lr
 8008d48:	20000930 	.word	0x20000930

08008d4c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8008d4c:	4b01      	ldr	r3, [pc, #4]	; (8008d54 <xTaskGetCurrentTaskHandle+0x8>)
 8008d4e:	6818      	ldr	r0, [r3, #0]
	}
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000808 	.word	0x20000808

08008d58 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <xTaskGetSchedulerState+0x18>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	b133      	cbz	r3, 8008d6c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d5e:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <xTaskGetSchedulerState+0x1c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	b10b      	cbz	r3, 8008d68 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d64:	2000      	movs	r0, #0
	}
 8008d66:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8008d68:	2002      	movs	r0, #2
 8008d6a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	4770      	bx	lr
 8008d70:	20000900 	.word	0x20000900
 8008d74:	200008b0 	.word	0x200008b0

08008d78 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d050      	beq.n	8008e1e <xTaskPriorityInherit+0xa6>
	{
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d80:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8008d82:	4928      	ldr	r1, [pc, #160]	; (8008e24 <xTaskPriorityInherit+0xac>)
 8008d84:	6809      	ldr	r1, [r1, #0]
 8008d86:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008d88:	428a      	cmp	r2, r1
 8008d8a:	d23e      	bcs.n	8008e0a <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d8c:	6981      	ldr	r1, [r0, #24]
 8008d8e:	2900      	cmp	r1, #0
 8008d90:	db05      	blt.n	8008d9e <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d92:	4924      	ldr	r1, [pc, #144]	; (8008e24 <xTaskPriorityInherit+0xac>)
 8008d94:	6809      	ldr	r1, [r1, #0]
 8008d96:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008d98:	f1c1 0107 	rsb	r1, r1, #7
 8008d9c:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d9e:	6960      	ldr	r0, [r4, #20]
 8008da0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008da4:	0091      	lsls	r1, r2, #2
 8008da6:	4a20      	ldr	r2, [pc, #128]	; (8008e28 <xTaskPriorityInherit+0xb0>)
 8008da8:	440a      	add	r2, r1
 8008daa:	4290      	cmp	r0, r2
 8008dac:	d005      	beq.n	8008dba <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008dae:	4a1d      	ldr	r2, [pc, #116]	; (8008e24 <xTaskPriorityInherit+0xac>)
 8008db0:	6812      	ldr	r2, [r2, #0]
 8008db2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008db4:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8008db6:	2001      	movs	r0, #1
	}
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dba:	1d25      	adds	r5, r4, #4
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f7fe fe44 	bl	8007a4a <uxListRemove>
 8008dc2:	b968      	cbnz	r0, 8008de0 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008dc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008dc6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8008dca:	008a      	lsls	r2, r1, #2
 8008dcc:	4916      	ldr	r1, [pc, #88]	; (8008e28 <xTaskPriorityInherit+0xb0>)
 8008dce:	588a      	ldr	r2, [r1, r2]
 8008dd0:	b932      	cbnz	r2, 8008de0 <xTaskPriorityInherit+0x68>
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	409a      	lsls	r2, r3
 8008dd6:	4915      	ldr	r1, [pc, #84]	; (8008e2c <xTaskPriorityInherit+0xb4>)
 8008dd8:	680b      	ldr	r3, [r1, #0]
 8008dda:	ea23 0302 	bic.w	r3, r3, r2
 8008dde:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008de0:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <xTaskPriorityInherit+0xac>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008de8:	2401      	movs	r4, #1
 8008dea:	fa04 f203 	lsl.w	r2, r4, r3
 8008dee:	490f      	ldr	r1, [pc, #60]	; (8008e2c <xTaskPriorityInherit+0xb4>)
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	4302      	orrs	r2, r0
 8008df4:	600a      	str	r2, [r1, #0]
 8008df6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008dfa:	009a      	lsls	r2, r3, #2
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	480a      	ldr	r0, [pc, #40]	; (8008e28 <xTaskPriorityInherit+0xb0>)
 8008e00:	4410      	add	r0, r2
 8008e02:	f7fe fdfc 	bl	80079fe <vListInsertEnd>
				xReturn = pdTRUE;
 8008e06:	4620      	mov	r0, r4
 8008e08:	e7d6      	b.n	8008db8 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e0a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <xTaskPriorityInherit+0xac>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d201      	bcs.n	8008e1a <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
 8008e16:	2001      	movs	r0, #1
		return xReturn;
 8008e18:	e7ce      	b.n	8008db8 <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e7cc      	b.n	8008db8 <xTaskPriorityInherit+0x40>
 8008e1e:	2000      	movs	r0, #0
	}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000808 	.word	0x20000808
 8008e28:	20000814 	.word	0x20000814
 8008e2c:	200008b8 	.word	0x200008b8

08008e30 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8008e30:	2800      	cmp	r0, #0
 8008e32:	d049      	beq.n	8008ec8 <xTaskPriorityDisinherit+0x98>
	{
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8008e38:	4a26      	ldr	r2, [pc, #152]	; (8008ed4 <xTaskPriorityDisinherit+0xa4>)
 8008e3a:	6812      	ldr	r2, [r2, #0]
 8008e3c:	4282      	cmp	r2, r0
 8008e3e:	d008      	beq.n	8008e52 <xTaskPriorityDisinherit+0x22>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	e7fe      	b.n	8008e50 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e52:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8008e54:	b942      	cbnz	r2, 8008e68 <xTaskPriorityDisinherit+0x38>
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	e7fe      	b.n	8008e66 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8008e68:	3a01      	subs	r2, #1
 8008e6a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008e6c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8008e6e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008e70:	4288      	cmp	r0, r1
 8008e72:	d02b      	beq.n	8008ecc <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008e74:	bb62      	cbnz	r2, 8008ed0 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e76:	1d25      	adds	r5, r4, #4
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f7fe fde6 	bl	8007a4a <uxListRemove>
 8008e7e:	b970      	cbnz	r0, 8008e9e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008e82:	2314      	movs	r3, #20
 8008e84:	fb03 f302 	mul.w	r3, r3, r2
 8008e88:	4913      	ldr	r1, [pc, #76]	; (8008ed8 <xTaskPriorityDisinherit+0xa8>)
 8008e8a:	58cb      	ldr	r3, [r1, r3]
 8008e8c:	b93b      	cbnz	r3, 8008e9e <xTaskPriorityDisinherit+0x6e>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	fa03 f202 	lsl.w	r2, r3, r2
 8008e94:	4911      	ldr	r1, [pc, #68]	; (8008edc <xTaskPriorityDisinherit+0xac>)
 8008e96:	680b      	ldr	r3, [r1, #0]
 8008e98:	ea23 0302 	bic.w	r3, r3, r2
 8008e9c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e9e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008ea0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea2:	f1c3 0207 	rsb	r2, r3, #7
 8008ea6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ea8:	2401      	movs	r4, #1
 8008eaa:	fa04 f203 	lsl.w	r2, r4, r3
 8008eae:	490b      	ldr	r1, [pc, #44]	; (8008edc <xTaskPriorityDisinherit+0xac>)
 8008eb0:	6808      	ldr	r0, [r1, #0]
 8008eb2:	4302      	orrs	r2, r0
 8008eb4:	600a      	str	r2, [r1, #0]
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	4a07      	ldr	r2, [pc, #28]	; (8008ed8 <xTaskPriorityDisinherit+0xa8>)
 8008eba:	2014      	movs	r0, #20
 8008ebc:	fb00 2003 	mla	r0, r0, r3, r2
 8008ec0:	f7fe fd9d 	bl	80079fe <vListInsertEnd>
					xReturn = pdTRUE;
 8008ec4:	4620      	mov	r0, r4
	}
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8008ec8:	2000      	movs	r0, #0
	}
 8008eca:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e7fa      	b.n	8008ec6 <xTaskPriorityDisinherit+0x96>
 8008ed0:	2000      	movs	r0, #0
		return xReturn;
 8008ed2:	e7f8      	b.n	8008ec6 <xTaskPriorityDisinherit+0x96>
 8008ed4:	20000808 	.word	0x20000808
 8008ed8:	20000814 	.word	0x20000814
 8008edc:	200008b8 	.word	0x200008b8

08008ee0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d055      	beq.n	8008f90 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8008ee8:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8008eea:	b940      	cbnz	r0, 8008efe <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	e7fe      	b.n	8008efc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f00:	428a      	cmp	r2, r1
 8008f02:	d200      	bcs.n	8008f06 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f04:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f08:	4291      	cmp	r1, r2
 8008f0a:	d001      	beq.n	8008f10 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f0c:	2801      	cmp	r0, #1
 8008f0e:	d000      	beq.n	8008f12 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8008f10:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8008f12:	4820      	ldr	r0, [pc, #128]	; (8008f94 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8008f14:	6800      	ldr	r0, [r0, #0]
 8008f16:	4298      	cmp	r0, r3
 8008f18:	d108      	bne.n	8008f2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	e7fe      	b.n	8008f2a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8008f2c:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f2e:	6998      	ldr	r0, [r3, #24]
 8008f30:	2800      	cmp	r0, #0
 8008f32:	db02      	blt.n	8008f3a <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f34:	f1c2 0207 	rsb	r2, r2, #7
 8008f38:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	4816      	ldr	r0, [pc, #88]	; (8008f98 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f3e:	2414      	movs	r4, #20
 8008f40:	fb04 0101 	mla	r1, r4, r1, r0
 8008f44:	428a      	cmp	r2, r1
 8008f46:	d1e3      	bne.n	8008f10 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8008f48:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f4a:	1d1d      	adds	r5, r3, #4
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f7fe fd7c 	bl	8007a4a <uxListRemove>
 8008f52:	b970      	cbnz	r0, 8008f72 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f56:	2314      	movs	r3, #20
 8008f58:	fb03 f302 	mul.w	r3, r3, r2
 8008f5c:	490e      	ldr	r1, [pc, #56]	; (8008f98 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f5e:	58cb      	ldr	r3, [r1, r3]
 8008f60:	b93b      	cbnz	r3, 8008f72 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8008f62:	2301      	movs	r3, #1
 8008f64:	fa03 f202 	lsl.w	r2, r3, r2
 8008f68:	490c      	ldr	r1, [pc, #48]	; (8008f9c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008f6a:	680b      	ldr	r3, [r1, #0]
 8008f6c:	ea23 0302 	bic.w	r3, r3, r2
 8008f70:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 8008f72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f74:	2301      	movs	r3, #1
 8008f76:	4093      	lsls	r3, r2
 8008f78:	4908      	ldr	r1, [pc, #32]	; (8008f9c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8008f7a:	6808      	ldr	r0, [r1, #0]
 8008f7c:	4303      	orrs	r3, r0
 8008f7e:	600b      	str	r3, [r1, #0]
 8008f80:	4629      	mov	r1, r5
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 8008f84:	2014      	movs	r0, #20
 8008f86:	fb00 3002 	mla	r0, r0, r2, r3
 8008f8a:	f7fe fd38 	bl	80079fe <vListInsertEnd>
	}
 8008f8e:	e7bf      	b.n	8008f10 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000808 	.word	0x20000808
 8008f98:	20000814 	.word	0x20000814
 8008f9c:	200008b8 	.word	0x200008b8

08008fa0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <pvTaskIncrementMutexHeldCount+0x18>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	b123      	cbz	r3, 8008fb0 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008fa6:	4b04      	ldr	r3, [pc, #16]	; (8008fb8 <pvTaskIncrementMutexHeldCount+0x18>)
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008fac:	3301      	adds	r3, #1
 8008fae:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
 8008fb0:	4b01      	ldr	r3, [pc, #4]	; (8008fb8 <pvTaskIncrementMutexHeldCount+0x18>)
 8008fb2:	6818      	ldr	r0, [r3, #0]
	}
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000808 	.word	0x20000808

08008fbc <ulTaskNotifyTake>:
	{
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	460c      	mov	r4, r1
		taskENTER_CRITICAL();
 8008fc2:	f000 fb77 	bl	80096b4 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008fc6:	4b19      	ldr	r3, [pc, #100]	; (800902c <ulTaskNotifyTake+0x70>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fcc:	b92b      	cbnz	r3, 8008fda <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008fce:	4b17      	ldr	r3, [pc, #92]	; (800902c <ulTaskNotifyTake+0x70>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8008fd8:	b9ac      	cbnz	r4, 8009006 <ulTaskNotifyTake+0x4a>
		taskEXIT_CRITICAL();
 8008fda:	f000 fb8d 	bl	80096f8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8008fde:	f000 fb69 	bl	80096b4 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008fe2:	4b12      	ldr	r3, [pc, #72]	; (800902c <ulTaskNotifyTake+0x70>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
			if( ulReturn != 0UL )
 8008fe8:	b124      	cbz	r4, 8008ff4 <ulTaskNotifyTake+0x38>
				if( xClearCountOnExit != pdFALSE )
 8008fea:	b9cd      	cbnz	r5, 8009020 <ulTaskNotifyTake+0x64>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008fec:	4b0f      	ldr	r3, [pc, #60]	; (800902c <ulTaskNotifyTake+0x70>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	1e62      	subs	r2, r4, #1
 8008ff2:	65da      	str	r2, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <ulTaskNotifyTake+0x70>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8008ffe:	f000 fb7b 	bl	80096f8 <vPortExitCritical>
	}
 8009002:	4620      	mov	r0, r4
 8009004:	bd38      	pop	{r3, r4, r5, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009006:	4611      	mov	r1, r2
 8009008:	4620      	mov	r0, r4
 800900a:	f7ff fae7 	bl	80085dc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800900e:	4b08      	ldr	r3, [pc, #32]	; (8009030 <ulTaskNotifyTake+0x74>)
 8009010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	e7dc      	b.n	8008fda <ulTaskNotifyTake+0x1e>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <ulTaskNotifyTake+0x70>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2200      	movs	r2, #0
 8009026:	65da      	str	r2, [r3, #92]	; 0x5c
 8009028:	e7e4      	b.n	8008ff4 <ulTaskNotifyTake+0x38>
 800902a:	bf00      	nop
 800902c:	20000808 	.word	0x20000808
 8009030:	e000ed04 	.word	0xe000ed04

08009034 <xTaskNotifyWait>:
	{
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	4607      	mov	r7, r0
 8009038:	460d      	mov	r5, r1
 800903a:	4614      	mov	r4, r2
 800903c:	461e      	mov	r6, r3
		taskENTER_CRITICAL();
 800903e:	f000 fb39 	bl	80096b4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009042:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <xTaskNotifyWait+0x90>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d00a      	beq.n	8009066 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009050:	4b1c      	ldr	r3, [pc, #112]	; (80090c4 <xTaskNotifyWait+0x90>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8009056:	ea20 0007 	bic.w	r0, r0, r7
 800905a:	65d0      	str	r0, [r2, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8009064:	b9ce      	cbnz	r6, 800909a <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 8009066:	f000 fb47 	bl	80096f8 <vPortExitCritical>
		taskENTER_CRITICAL();
 800906a:	f000 fb23 	bl	80096b4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800906e:	b11c      	cbz	r4, 8009078 <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009070:	4b14      	ldr	r3, [pc, #80]	; (80090c4 <xTaskNotifyWait+0x90>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009076:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009078:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <xTaskNotifyWait+0x90>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b02      	cmp	r3, #2
 8009084:	d016      	beq.n	80090b4 <xTaskNotifyWait+0x80>
				xReturn = pdFALSE;
 8009086:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009088:	4b0e      	ldr	r3, [pc, #56]	; (80090c4 <xTaskNotifyWait+0x90>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8009092:	f000 fb31 	bl	80096f8 <vPortExitCritical>
	}
 8009096:	4620      	mov	r0, r4
 8009098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800909a:	4611      	mov	r1, r2
 800909c:	4630      	mov	r0, r6
 800909e:	f7ff fa9d 	bl	80085dc <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <xTaskNotifyWait+0x94>)
 80090a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	e7d8      	b.n	8009066 <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80090b4:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <xTaskNotifyWait+0x90>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80090ba:	ea23 0505 	bic.w	r5, r3, r5
 80090be:	65d5      	str	r5, [r2, #92]	; 0x5c
				xReturn = pdTRUE;
 80090c0:	2401      	movs	r4, #1
 80090c2:	e7e1      	b.n	8009088 <xTaskNotifyWait+0x54>
 80090c4:	20000808 	.word	0x20000808
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090cc:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <prvGetNextExpireTime+0x1c>)
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	6813      	ldr	r3, [r2, #0]
 80090d2:	b92b      	cbnz	r3, 80090e0 <prvGetNextExpireTime+0x14>
 80090d4:	2301      	movs	r3, #1
 80090d6:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 80090d8:	b923      	cbnz	r3, 80090e4 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090da:	68d3      	ldr	r3, [r2, #12]
 80090dc:	6818      	ldr	r0, [r3, #0]
 80090de:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80090e0:	2300      	movs	r3, #0
 80090e2:	e7f8      	b.n	80090d6 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090e4:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 80090e6:	4770      	bx	lr
 80090e8:	20000934 	.word	0x20000934

080090ec <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090ec:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090ee:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090f0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090f2:	4291      	cmp	r1, r2
 80090f4:	d80c      	bhi.n	8009110 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	6983      	ldr	r3, [r0, #24]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d301      	bcc.n	8009102 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090fe:	2001      	movs	r0, #1
 8009100:	e010      	b.n	8009124 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009102:	1d01      	adds	r1, r0, #4
 8009104:	4b09      	ldr	r3, [pc, #36]	; (800912c <prvInsertTimerInActiveList+0x40>)
 8009106:	6818      	ldr	r0, [r3, #0]
 8009108:	f7fe fc85 	bl	8007a16 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800910c:	2000      	movs	r0, #0
 800910e:	e009      	b.n	8009124 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009110:	429a      	cmp	r2, r3
 8009112:	d201      	bcs.n	8009118 <prvInsertTimerInActiveList+0x2c>
 8009114:	4299      	cmp	r1, r3
 8009116:	d206      	bcs.n	8009126 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009118:	1d01      	adds	r1, r0, #4
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <prvInsertTimerInActiveList+0x44>)
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f7fe fc7a 	bl	8007a16 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009122:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8009124:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8009126:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009128:	e7fc      	b.n	8009124 <prvInsertTimerInActiveList+0x38>
 800912a:	bf00      	nop
 800912c:	20000938 	.word	0x20000938
 8009130:	20000934 	.word	0x20000934

08009134 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009134:	b530      	push	{r4, r5, lr}
 8009136:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009138:	f000 fabc 	bl	80096b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800913c:	4b11      	ldr	r3, [pc, #68]	; (8009184 <prvCheckForValidListAndQueue+0x50>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	b11b      	cbz	r3, 800914a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009142:	f000 fad9 	bl	80096f8 <vPortExitCritical>
}
 8009146:	b003      	add	sp, #12
 8009148:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800914a:	4d0f      	ldr	r5, [pc, #60]	; (8009188 <prvCheckForValidListAndQueue+0x54>)
 800914c:	4628      	mov	r0, r5
 800914e:	f7fe fc48 	bl	80079e2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009152:	4c0e      	ldr	r4, [pc, #56]	; (800918c <prvCheckForValidListAndQueue+0x58>)
 8009154:	4620      	mov	r0, r4
 8009156:	f7fe fc44 	bl	80079e2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800915a:	4b0d      	ldr	r3, [pc, #52]	; (8009190 <prvCheckForValidListAndQueue+0x5c>)
 800915c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800915e:	4b0d      	ldr	r3, [pc, #52]	; (8009194 <prvCheckForValidListAndQueue+0x60>)
 8009160:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009162:	2300      	movs	r3, #0
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	4b0c      	ldr	r3, [pc, #48]	; (8009198 <prvCheckForValidListAndQueue+0x64>)
 8009168:	4a0c      	ldr	r2, [pc, #48]	; (800919c <prvCheckForValidListAndQueue+0x68>)
 800916a:	210c      	movs	r1, #12
 800916c:	200a      	movs	r0, #10
 800916e:	f7fe fd7c 	bl	8007c6a <xQueueGenericCreateStatic>
 8009172:	4b04      	ldr	r3, [pc, #16]	; (8009184 <prvCheckForValidListAndQueue+0x50>)
 8009174:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8009176:	2800      	cmp	r0, #0
 8009178:	d0e3      	beq.n	8009142 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800917a:	4909      	ldr	r1, [pc, #36]	; (80091a0 <prvCheckForValidListAndQueue+0x6c>)
 800917c:	f7ff f8aa 	bl	80082d4 <vQueueAddToRegistry>
 8009180:	e7df      	b.n	8009142 <prvCheckForValidListAndQueue+0xe>
 8009182:	bf00      	nop
 8009184:	20000a30 	.word	0x20000a30
 8009188:	200009b4 	.word	0x200009b4
 800918c:	200009c8 	.word	0x200009c8
 8009190:	20000934 	.word	0x20000934
 8009194:	20000938 	.word	0x20000938
 8009198:	200009e0 	.word	0x200009e0
 800919c:	2000093c 	.word	0x2000093c
 80091a0:	0800a858 	.word	0x0800a858

080091a4 <prvInitialiseNewTimer>:
{
 80091a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091a8:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80091aa:	b941      	cbnz	r1, 80091be <prvInitialiseNewTimer+0x1a>
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	e7fe      	b.n	80091bc <prvInitialiseNewTimer+0x18>
 80091be:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
 80091c0:	b1a4      	cbz	r4, 80091ec <prvInitialiseNewTimer+0x48>
 80091c2:	461e      	mov	r6, r3
 80091c4:	4615      	mov	r5, r2
 80091c6:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
 80091c8:	f7ff ffb4 	bl	8009134 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 80091cc:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80091d0:	61a7      	str	r7, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80091d2:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80091d4:	9b06      	ldr	r3, [sp, #24]
 80091d6:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80091d8:	1d20      	adds	r0, r4, #4
 80091da:	f7fe fc0d 	bl	80079f8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80091de:	b12d      	cbz	r5, 80091ec <prvInitialiseNewTimer+0x48>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80091e0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80091e4:	f043 0304 	orr.w	r3, r3, #4
 80091e8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080091f0 <xTimerCreateTimerTask>:
{
 80091f0:	b510      	push	{r4, lr}
 80091f2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80091f4:	f7ff ff9e 	bl	8009134 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80091f8:	4b12      	ldr	r3, [pc, #72]	; (8009244 <xTimerCreateTimerTask+0x54>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	b1cb      	cbz	r3, 8009232 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091fe:	2400      	movs	r4, #0
 8009200:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009202:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009204:	aa07      	add	r2, sp, #28
 8009206:	a906      	add	r1, sp, #24
 8009208:	a805      	add	r0, sp, #20
 800920a:	f7f9 fc9d 	bl	8002b48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800920e:	9b05      	ldr	r3, [sp, #20]
 8009210:	9302      	str	r3, [sp, #8]
 8009212:	9b06      	ldr	r3, [sp, #24]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	2302      	movs	r3, #2
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	4623      	mov	r3, r4
 800921c:	9a07      	ldr	r2, [sp, #28]
 800921e:	490a      	ldr	r1, [pc, #40]	; (8009248 <xTimerCreateTimerTask+0x58>)
 8009220:	480a      	ldr	r0, [pc, #40]	; (800924c <xTimerCreateTimerTask+0x5c>)
 8009222:	f7ff fa27 	bl	8008674 <xTaskCreateStatic>
 8009226:	4b0a      	ldr	r3, [pc, #40]	; (8009250 <xTimerCreateTimerTask+0x60>)
 8009228:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800922a:	b110      	cbz	r0, 8009232 <xTimerCreateTimerTask+0x42>
}
 800922c:	2001      	movs	r0, #1
 800922e:	b008      	add	sp, #32
 8009230:	bd10      	pop	{r4, pc}
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	e7fe      	b.n	8009242 <xTimerCreateTimerTask+0x52>
 8009244:	20000a30 	.word	0x20000a30
 8009248:	0800a860 	.word	0x0800a860
 800924c:	080095cd 	.word	0x080095cd
 8009250:	20000a34 	.word	0x20000a34

08009254 <xTimerCreate>:
	{
 8009254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	4605      	mov	r5, r0
 800925c:	460e      	mov	r6, r1
 800925e:	4617      	mov	r7, r2
 8009260:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009262:	202c      	movs	r0, #44	; 0x2c
 8009264:	f000 fbdc 	bl	8009a20 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009268:	4604      	mov	r4, r0
 800926a:	b158      	cbz	r0, 8009284 <xTimerCreate+0x30>
			pxNewTimer->ucStatus = 0x00;
 800926c:	2300      	movs	r3, #0
 800926e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009272:	9001      	str	r0, [sp, #4]
 8009274:	9b08      	ldr	r3, [sp, #32]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	4643      	mov	r3, r8
 800927a:	463a      	mov	r2, r7
 800927c:	4631      	mov	r1, r6
 800927e:	4628      	mov	r0, r5
 8009280:	f7ff ff90 	bl	80091a4 <prvInitialiseNewTimer>
	}
 8009284:	4620      	mov	r0, r4
 8009286:	b002      	add	sp, #8
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800928c <xTimerCreateStatic>:
	{
 800928c:	b530      	push	{r4, r5, lr}
 800928e:	b085      	sub	sp, #20
 8009290:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009292:	252c      	movs	r5, #44	; 0x2c
 8009294:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009296:	9d03      	ldr	r5, [sp, #12]
 8009298:	2d2c      	cmp	r5, #44	; 0x2c
 800929a:	d008      	beq.n	80092ae <xTimerCreateStatic+0x22>
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	e7fe      	b.n	80092ac <xTimerCreateStatic+0x20>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092ae:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 80092b0:	b944      	cbnz	r4, 80092c4 <xTimerCreateStatic+0x38>
 80092b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	e7fe      	b.n	80092c2 <xTimerCreateStatic+0x36>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80092c4:	2502      	movs	r5, #2
 80092c6:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80092ca:	9401      	str	r4, [sp, #4]
 80092cc:	9d08      	ldr	r5, [sp, #32]
 80092ce:	9500      	str	r5, [sp, #0]
 80092d0:	f7ff ff68 	bl	80091a4 <prvInitialiseNewTimer>
	}
 80092d4:	4620      	mov	r0, r4
 80092d6:	b005      	add	sp, #20
 80092d8:	bd30      	pop	{r4, r5, pc}
	...

080092dc <xTimerGenericCommand>:
	configASSERT( xTimer );
 80092dc:	b1c8      	cbz	r0, 8009312 <xTimerGenericCommand+0x36>
{
 80092de:	b530      	push	{r4, r5, lr}
 80092e0:	b085      	sub	sp, #20
 80092e2:	4615      	mov	r5, r2
 80092e4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 80092e6:	4a17      	ldr	r2, [pc, #92]	; (8009344 <xTimerGenericCommand+0x68>)
 80092e8:	6810      	ldr	r0, [r2, #0]
 80092ea:	b340      	cbz	r0, 800933e <xTimerGenericCommand+0x62>
 80092ec:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 80092ee:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092f0:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092f2:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092f4:	2905      	cmp	r1, #5
 80092f6:	dc1d      	bgt.n	8009334 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092f8:	f7ff fd2e 	bl	8008d58 <xTaskGetSchedulerState>
 80092fc:	2802      	cmp	r0, #2
 80092fe:	d011      	beq.n	8009324 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009300:	2300      	movs	r3, #0
 8009302:	461a      	mov	r2, r3
 8009304:	a901      	add	r1, sp, #4
 8009306:	480f      	ldr	r0, [pc, #60]	; (8009344 <xTimerGenericCommand+0x68>)
 8009308:	6800      	ldr	r0, [r0, #0]
 800930a:	f7fe fd1f 	bl	8007d4c <xQueueGenericSend>
}
 800930e:	b005      	add	sp, #20
 8009310:	bd30      	pop	{r4, r5, pc}
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	e7fe      	b.n	8009322 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009324:	2300      	movs	r3, #0
 8009326:	9a08      	ldr	r2, [sp, #32]
 8009328:	a901      	add	r1, sp, #4
 800932a:	4806      	ldr	r0, [pc, #24]	; (8009344 <xTimerGenericCommand+0x68>)
 800932c:	6800      	ldr	r0, [r0, #0]
 800932e:	f7fe fd0d 	bl	8007d4c <xQueueGenericSend>
 8009332:	e7ec      	b.n	800930e <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009334:	2300      	movs	r3, #0
 8009336:	a901      	add	r1, sp, #4
 8009338:	f7fe fdec 	bl	8007f14 <xQueueGenericSendFromISR>
 800933c:	e7e7      	b.n	800930e <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800933e:	2000      	movs	r0, #0
	return xReturn;
 8009340:	e7e5      	b.n	800930e <xTimerGenericCommand+0x32>
 8009342:	bf00      	nop
 8009344:	20000a30 	.word	0x20000a30

08009348 <prvSwitchTimerLists>:
{
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800934c:	4b1b      	ldr	r3, [pc, #108]	; (80093bc <prvSwitchTimerLists+0x74>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	b362      	cbz	r2, 80093ae <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009358:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800935a:	1d25      	adds	r5, r4, #4
 800935c:	4628      	mov	r0, r5
 800935e:	f7fe fb74 	bl	8007a4a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009362:	6a23      	ldr	r3, [r4, #32]
 8009364:	4620      	mov	r0, r4
 8009366:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009368:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800936c:	f013 0f04 	tst.w	r3, #4
 8009370:	d0ec      	beq.n	800934c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009372:	69a3      	ldr	r3, [r4, #24]
 8009374:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009376:	429e      	cmp	r6, r3
 8009378:	d207      	bcs.n	800938a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800937a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800937c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800937e:	4629      	mov	r1, r5
 8009380:	4b0e      	ldr	r3, [pc, #56]	; (80093bc <prvSwitchTimerLists+0x74>)
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	f7fe fb47 	bl	8007a16 <vListInsert>
 8009388:	e7e0      	b.n	800934c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800938a:	2100      	movs	r1, #0
 800938c:	9100      	str	r1, [sp, #0]
 800938e:	460b      	mov	r3, r1
 8009390:	4632      	mov	r2, r6
 8009392:	4620      	mov	r0, r4
 8009394:	f7ff ffa2 	bl	80092dc <xTimerGenericCommand>
				configASSERT( xResult );
 8009398:	2800      	cmp	r0, #0
 800939a:	d1d7      	bne.n	800934c <prvSwitchTimerLists+0x4>
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	e7fe      	b.n	80093ac <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 80093ae:	4a04      	ldr	r2, [pc, #16]	; (80093c0 <prvSwitchTimerLists+0x78>)
 80093b0:	6810      	ldr	r0, [r2, #0]
 80093b2:	4902      	ldr	r1, [pc, #8]	; (80093bc <prvSwitchTimerLists+0x74>)
 80093b4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80093b6:	6013      	str	r3, [r2, #0]
}
 80093b8:	b002      	add	sp, #8
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	20000934 	.word	0x20000934
 80093c0:	20000938 	.word	0x20000938

080093c4 <prvSampleTimeNow>:
{
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 80093c8:	f7ff fa16 	bl	80087f8 <xTaskGetTickCount>
 80093cc:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80093ce:	4b07      	ldr	r3, [pc, #28]	; (80093ec <prvSampleTimeNow+0x28>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4283      	cmp	r3, r0
 80093d4:	d805      	bhi.n	80093e2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 80093d6:	2300      	movs	r3, #0
 80093d8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 80093da:	4b04      	ldr	r3, [pc, #16]	; (80093ec <prvSampleTimeNow+0x28>)
 80093dc:	601c      	str	r4, [r3, #0]
}
 80093de:	4620      	mov	r0, r4
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 80093e2:	f7ff ffb1 	bl	8009348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093e6:	2301      	movs	r3, #1
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	e7f6      	b.n	80093da <prvSampleTimeNow+0x16>
 80093ec:	200009dc 	.word	0x200009dc

080093f0 <prvProcessExpiredTimer>:
{
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	4605      	mov	r5, r0
 80093f6:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f8:	4b17      	ldr	r3, [pc, #92]	; (8009458 <prvProcessExpiredTimer+0x68>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009400:	1d20      	adds	r0, r4, #4
 8009402:	f7fe fb22 	bl	8007a4a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009406:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800940a:	f013 0f04 	tst.w	r3, #4
 800940e:	d108      	bne.n	8009422 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009410:	f023 0301 	bic.w	r3, r3, #1
 8009414:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009418:	6a23      	ldr	r3, [r4, #32]
 800941a:	4620      	mov	r0, r4
 800941c:	4798      	blx	r3
}
 800941e:	b002      	add	sp, #8
 8009420:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009422:	69a1      	ldr	r1, [r4, #24]
 8009424:	462b      	mov	r3, r5
 8009426:	4632      	mov	r2, r6
 8009428:	4429      	add	r1, r5
 800942a:	4620      	mov	r0, r4
 800942c:	f7ff fe5e 	bl	80090ec <prvInsertTimerInActiveList>
 8009430:	2800      	cmp	r0, #0
 8009432:	d0f1      	beq.n	8009418 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009434:	2100      	movs	r1, #0
 8009436:	9100      	str	r1, [sp, #0]
 8009438:	460b      	mov	r3, r1
 800943a:	462a      	mov	r2, r5
 800943c:	4620      	mov	r0, r4
 800943e:	f7ff ff4d 	bl	80092dc <xTimerGenericCommand>
			configASSERT( xResult );
 8009442:	2800      	cmp	r0, #0
 8009444:	d1e8      	bne.n	8009418 <prvProcessExpiredTimer+0x28>
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	e7fe      	b.n	8009456 <prvProcessExpiredTimer+0x66>
 8009458:	20000934 	.word	0x20000934

0800945c <prvProcessTimerOrBlockTask>:
{
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	4606      	mov	r6, r0
 8009462:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009464:	f7ff f9c0 	bl	80087e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009468:	a801      	add	r0, sp, #4
 800946a:	f7ff ffab 	bl	80093c4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	bb23      	cbnz	r3, 80094bc <prvProcessTimerOrBlockTask+0x60>
 8009472:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009474:	b90c      	cbnz	r4, 800947a <prvProcessTimerOrBlockTask+0x1e>
 8009476:	42b0      	cmp	r0, r6
 8009478:	d217      	bcs.n	80094aa <prvProcessTimerOrBlockTask+0x4e>
				if( xListWasEmpty != pdFALSE )
 800947a:	b124      	cbz	r4, 8009486 <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800947c:	4b11      	ldr	r3, [pc, #68]	; (80094c4 <prvProcessTimerOrBlockTask+0x68>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	b9cb      	cbnz	r3, 80094b8 <prvProcessTimerOrBlockTask+0x5c>
 8009484:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009486:	4622      	mov	r2, r4
 8009488:	1b71      	subs	r1, r6, r5
 800948a:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <prvProcessTimerOrBlockTask+0x6c>)
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f7fe ff35 	bl	80082fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009492:	f7ff fa43 	bl	800891c <xTaskResumeAll>
 8009496:	b998      	cbnz	r0, 80094c0 <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <prvProcessTimerOrBlockTask+0x70>)
 800949a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	e00a      	b.n	80094c0 <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
 80094aa:	f7ff fa37 	bl	800891c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80094ae:	4629      	mov	r1, r5
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7ff ff9d 	bl	80093f0 <prvProcessExpiredTimer>
 80094b6:	e003      	b.n	80094c0 <prvProcessTimerOrBlockTask+0x64>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80094b8:	2400      	movs	r4, #0
 80094ba:	e7e4      	b.n	8009486 <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 80094bc:	f7ff fa2e 	bl	800891c <xTaskResumeAll>
}
 80094c0:	b002      	add	sp, #8
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	20000938 	.word	0x20000938
 80094c8:	20000a30 	.word	0x20000a30
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <prvProcessReceivedCommands>:
{
 80094d0:	b530      	push	{r4, r5, lr}
 80094d2:	b087      	sub	sp, #28
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094d4:	2200      	movs	r2, #0
 80094d6:	a903      	add	r1, sp, #12
 80094d8:	4b3b      	ldr	r3, [pc, #236]	; (80095c8 <prvProcessReceivedCommands+0xf8>)
 80094da:	6818      	ldr	r0, [r3, #0]
 80094dc:	f7fe fd80 	bl	8007fe0 <xQueueReceive>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d06f      	beq.n	80095c4 <prvProcessReceivedCommands+0xf4>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dbf4      	blt.n	80094d4 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094ea:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094ec:	6963      	ldr	r3, [r4, #20]
 80094ee:	b113      	cbz	r3, 80094f6 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094f0:	1d20      	adds	r0, r4, #4
 80094f2:	f7fe faaa 	bl	8007a4a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094f6:	a802      	add	r0, sp, #8
 80094f8:	f7ff ff64 	bl	80093c4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	2b09      	cmp	r3, #9
 8009500:	d8e8      	bhi.n	80094d4 <prvProcessReceivedCommands+0x4>
 8009502:	e8df f003 	tbb	[pc, r3]
 8009506:	0505      	.short	0x0505
 8009508:	51383105 	.word	0x51383105
 800950c:	38310505 	.word	0x38310505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009510:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009514:	f043 0301 	orr.w	r3, r3, #1
 8009518:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800951c:	9904      	ldr	r1, [sp, #16]
 800951e:	69a5      	ldr	r5, [r4, #24]
 8009520:	460b      	mov	r3, r1
 8009522:	4602      	mov	r2, r0
 8009524:	4429      	add	r1, r5
 8009526:	4620      	mov	r0, r4
 8009528:	f7ff fde0 	bl	80090ec <prvInsertTimerInActiveList>
 800952c:	2800      	cmp	r0, #0
 800952e:	d0d1      	beq.n	80094d4 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009530:	6a23      	ldr	r3, [r4, #32]
 8009532:	4620      	mov	r0, r4
 8009534:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009536:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800953a:	f013 0f04 	tst.w	r3, #4
 800953e:	d0c9      	beq.n	80094d4 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009540:	69a2      	ldr	r2, [r4, #24]
 8009542:	2100      	movs	r1, #0
 8009544:	9100      	str	r1, [sp, #0]
 8009546:	460b      	mov	r3, r1
 8009548:	9804      	ldr	r0, [sp, #16]
 800954a:	4402      	add	r2, r0
 800954c:	4620      	mov	r0, r4
 800954e:	f7ff fec5 	bl	80092dc <xTimerGenericCommand>
							configASSERT( xResult );
 8009552:	2800      	cmp	r0, #0
 8009554:	d1be      	bne.n	80094d4 <prvProcessReceivedCommands+0x4>
 8009556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	e7fe      	b.n	8009566 <prvProcessReceivedCommands+0x96>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009568:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009574:	e7ae      	b.n	80094d4 <prvProcessReceivedCommands+0x4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009576:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800957a:	f043 0301 	orr.w	r3, r3, #1
 800957e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009582:	9904      	ldr	r1, [sp, #16]
 8009584:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009586:	b131      	cbz	r1, 8009596 <prvProcessReceivedCommands+0xc6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009588:	4603      	mov	r3, r0
 800958a:	4602      	mov	r2, r0
 800958c:	4401      	add	r1, r0
 800958e:	4620      	mov	r0, r4
 8009590:	f7ff fdac 	bl	80090ec <prvInsertTimerInActiveList>
					break;
 8009594:	e79e      	b.n	80094d4 <prvProcessReceivedCommands+0x4>
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	e7fe      	b.n	80095a6 <prvProcessReceivedCommands+0xd6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80095ac:	f013 0f02 	tst.w	r3, #2
 80095b0:	d004      	beq.n	80095bc <prvProcessReceivedCommands+0xec>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095b2:	f023 0301 	bic.w	r3, r3, #1
 80095b6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80095ba:	e78b      	b.n	80094d4 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 fab3 	bl	8009b28 <vPortFree>
 80095c2:	e787      	b.n	80094d4 <prvProcessReceivedCommands+0x4>
}
 80095c4:	b007      	add	sp, #28
 80095c6:	bd30      	pop	{r4, r5, pc}
 80095c8:	20000a30 	.word	0x20000a30

080095cc <prvTimerTask>:
{
 80095cc:	b500      	push	{lr}
 80095ce:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095d0:	a801      	add	r0, sp, #4
 80095d2:	f7ff fd7b 	bl	80090cc <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095d6:	9901      	ldr	r1, [sp, #4]
 80095d8:	f7ff ff40 	bl	800945c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 80095dc:	f7ff ff78 	bl	80094d0 <prvProcessReceivedCommands>
 80095e0:	e7f6      	b.n	80095d0 <prvTimerTask+0x4>
	...

080095e4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095e4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80095e6:	2300      	movs	r3, #0
 80095e8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <prvTaskExitError+0x3c>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d008      	beq.n	8009606 <prvTaskExitError+0x22>
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	e7fe      	b.n	8009604 <prvTaskExitError+0x20>
 8009606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009616:	9b01      	ldr	r3, [sp, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d0fc      	beq.n	8009616 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800961c:	b002      	add	sp, #8
 800961e:	4770      	bx	lr
 8009620:	2000003c 	.word	0x2000003c

08009624 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009624:	4808      	ldr	r0, [pc, #32]	; (8009648 <prvPortStartFirstTask+0x24>)
 8009626:	6800      	ldr	r0, [r0, #0]
 8009628:	6800      	ldr	r0, [r0, #0]
 800962a:	f380 8808 	msr	MSP, r0
 800962e:	f04f 0000 	mov.w	r0, #0
 8009632:	f380 8814 	msr	CONTROL, r0
 8009636:	b662      	cpsie	i
 8009638:	b661      	cpsie	f
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	df00      	svc	0
 8009644:	bf00      	nop
 8009646:	0000      	.short	0x0000
 8009648:	e000ed08 	.word	0xe000ed08

0800964c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800964c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800965c <vPortEnableVFP+0x10>
 8009650:	6801      	ldr	r1, [r0, #0]
 8009652:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009656:	6001      	str	r1, [r0, #0]
 8009658:	4770      	bx	lr
 800965a:	0000      	.short	0x0000
 800965c:	e000ed88 	.word	0xe000ed88

08009660 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009664:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009668:	f021 0101 	bic.w	r1, r1, #1
 800966c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009670:	4b05      	ldr	r3, [pc, #20]	; (8009688 <pxPortInitialiseStack+0x28>)
 8009672:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009676:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800967a:	f06f 0302 	mvn.w	r3, #2
 800967e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009682:	3844      	subs	r0, #68	; 0x44
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	080095e5 	.word	0x080095e5
 800968c:	00000000 	.word	0x00000000

08009690 <SVC_Handler>:
	__asm volatile (
 8009690:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <pxCurrentTCBConst2>)
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	6808      	ldr	r0, [r1, #0]
 8009696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	f380 8809 	msr	PSP, r0
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8811 	msr	BASEPRI, r0
 80096aa:	4770      	bx	lr
 80096ac:	f3af 8000 	nop.w

080096b0 <pxCurrentTCBConst2>:
 80096b0:	20000808 	.word	0x20000808

080096b4 <vPortEnterCritical>:
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80096c4:	4a0a      	ldr	r2, [pc, #40]	; (80096f0 <vPortEnterCritical+0x3c>)
 80096c6:	6813      	ldr	r3, [r2, #0]
 80096c8:	3301      	adds	r3, #1
 80096ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d000      	beq.n	80096d2 <vPortEnterCritical+0x1e>
}
 80096d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096d2:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <vPortEnterCritical+0x40>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80096da:	d0f9      	beq.n	80096d0 <vPortEnterCritical+0x1c>
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	e7fe      	b.n	80096ec <vPortEnterCritical+0x38>
 80096ee:	bf00      	nop
 80096f0:	2000003c 	.word	0x2000003c
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80096f8:	4b09      	ldr	r3, [pc, #36]	; (8009720 <vPortExitCritical+0x28>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	b943      	cbnz	r3, 8009710 <vPortExitCritical+0x18>
 80096fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	e7fe      	b.n	800970e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009710:	3b01      	subs	r3, #1
 8009712:	4a03      	ldr	r2, [pc, #12]	; (8009720 <vPortExitCritical+0x28>)
 8009714:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009716:	b90b      	cbnz	r3, 800971c <vPortExitCritical+0x24>
	__asm volatile
 8009718:	f383 8811 	msr	BASEPRI, r3
}
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	2000003c 	.word	0x2000003c
	...

08009730 <PendSV_Handler>:
	__asm volatile
 8009730:	f3ef 8009 	mrs	r0, PSP
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	4b15      	ldr	r3, [pc, #84]	; (8009790 <pxCurrentTCBConst>)
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	f01e 0f10 	tst.w	lr, #16
 8009740:	bf08      	it	eq
 8009742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	6010      	str	r0, [r2, #0]
 800974c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009754:	f380 8811 	msr	BASEPRI, r0
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f7ff f9ce 	bl	8008b00 <vTaskSwitchContext>
 8009764:	f04f 0000 	mov.w	r0, #0
 8009768:	f380 8811 	msr	BASEPRI, r0
 800976c:	bc09      	pop	{r0, r3}
 800976e:	6819      	ldr	r1, [r3, #0]
 8009770:	6808      	ldr	r0, [r1, #0]
 8009772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009776:	f01e 0f10 	tst.w	lr, #16
 800977a:	bf08      	it	eq
 800977c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009780:	f380 8809 	msr	PSP, r0
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	f3af 8000 	nop.w

08009790 <pxCurrentTCBConst>:
 8009790:	20000808 	.word	0x20000808

08009794 <SysTick_Handler>:
{
 8009794:	b508      	push	{r3, lr}
	__asm volatile
 8009796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979a:	f383 8811 	msr	BASEPRI, r3
 800979e:	f3bf 8f6f 	isb	sy
 80097a2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80097a6:	f7ff f82d 	bl	8008804 <xTaskIncrementTick>
 80097aa:	b118      	cbz	r0, 80097b4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <SysTick_Handler+0x28>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80097b4:	2300      	movs	r3, #0
 80097b6:	f383 8811 	msr	BASEPRI, r3
}
 80097ba:	bd08      	pop	{r3, pc}
 80097bc:	e000ed04 	.word	0xe000ed04

080097c0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097c0:	4a08      	ldr	r2, [pc, #32]	; (80097e4 <vPortSetupTimerInterrupt+0x24>)
 80097c2:	2300      	movs	r3, #0
 80097c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097c6:	4908      	ldr	r1, [pc, #32]	; (80097e8 <vPortSetupTimerInterrupt+0x28>)
 80097c8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097ca:	4b08      	ldr	r3, [pc, #32]	; (80097ec <vPortSetupTimerInterrupt+0x2c>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4908      	ldr	r1, [pc, #32]	; (80097f0 <vPortSetupTimerInterrupt+0x30>)
 80097d0:	fba1 1303 	umull	r1, r3, r1, r3
 80097d4:	099b      	lsrs	r3, r3, #6
 80097d6:	3b01      	subs	r3, #1
 80097d8:	4906      	ldr	r1, [pc, #24]	; (80097f4 <vPortSetupTimerInterrupt+0x34>)
 80097da:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097dc:	2307      	movs	r3, #7
 80097de:	6013      	str	r3, [r2, #0]
}
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	e000e010 	.word	0xe000e010
 80097e8:	e000e018 	.word	0xe000e018
 80097ec:	20000030 	.word	0x20000030
 80097f0:	10624dd3 	.word	0x10624dd3
 80097f4:	e000e014 	.word	0xe000e014

080097f8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097f8:	4b3a      	ldr	r3, [pc, #232]	; (80098e4 <xPortStartScheduler+0xec>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	4b3a      	ldr	r3, [pc, #232]	; (80098e8 <xPortStartScheduler+0xf0>)
 80097fe:	429a      	cmp	r2, r3
 8009800:	d00d      	beq.n	800981e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009802:	4b38      	ldr	r3, [pc, #224]	; (80098e4 <xPortStartScheduler+0xec>)
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	4b39      	ldr	r3, [pc, #228]	; (80098ec <xPortStartScheduler+0xf4>)
 8009808:	429a      	cmp	r2, r3
 800980a:	d111      	bne.n	8009830 <xPortStartScheduler+0x38>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	e7fe      	b.n	800981c <xPortStartScheduler+0x24>
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	e7fe      	b.n	800982e <xPortStartScheduler+0x36>
{
 8009830:	b510      	push	{r4, lr}
 8009832:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009834:	4b2e      	ldr	r3, [pc, #184]	; (80098f0 <xPortStartScheduler+0xf8>)
 8009836:	781a      	ldrb	r2, [r3, #0]
 8009838:	b2d2      	uxtb	r2, r2
 800983a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800983c:	22ff      	movs	r2, #255	; 0xff
 800983e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009848:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800984c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009850:	4a28      	ldr	r2, [pc, #160]	; (80098f4 <xPortStartScheduler+0xfc>)
 8009852:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009854:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <xPortStartScheduler+0x100>)
 8009856:	2207      	movs	r2, #7
 8009858:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800985a:	e009      	b.n	8009870 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800985c:	4a26      	ldr	r2, [pc, #152]	; (80098f8 <xPortStartScheduler+0x100>)
 800985e:	6813      	ldr	r3, [r2, #0]
 8009860:	3b01      	subs	r3, #1
 8009862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009864:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009870:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009874:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009878:	d1f0      	bne.n	800985c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800987a:	4b1f      	ldr	r3, [pc, #124]	; (80098f8 <xPortStartScheduler+0x100>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b03      	cmp	r3, #3
 8009880:	d008      	beq.n	8009894 <xPortStartScheduler+0x9c>
 8009882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	e7fe      	b.n	8009892 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009894:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800989a:	4a17      	ldr	r2, [pc, #92]	; (80098f8 <xPortStartScheduler+0x100>)
 800989c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800989e:	9b01      	ldr	r3, [sp, #4]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	4a13      	ldr	r2, [pc, #76]	; (80098f0 <xPortStartScheduler+0xf8>)
 80098a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098a6:	4b15      	ldr	r3, [pc, #84]	; (80098fc <xPortStartScheduler+0x104>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80098ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80098b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80098b8:	f7ff ff82 	bl	80097c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80098bc:	2400      	movs	r4, #0
 80098be:	4b10      	ldr	r3, [pc, #64]	; (8009900 <xPortStartScheduler+0x108>)
 80098c0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80098c2:	f7ff fec3 	bl	800964c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098c6:	4a0f      	ldr	r2, [pc, #60]	; (8009904 <xPortStartScheduler+0x10c>)
 80098c8:	6813      	ldr	r3, [r2, #0]
 80098ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80098ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80098d0:	f7ff fea8 	bl	8009624 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80098d4:	f7ff f914 	bl	8008b00 <vTaskSwitchContext>
	prvTaskExitError();
 80098d8:	f7ff fe84 	bl	80095e4 <prvTaskExitError>
}
 80098dc:	4620      	mov	r0, r4
 80098de:	b002      	add	sp, #8
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	bf00      	nop
 80098e4:	e000ed00 	.word	0xe000ed00
 80098e8:	410fc271 	.word	0x410fc271
 80098ec:	410fc270 	.word	0x410fc270
 80098f0:	e000e400 	.word	0xe000e400
 80098f4:	20000a38 	.word	0x20000a38
 80098f8:	20000a3c 	.word	0x20000a3c
 80098fc:	e000ed20 	.word	0xe000ed20
 8009900:	2000003c 	.word	0x2000003c
 8009904:	e000ef34 	.word	0xe000ef34

08009908 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009908:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800990c:	2b0f      	cmp	r3, #15
 800990e:	d90f      	bls.n	8009930 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009910:	4a10      	ldr	r2, [pc, #64]	; (8009954 <vPortValidateInterruptPriority+0x4c>)
 8009912:	5c9b      	ldrb	r3, [r3, r2]
 8009914:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009916:	4a10      	ldr	r2, [pc, #64]	; (8009958 <vPortValidateInterruptPriority+0x50>)
 8009918:	7812      	ldrb	r2, [r2, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d908      	bls.n	8009930 <vPortValidateInterruptPriority+0x28>
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	e7fe      	b.n	800992e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009930:	4b0a      	ldr	r3, [pc, #40]	; (800995c <vPortValidateInterruptPriority+0x54>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009938:	4a09      	ldr	r2, [pc, #36]	; (8009960 <vPortValidateInterruptPriority+0x58>)
 800993a:	6812      	ldr	r2, [r2, #0]
 800993c:	4293      	cmp	r3, r2
 800993e:	d908      	bls.n	8009952 <vPortValidateInterruptPriority+0x4a>
 8009940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009944:	f383 8811 	msr	BASEPRI, r3
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	f3bf 8f4f 	dsb	sy
 8009950:	e7fe      	b.n	8009950 <vPortValidateInterruptPriority+0x48>
	}
 8009952:	4770      	bx	lr
 8009954:	e000e3f0 	.word	0xe000e3f0
 8009958:	20000a38 	.word	0x20000a38
 800995c:	e000ed0c 	.word	0xe000ed0c
 8009960:	20000a3c 	.word	0x20000a3c

08009964 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009964:	4a12      	ldr	r2, [pc, #72]	; (80099b0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009966:	f012 0f07 	tst.w	r2, #7
 800996a:	d01e      	beq.n	80099aa <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800996c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800996e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009972:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 8009976:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009978:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800997a:	480e      	ldr	r0, [pc, #56]	; (80099b4 <prvHeapInit+0x50>)
 800997c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800997e:	2100      	movs	r1, #0
 8009980:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009982:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009984:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009986:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800998a:	480b      	ldr	r0, [pc, #44]	; (80099b8 <prvHeapInit+0x54>)
 800998c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800998e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009990:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009992:	1a99      	subs	r1, r3, r2
 8009994:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009996:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009998:	4b08      	ldr	r3, [pc, #32]	; (80099bc <prvHeapInit+0x58>)
 800999a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800999c:	4b08      	ldr	r3, [pc, #32]	; (80099c0 <prvHeapInit+0x5c>)
 800999e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099a0:	4b08      	ldr	r3, [pc, #32]	; (80099c4 <prvHeapInit+0x60>)
 80099a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099a6:	601a      	str	r2, [r3, #0]
}
 80099a8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099ae:	e7e4      	b.n	800997a <prvHeapInit+0x16>
 80099b0:	20000a44 	.word	0x20000a44
 80099b4:	20002a50 	.word	0x20002a50
 80099b8:	20000a40 	.word	0x20000a40
 80099bc:	20002a4c 	.word	0x20002a4c
 80099c0:	20002a48 	.word	0x20002a48
 80099c4:	20002a44 	.word	0x20002a44

080099c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099c8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099ca:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <prvInsertBlockIntoFreeList+0x50>)
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	4282      	cmp	r2, r0
 80099d0:	d31b      	bcc.n	8009a0a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099d2:	6859      	ldr	r1, [r3, #4]
 80099d4:	185c      	adds	r4, r3, r1
 80099d6:	4284      	cmp	r4, r0
 80099d8:	d103      	bne.n	80099e2 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099da:	6840      	ldr	r0, [r0, #4]
 80099dc:	4401      	add	r1, r0
 80099de:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099e0:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099e2:	6841      	ldr	r1, [r0, #4]
 80099e4:	1844      	adds	r4, r0, r1
 80099e6:	42a2      	cmp	r2, r4
 80099e8:	d113      	bne.n	8009a12 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ea:	4c0c      	ldr	r4, [pc, #48]	; (8009a1c <prvInsertBlockIntoFreeList+0x54>)
 80099ec:	6824      	ldr	r4, [r4, #0]
 80099ee:	42a2      	cmp	r2, r4
 80099f0:	d00d      	beq.n	8009a0e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099f2:	6852      	ldr	r2, [r2, #4]
 80099f4:	4411      	add	r1, r2
 80099f6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099fe:	4298      	cmp	r0, r3
 8009a00:	d000      	beq.n	8009a04 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a02:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a08:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	e7de      	b.n	80099cc <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a0e:	6004      	str	r4, [r0, #0]
 8009a10:	e7f5      	b.n	80099fe <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a12:	6002      	str	r2, [r0, #0]
 8009a14:	e7f3      	b.n	80099fe <prvInsertBlockIntoFreeList+0x36>
 8009a16:	bf00      	nop
 8009a18:	20002a50 	.word	0x20002a50
 8009a1c:	20000a40 	.word	0x20000a40

08009a20 <pvPortMalloc>:
{
 8009a20:	b570      	push	{r4, r5, r6, lr}
 8009a22:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009a24:	f7fe fee0 	bl	80087e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009a28:	4b3a      	ldr	r3, [pc, #232]	; (8009b14 <pvPortMalloc+0xf4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	b1bb      	cbz	r3, 8009a5e <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a2e:	4b3a      	ldr	r3, [pc, #232]	; (8009b18 <pvPortMalloc+0xf8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	421c      	tst	r4, r3
 8009a34:	d163      	bne.n	8009afe <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8009a36:	b1ac      	cbz	r4, 8009a64 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8009a38:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a3a:	f014 0f07 	tst.w	r4, #7
 8009a3e:	d011      	beq.n	8009a64 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a40:	f024 0407 	bic.w	r4, r4, #7
 8009a44:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a46:	f004 0307 	and.w	r3, r4, #7
 8009a4a:	b15b      	cbz	r3, 8009a64 <pvPortMalloc+0x44>
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	e7fe      	b.n	8009a5c <pvPortMalloc+0x3c>
			prvHeapInit();
 8009a5e:	f7ff ff81 	bl	8009964 <prvHeapInit>
 8009a62:	e7e4      	b.n	8009a2e <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a64:	2c00      	cmp	r4, #0
 8009a66:	d04c      	beq.n	8009b02 <pvPortMalloc+0xe2>
 8009a68:	4b2c      	ldr	r3, [pc, #176]	; (8009b1c <pvPortMalloc+0xfc>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	d34a      	bcc.n	8009b06 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8009a70:	4b2b      	ldr	r3, [pc, #172]	; (8009b20 <pvPortMalloc+0x100>)
 8009a72:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a74:	e001      	b.n	8009a7a <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8009a76:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a78:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a7a:	686a      	ldr	r2, [r5, #4]
 8009a7c:	42a2      	cmp	r2, r4
 8009a7e:	d202      	bcs.n	8009a86 <pvPortMalloc+0x66>
 8009a80:	682a      	ldr	r2, [r5, #0]
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	d1f7      	bne.n	8009a76 <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8009a86:	4a23      	ldr	r2, [pc, #140]	; (8009b14 <pvPortMalloc+0xf4>)
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	42aa      	cmp	r2, r5
 8009a8c:	d03d      	beq.n	8009b0a <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a8e:	681e      	ldr	r6, [r3, #0]
 8009a90:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a92:	682a      	ldr	r2, [r5, #0]
 8009a94:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a96:	686b      	ldr	r3, [r5, #4]
 8009a98:	1b1b      	subs	r3, r3, r4
 8009a9a:	2b10      	cmp	r3, #16
 8009a9c:	d910      	bls.n	8009ac0 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a9e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa0:	f010 0f07 	tst.w	r0, #7
 8009aa4:	d008      	beq.n	8009ab8 <pvPortMalloc+0x98>
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	e7fe      	b.n	8009ab6 <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ab8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009aba:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009abc:	f7ff ff84 	bl	80099c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ac0:	686a      	ldr	r2, [r5, #4]
 8009ac2:	4916      	ldr	r1, [pc, #88]	; (8009b1c <pvPortMalloc+0xfc>)
 8009ac4:	680b      	ldr	r3, [r1, #0]
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009aca:	4916      	ldr	r1, [pc, #88]	; (8009b24 <pvPortMalloc+0x104>)
 8009acc:	6809      	ldr	r1, [r1, #0]
 8009ace:	428b      	cmp	r3, r1
 8009ad0:	d201      	bcs.n	8009ad6 <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ad2:	4914      	ldr	r1, [pc, #80]	; (8009b24 <pvPortMalloc+0x104>)
 8009ad4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ad6:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <pvPortMalloc+0xf8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009ae2:	f7fe ff1b 	bl	800891c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae6:	f016 0f07 	tst.w	r6, #7
 8009aea:	d010      	beq.n	8009b0e <pvPortMalloc+0xee>
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	e7fe      	b.n	8009afc <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8009afe:	2600      	movs	r6, #0
 8009b00:	e7ef      	b.n	8009ae2 <pvPortMalloc+0xc2>
 8009b02:	2600      	movs	r6, #0
 8009b04:	e7ed      	b.n	8009ae2 <pvPortMalloc+0xc2>
 8009b06:	2600      	movs	r6, #0
 8009b08:	e7eb      	b.n	8009ae2 <pvPortMalloc+0xc2>
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	e7e9      	b.n	8009ae2 <pvPortMalloc+0xc2>
}
 8009b0e:	4630      	mov	r0, r6
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
 8009b12:	bf00      	nop
 8009b14:	20000a40 	.word	0x20000a40
 8009b18:	20002a44 	.word	0x20002a44
 8009b1c:	20002a48 	.word	0x20002a48
 8009b20:	20002a50 	.word	0x20002a50
 8009b24:	20002a4c 	.word	0x20002a4c

08009b28 <vPortFree>:
	if( pv != NULL )
 8009b28:	b380      	cbz	r0, 8009b8c <vPortFree+0x64>
{
 8009b2a:	b538      	push	{r3, r4, r5, lr}
 8009b2c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009b2e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b32:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009b36:	4916      	ldr	r1, [pc, #88]	; (8009b90 <vPortFree+0x68>)
 8009b38:	6809      	ldr	r1, [r1, #0]
 8009b3a:	420a      	tst	r2, r1
 8009b3c:	d108      	bne.n	8009b50 <vPortFree+0x28>
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	e7fe      	b.n	8009b4e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b50:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8009b54:	b140      	cbz	r0, 8009b68 <vPortFree+0x40>
 8009b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5a:	f383 8811 	msr	BASEPRI, r3
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	f3bf 8f4f 	dsb	sy
 8009b66:	e7fe      	b.n	8009b66 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b68:	ea22 0201 	bic.w	r2, r2, r1
 8009b6c:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8009b70:	f7fe fe3a 	bl	80087e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b74:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009b78:	4a06      	ldr	r2, [pc, #24]	; (8009b94 <vPortFree+0x6c>)
 8009b7a:	6813      	ldr	r3, [r2, #0]
 8009b7c:	440b      	add	r3, r1
 8009b7e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b80:	4628      	mov	r0, r5
 8009b82:	f7ff ff21 	bl	80099c8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8009b86:	f7fe fec9 	bl	800891c <xTaskResumeAll>
}
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20002a44 	.word	0x20002a44
 8009b94:	20002a48 	.word	0x20002a48

08009b98 <__errno>:
 8009b98:	4b01      	ldr	r3, [pc, #4]	; (8009ba0 <__errno+0x8>)
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	20000040 	.word	0x20000040

08009ba4 <__libc_init_array>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	4e0d      	ldr	r6, [pc, #52]	; (8009bdc <__libc_init_array+0x38>)
 8009ba8:	4c0d      	ldr	r4, [pc, #52]	; (8009be0 <__libc_init_array+0x3c>)
 8009baa:	1ba4      	subs	r4, r4, r6
 8009bac:	10a4      	asrs	r4, r4, #2
 8009bae:	2500      	movs	r5, #0
 8009bb0:	42a5      	cmp	r5, r4
 8009bb2:	d109      	bne.n	8009bc8 <__libc_init_array+0x24>
 8009bb4:	4e0b      	ldr	r6, [pc, #44]	; (8009be4 <__libc_init_array+0x40>)
 8009bb6:	4c0c      	ldr	r4, [pc, #48]	; (8009be8 <__libc_init_array+0x44>)
 8009bb8:	f000 fc28 	bl	800a40c <_init>
 8009bbc:	1ba4      	subs	r4, r4, r6
 8009bbe:	10a4      	asrs	r4, r4, #2
 8009bc0:	2500      	movs	r5, #0
 8009bc2:	42a5      	cmp	r5, r4
 8009bc4:	d105      	bne.n	8009bd2 <__libc_init_array+0x2e>
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bcc:	4798      	blx	r3
 8009bce:	3501      	adds	r5, #1
 8009bd0:	e7ee      	b.n	8009bb0 <__libc_init_array+0xc>
 8009bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bd6:	4798      	blx	r3
 8009bd8:	3501      	adds	r5, #1
 8009bda:	e7f2      	b.n	8009bc2 <__libc_init_array+0x1e>
 8009bdc:	0800a8a4 	.word	0x0800a8a4
 8009be0:	0800a8a4 	.word	0x0800a8a4
 8009be4:	0800a8a4 	.word	0x0800a8a4
 8009be8:	0800a8a8 	.word	0x0800a8a8

08009bec <memcpy>:
 8009bec:	b510      	push	{r4, lr}
 8009bee:	1e43      	subs	r3, r0, #1
 8009bf0:	440a      	add	r2, r1
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	d100      	bne.n	8009bf8 <memcpy+0xc>
 8009bf6:	bd10      	pop	{r4, pc}
 8009bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c00:	e7f7      	b.n	8009bf2 <memcpy+0x6>

08009c02 <memset>:
 8009c02:	4402      	add	r2, r0
 8009c04:	4603      	mov	r3, r0
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d100      	bne.n	8009c0c <memset+0xa>
 8009c0a:	4770      	bx	lr
 8009c0c:	f803 1b01 	strb.w	r1, [r3], #1
 8009c10:	e7f9      	b.n	8009c06 <memset+0x4>
	...

08009c14 <siprintf>:
 8009c14:	b40e      	push	{r1, r2, r3}
 8009c16:	b500      	push	{lr}
 8009c18:	b09c      	sub	sp, #112	; 0x70
 8009c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c1c:	9002      	str	r0, [sp, #8]
 8009c1e:	9006      	str	r0, [sp, #24]
 8009c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c24:	4809      	ldr	r0, [pc, #36]	; (8009c4c <siprintf+0x38>)
 8009c26:	9107      	str	r1, [sp, #28]
 8009c28:	9104      	str	r1, [sp, #16]
 8009c2a:	4909      	ldr	r1, [pc, #36]	; (8009c50 <siprintf+0x3c>)
 8009c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c30:	9105      	str	r1, [sp, #20]
 8009c32:	6800      	ldr	r0, [r0, #0]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	a902      	add	r1, sp, #8
 8009c38:	f000 f866 	bl	8009d08 <_svfiprintf_r>
 8009c3c:	9b02      	ldr	r3, [sp, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	b01c      	add	sp, #112	; 0x70
 8009c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c48:	b003      	add	sp, #12
 8009c4a:	4770      	bx	lr
 8009c4c:	20000040 	.word	0x20000040
 8009c50:	ffff0208 	.word	0xffff0208

08009c54 <__ssputs_r>:
 8009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c58:	688e      	ldr	r6, [r1, #8]
 8009c5a:	429e      	cmp	r6, r3
 8009c5c:	4682      	mov	sl, r0
 8009c5e:	460c      	mov	r4, r1
 8009c60:	4690      	mov	r8, r2
 8009c62:	4699      	mov	r9, r3
 8009c64:	d837      	bhi.n	8009cd6 <__ssputs_r+0x82>
 8009c66:	898a      	ldrh	r2, [r1, #12]
 8009c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c6c:	d031      	beq.n	8009cd2 <__ssputs_r+0x7e>
 8009c6e:	6825      	ldr	r5, [r4, #0]
 8009c70:	6909      	ldr	r1, [r1, #16]
 8009c72:	1a6f      	subs	r7, r5, r1
 8009c74:	6965      	ldr	r5, [r4, #20]
 8009c76:	2302      	movs	r3, #2
 8009c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c80:	f109 0301 	add.w	r3, r9, #1
 8009c84:	443b      	add	r3, r7
 8009c86:	429d      	cmp	r5, r3
 8009c88:	bf38      	it	cc
 8009c8a:	461d      	movcc	r5, r3
 8009c8c:	0553      	lsls	r3, r2, #21
 8009c8e:	d530      	bpl.n	8009cf2 <__ssputs_r+0x9e>
 8009c90:	4629      	mov	r1, r5
 8009c92:	f000 fb21 	bl	800a2d8 <_malloc_r>
 8009c96:	4606      	mov	r6, r0
 8009c98:	b950      	cbnz	r0, 8009cb0 <__ssputs_r+0x5c>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	f8ca 3000 	str.w	r3, [sl]
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb0:	463a      	mov	r2, r7
 8009cb2:	6921      	ldr	r1, [r4, #16]
 8009cb4:	f7ff ff9a 	bl	8009bec <memcpy>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc2:	81a3      	strh	r3, [r4, #12]
 8009cc4:	6126      	str	r6, [r4, #16]
 8009cc6:	6165      	str	r5, [r4, #20]
 8009cc8:	443e      	add	r6, r7
 8009cca:	1bed      	subs	r5, r5, r7
 8009ccc:	6026      	str	r6, [r4, #0]
 8009cce:	60a5      	str	r5, [r4, #8]
 8009cd0:	464e      	mov	r6, r9
 8009cd2:	454e      	cmp	r6, r9
 8009cd4:	d900      	bls.n	8009cd8 <__ssputs_r+0x84>
 8009cd6:	464e      	mov	r6, r9
 8009cd8:	4632      	mov	r2, r6
 8009cda:	4641      	mov	r1, r8
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	f000 fa93 	bl	800a208 <memmove>
 8009ce2:	68a3      	ldr	r3, [r4, #8]
 8009ce4:	1b9b      	subs	r3, r3, r6
 8009ce6:	60a3      	str	r3, [r4, #8]
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	441e      	add	r6, r3
 8009cec:	6026      	str	r6, [r4, #0]
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e7dc      	b.n	8009cac <__ssputs_r+0x58>
 8009cf2:	462a      	mov	r2, r5
 8009cf4:	f000 fb4a 	bl	800a38c <_realloc_r>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d1e2      	bne.n	8009cc4 <__ssputs_r+0x70>
 8009cfe:	6921      	ldr	r1, [r4, #16]
 8009d00:	4650      	mov	r0, sl
 8009d02:	f000 fa9b 	bl	800a23c <_free_r>
 8009d06:	e7c8      	b.n	8009c9a <__ssputs_r+0x46>

08009d08 <_svfiprintf_r>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	461d      	mov	r5, r3
 8009d0e:	898b      	ldrh	r3, [r1, #12]
 8009d10:	061f      	lsls	r7, r3, #24
 8009d12:	b09d      	sub	sp, #116	; 0x74
 8009d14:	4680      	mov	r8, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	4616      	mov	r6, r2
 8009d1a:	d50f      	bpl.n	8009d3c <_svfiprintf_r+0x34>
 8009d1c:	690b      	ldr	r3, [r1, #16]
 8009d1e:	b96b      	cbnz	r3, 8009d3c <_svfiprintf_r+0x34>
 8009d20:	2140      	movs	r1, #64	; 0x40
 8009d22:	f000 fad9 	bl	800a2d8 <_malloc_r>
 8009d26:	6020      	str	r0, [r4, #0]
 8009d28:	6120      	str	r0, [r4, #16]
 8009d2a:	b928      	cbnz	r0, 8009d38 <_svfiprintf_r+0x30>
 8009d2c:	230c      	movs	r3, #12
 8009d2e:	f8c8 3000 	str.w	r3, [r8]
 8009d32:	f04f 30ff 	mov.w	r0, #4294967295
 8009d36:	e0c8      	b.n	8009eca <_svfiprintf_r+0x1c2>
 8009d38:	2340      	movs	r3, #64	; 0x40
 8009d3a:	6163      	str	r3, [r4, #20]
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d40:	2320      	movs	r3, #32
 8009d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d46:	2330      	movs	r3, #48	; 0x30
 8009d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d4c:	9503      	str	r5, [sp, #12]
 8009d4e:	f04f 0b01 	mov.w	fp, #1
 8009d52:	4637      	mov	r7, r6
 8009d54:	463d      	mov	r5, r7
 8009d56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d5a:	b10b      	cbz	r3, 8009d60 <_svfiprintf_r+0x58>
 8009d5c:	2b25      	cmp	r3, #37	; 0x25
 8009d5e:	d13e      	bne.n	8009dde <_svfiprintf_r+0xd6>
 8009d60:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d64:	d00b      	beq.n	8009d7e <_svfiprintf_r+0x76>
 8009d66:	4653      	mov	r3, sl
 8009d68:	4632      	mov	r2, r6
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	f7ff ff71 	bl	8009c54 <__ssputs_r>
 8009d72:	3001      	adds	r0, #1
 8009d74:	f000 80a4 	beq.w	8009ec0 <_svfiprintf_r+0x1b8>
 8009d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7a:	4453      	add	r3, sl
 8009d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7e:	783b      	ldrb	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 809d 	beq.w	8009ec0 <_svfiprintf_r+0x1b8>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f04f 32ff 	mov.w	r2, #4294967295
 8009d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d90:	9304      	str	r3, [sp, #16]
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d98:	931a      	str	r3, [sp, #104]	; 0x68
 8009d9a:	462f      	mov	r7, r5
 8009d9c:	2205      	movs	r2, #5
 8009d9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009da2:	4850      	ldr	r0, [pc, #320]	; (8009ee4 <_svfiprintf_r+0x1dc>)
 8009da4:	f7f6 fa1c 	bl	80001e0 <memchr>
 8009da8:	9b04      	ldr	r3, [sp, #16]
 8009daa:	b9d0      	cbnz	r0, 8009de2 <_svfiprintf_r+0xda>
 8009dac:	06d9      	lsls	r1, r3, #27
 8009dae:	bf44      	itt	mi
 8009db0:	2220      	movmi	r2, #32
 8009db2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009db6:	071a      	lsls	r2, r3, #28
 8009db8:	bf44      	itt	mi
 8009dba:	222b      	movmi	r2, #43	; 0x2b
 8009dbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dc0:	782a      	ldrb	r2, [r5, #0]
 8009dc2:	2a2a      	cmp	r2, #42	; 0x2a
 8009dc4:	d015      	beq.n	8009df2 <_svfiprintf_r+0xea>
 8009dc6:	9a07      	ldr	r2, [sp, #28]
 8009dc8:	462f      	mov	r7, r5
 8009dca:	2000      	movs	r0, #0
 8009dcc:	250a      	movs	r5, #10
 8009dce:	4639      	mov	r1, r7
 8009dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd4:	3b30      	subs	r3, #48	; 0x30
 8009dd6:	2b09      	cmp	r3, #9
 8009dd8:	d94d      	bls.n	8009e76 <_svfiprintf_r+0x16e>
 8009dda:	b1b8      	cbz	r0, 8009e0c <_svfiprintf_r+0x104>
 8009ddc:	e00f      	b.n	8009dfe <_svfiprintf_r+0xf6>
 8009dde:	462f      	mov	r7, r5
 8009de0:	e7b8      	b.n	8009d54 <_svfiprintf_r+0x4c>
 8009de2:	4a40      	ldr	r2, [pc, #256]	; (8009ee4 <_svfiprintf_r+0x1dc>)
 8009de4:	1a80      	subs	r0, r0, r2
 8009de6:	fa0b f000 	lsl.w	r0, fp, r0
 8009dea:	4318      	orrs	r0, r3
 8009dec:	9004      	str	r0, [sp, #16]
 8009dee:	463d      	mov	r5, r7
 8009df0:	e7d3      	b.n	8009d9a <_svfiprintf_r+0x92>
 8009df2:	9a03      	ldr	r2, [sp, #12]
 8009df4:	1d11      	adds	r1, r2, #4
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	9103      	str	r1, [sp, #12]
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	db01      	blt.n	8009e02 <_svfiprintf_r+0xfa>
 8009dfe:	9207      	str	r2, [sp, #28]
 8009e00:	e004      	b.n	8009e0c <_svfiprintf_r+0x104>
 8009e02:	4252      	negs	r2, r2
 8009e04:	f043 0302 	orr.w	r3, r3, #2
 8009e08:	9207      	str	r2, [sp, #28]
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	783b      	ldrb	r3, [r7, #0]
 8009e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8009e10:	d10c      	bne.n	8009e2c <_svfiprintf_r+0x124>
 8009e12:	787b      	ldrb	r3, [r7, #1]
 8009e14:	2b2a      	cmp	r3, #42	; 0x2a
 8009e16:	d133      	bne.n	8009e80 <_svfiprintf_r+0x178>
 8009e18:	9b03      	ldr	r3, [sp, #12]
 8009e1a:	1d1a      	adds	r2, r3, #4
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	9203      	str	r2, [sp, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	bfb8      	it	lt
 8009e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e28:	3702      	adds	r7, #2
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	4d2e      	ldr	r5, [pc, #184]	; (8009ee8 <_svfiprintf_r+0x1e0>)
 8009e2e:	7839      	ldrb	r1, [r7, #0]
 8009e30:	2203      	movs	r2, #3
 8009e32:	4628      	mov	r0, r5
 8009e34:	f7f6 f9d4 	bl	80001e0 <memchr>
 8009e38:	b138      	cbz	r0, 8009e4a <_svfiprintf_r+0x142>
 8009e3a:	2340      	movs	r3, #64	; 0x40
 8009e3c:	1b40      	subs	r0, r0, r5
 8009e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e42:	9b04      	ldr	r3, [sp, #16]
 8009e44:	4303      	orrs	r3, r0
 8009e46:	3701      	adds	r7, #1
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	7839      	ldrb	r1, [r7, #0]
 8009e4c:	4827      	ldr	r0, [pc, #156]	; (8009eec <_svfiprintf_r+0x1e4>)
 8009e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e52:	2206      	movs	r2, #6
 8009e54:	1c7e      	adds	r6, r7, #1
 8009e56:	f7f6 f9c3 	bl	80001e0 <memchr>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d038      	beq.n	8009ed0 <_svfiprintf_r+0x1c8>
 8009e5e:	4b24      	ldr	r3, [pc, #144]	; (8009ef0 <_svfiprintf_r+0x1e8>)
 8009e60:	bb13      	cbnz	r3, 8009ea8 <_svfiprintf_r+0x1a0>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	3307      	adds	r3, #7
 8009e66:	f023 0307 	bic.w	r3, r3, #7
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	9303      	str	r3, [sp, #12]
 8009e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e70:	444b      	add	r3, r9
 8009e72:	9309      	str	r3, [sp, #36]	; 0x24
 8009e74:	e76d      	b.n	8009d52 <_svfiprintf_r+0x4a>
 8009e76:	fb05 3202 	mla	r2, r5, r2, r3
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	e7a6      	b.n	8009dce <_svfiprintf_r+0xc6>
 8009e80:	2300      	movs	r3, #0
 8009e82:	3701      	adds	r7, #1
 8009e84:	9305      	str	r3, [sp, #20]
 8009e86:	4619      	mov	r1, r3
 8009e88:	250a      	movs	r5, #10
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e90:	3a30      	subs	r2, #48	; 0x30
 8009e92:	2a09      	cmp	r2, #9
 8009e94:	d903      	bls.n	8009e9e <_svfiprintf_r+0x196>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0c8      	beq.n	8009e2c <_svfiprintf_r+0x124>
 8009e9a:	9105      	str	r1, [sp, #20]
 8009e9c:	e7c6      	b.n	8009e2c <_svfiprintf_r+0x124>
 8009e9e:	fb05 2101 	mla	r1, r5, r1, r2
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4607      	mov	r7, r0
 8009ea6:	e7f0      	b.n	8009e8a <_svfiprintf_r+0x182>
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	4622      	mov	r2, r4
 8009eae:	4b11      	ldr	r3, [pc, #68]	; (8009ef4 <_svfiprintf_r+0x1ec>)
 8009eb0:	a904      	add	r1, sp, #16
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	f3af 8000 	nop.w
 8009eb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ebc:	4681      	mov	r9, r0
 8009ebe:	d1d6      	bne.n	8009e6e <_svfiprintf_r+0x166>
 8009ec0:	89a3      	ldrh	r3, [r4, #12]
 8009ec2:	065b      	lsls	r3, r3, #25
 8009ec4:	f53f af35 	bmi.w	8009d32 <_svfiprintf_r+0x2a>
 8009ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eca:	b01d      	add	sp, #116	; 0x74
 8009ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed0:	ab03      	add	r3, sp, #12
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4b07      	ldr	r3, [pc, #28]	; (8009ef4 <_svfiprintf_r+0x1ec>)
 8009ed8:	a904      	add	r1, sp, #16
 8009eda:	4640      	mov	r0, r8
 8009edc:	f000 f882 	bl	8009fe4 <_printf_i>
 8009ee0:	e7ea      	b.n	8009eb8 <_svfiprintf_r+0x1b0>
 8009ee2:	bf00      	nop
 8009ee4:	0800a868 	.word	0x0800a868
 8009ee8:	0800a86e 	.word	0x0800a86e
 8009eec:	0800a872 	.word	0x0800a872
 8009ef0:	00000000 	.word	0x00000000
 8009ef4:	08009c55 	.word	0x08009c55

08009ef8 <_printf_common>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	4691      	mov	r9, r2
 8009efe:	461f      	mov	r7, r3
 8009f00:	688a      	ldr	r2, [r1, #8]
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	bfb8      	it	lt
 8009f0c:	4613      	movlt	r3, r2
 8009f0e:	f8c9 3000 	str.w	r3, [r9]
 8009f12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f16:	4606      	mov	r6, r0
 8009f18:	460c      	mov	r4, r1
 8009f1a:	b112      	cbz	r2, 8009f22 <_printf_common+0x2a>
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	f8c9 3000 	str.w	r3, [r9]
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	0699      	lsls	r1, r3, #26
 8009f26:	bf42      	ittt	mi
 8009f28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f2c:	3302      	addmi	r3, #2
 8009f2e:	f8c9 3000 	strmi.w	r3, [r9]
 8009f32:	6825      	ldr	r5, [r4, #0]
 8009f34:	f015 0506 	ands.w	r5, r5, #6
 8009f38:	d107      	bne.n	8009f4a <_printf_common+0x52>
 8009f3a:	f104 0a19 	add.w	sl, r4, #25
 8009f3e:	68e3      	ldr	r3, [r4, #12]
 8009f40:	f8d9 2000 	ldr.w	r2, [r9]
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	42ab      	cmp	r3, r5
 8009f48:	dc28      	bgt.n	8009f9c <_printf_common+0xa4>
 8009f4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	3300      	adds	r3, #0
 8009f52:	bf18      	it	ne
 8009f54:	2301      	movne	r3, #1
 8009f56:	0692      	lsls	r2, r2, #26
 8009f58:	d42d      	bmi.n	8009fb6 <_printf_common+0xbe>
 8009f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f5e:	4639      	mov	r1, r7
 8009f60:	4630      	mov	r0, r6
 8009f62:	47c0      	blx	r8
 8009f64:	3001      	adds	r0, #1
 8009f66:	d020      	beq.n	8009faa <_printf_common+0xb2>
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	68e5      	ldr	r5, [r4, #12]
 8009f6c:	f8d9 2000 	ldr.w	r2, [r9]
 8009f70:	f003 0306 	and.w	r3, r3, #6
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	bf08      	it	eq
 8009f78:	1aad      	subeq	r5, r5, r2
 8009f7a:	68a3      	ldr	r3, [r4, #8]
 8009f7c:	6922      	ldr	r2, [r4, #16]
 8009f7e:	bf0c      	ite	eq
 8009f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f84:	2500      	movne	r5, #0
 8009f86:	4293      	cmp	r3, r2
 8009f88:	bfc4      	itt	gt
 8009f8a:	1a9b      	subgt	r3, r3, r2
 8009f8c:	18ed      	addgt	r5, r5, r3
 8009f8e:	f04f 0900 	mov.w	r9, #0
 8009f92:	341a      	adds	r4, #26
 8009f94:	454d      	cmp	r5, r9
 8009f96:	d11a      	bne.n	8009fce <_printf_common+0xd6>
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e008      	b.n	8009fae <_printf_common+0xb6>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	4652      	mov	r2, sl
 8009fa0:	4639      	mov	r1, r7
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	47c0      	blx	r8
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	d103      	bne.n	8009fb2 <_printf_common+0xba>
 8009faa:	f04f 30ff 	mov.w	r0, #4294967295
 8009fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb2:	3501      	adds	r5, #1
 8009fb4:	e7c3      	b.n	8009f3e <_printf_common+0x46>
 8009fb6:	18e1      	adds	r1, r4, r3
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	2030      	movs	r0, #48	; 0x30
 8009fbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fc0:	4422      	add	r2, r4
 8009fc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fca:	3302      	adds	r3, #2
 8009fcc:	e7c5      	b.n	8009f5a <_printf_common+0x62>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	47c0      	blx	r8
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d0e6      	beq.n	8009faa <_printf_common+0xb2>
 8009fdc:	f109 0901 	add.w	r9, r9, #1
 8009fe0:	e7d8      	b.n	8009f94 <_printf_common+0x9c>
	...

08009fe4 <_printf_i>:
 8009fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009fec:	460c      	mov	r4, r1
 8009fee:	7e09      	ldrb	r1, [r1, #24]
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	296e      	cmp	r1, #110	; 0x6e
 8009ff4:	4617      	mov	r7, r2
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	4698      	mov	r8, r3
 8009ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ffc:	f000 80b3 	beq.w	800a166 <_printf_i+0x182>
 800a000:	d822      	bhi.n	800a048 <_printf_i+0x64>
 800a002:	2963      	cmp	r1, #99	; 0x63
 800a004:	d036      	beq.n	800a074 <_printf_i+0x90>
 800a006:	d80a      	bhi.n	800a01e <_printf_i+0x3a>
 800a008:	2900      	cmp	r1, #0
 800a00a:	f000 80b9 	beq.w	800a180 <_printf_i+0x19c>
 800a00e:	2958      	cmp	r1, #88	; 0x58
 800a010:	f000 8083 	beq.w	800a11a <_printf_i+0x136>
 800a014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a018:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a01c:	e032      	b.n	800a084 <_printf_i+0xa0>
 800a01e:	2964      	cmp	r1, #100	; 0x64
 800a020:	d001      	beq.n	800a026 <_printf_i+0x42>
 800a022:	2969      	cmp	r1, #105	; 0x69
 800a024:	d1f6      	bne.n	800a014 <_printf_i+0x30>
 800a026:	6820      	ldr	r0, [r4, #0]
 800a028:	6813      	ldr	r3, [r2, #0]
 800a02a:	0605      	lsls	r5, r0, #24
 800a02c:	f103 0104 	add.w	r1, r3, #4
 800a030:	d52a      	bpl.n	800a088 <_printf_i+0xa4>
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6011      	str	r1, [r2, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	da03      	bge.n	800a042 <_printf_i+0x5e>
 800a03a:	222d      	movs	r2, #45	; 0x2d
 800a03c:	425b      	negs	r3, r3
 800a03e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a042:	486f      	ldr	r0, [pc, #444]	; (800a200 <_printf_i+0x21c>)
 800a044:	220a      	movs	r2, #10
 800a046:	e039      	b.n	800a0bc <_printf_i+0xd8>
 800a048:	2973      	cmp	r1, #115	; 0x73
 800a04a:	f000 809d 	beq.w	800a188 <_printf_i+0x1a4>
 800a04e:	d808      	bhi.n	800a062 <_printf_i+0x7e>
 800a050:	296f      	cmp	r1, #111	; 0x6f
 800a052:	d020      	beq.n	800a096 <_printf_i+0xb2>
 800a054:	2970      	cmp	r1, #112	; 0x70
 800a056:	d1dd      	bne.n	800a014 <_printf_i+0x30>
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	f043 0320 	orr.w	r3, r3, #32
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	e003      	b.n	800a06a <_printf_i+0x86>
 800a062:	2975      	cmp	r1, #117	; 0x75
 800a064:	d017      	beq.n	800a096 <_printf_i+0xb2>
 800a066:	2978      	cmp	r1, #120	; 0x78
 800a068:	d1d4      	bne.n	800a014 <_printf_i+0x30>
 800a06a:	2378      	movs	r3, #120	; 0x78
 800a06c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a070:	4864      	ldr	r0, [pc, #400]	; (800a204 <_printf_i+0x220>)
 800a072:	e055      	b.n	800a120 <_printf_i+0x13c>
 800a074:	6813      	ldr	r3, [r2, #0]
 800a076:	1d19      	adds	r1, r3, #4
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	6011      	str	r1, [r2, #0]
 800a07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a084:	2301      	movs	r3, #1
 800a086:	e08c      	b.n	800a1a2 <_printf_i+0x1be>
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6011      	str	r1, [r2, #0]
 800a08c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a090:	bf18      	it	ne
 800a092:	b21b      	sxthne	r3, r3
 800a094:	e7cf      	b.n	800a036 <_printf_i+0x52>
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	6825      	ldr	r5, [r4, #0]
 800a09a:	1d18      	adds	r0, r3, #4
 800a09c:	6010      	str	r0, [r2, #0]
 800a09e:	0628      	lsls	r0, r5, #24
 800a0a0:	d501      	bpl.n	800a0a6 <_printf_i+0xc2>
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	e002      	b.n	800a0ac <_printf_i+0xc8>
 800a0a6:	0668      	lsls	r0, r5, #25
 800a0a8:	d5fb      	bpl.n	800a0a2 <_printf_i+0xbe>
 800a0aa:	881b      	ldrh	r3, [r3, #0]
 800a0ac:	4854      	ldr	r0, [pc, #336]	; (800a200 <_printf_i+0x21c>)
 800a0ae:	296f      	cmp	r1, #111	; 0x6f
 800a0b0:	bf14      	ite	ne
 800a0b2:	220a      	movne	r2, #10
 800a0b4:	2208      	moveq	r2, #8
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0bc:	6865      	ldr	r5, [r4, #4]
 800a0be:	60a5      	str	r5, [r4, #8]
 800a0c0:	2d00      	cmp	r5, #0
 800a0c2:	f2c0 8095 	blt.w	800a1f0 <_printf_i+0x20c>
 800a0c6:	6821      	ldr	r1, [r4, #0]
 800a0c8:	f021 0104 	bic.w	r1, r1, #4
 800a0cc:	6021      	str	r1, [r4, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d13d      	bne.n	800a14e <_printf_i+0x16a>
 800a0d2:	2d00      	cmp	r5, #0
 800a0d4:	f040 808e 	bne.w	800a1f4 <_printf_i+0x210>
 800a0d8:	4665      	mov	r5, ip
 800a0da:	2a08      	cmp	r2, #8
 800a0dc:	d10b      	bne.n	800a0f6 <_printf_i+0x112>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	07db      	lsls	r3, r3, #31
 800a0e2:	d508      	bpl.n	800a0f6 <_printf_i+0x112>
 800a0e4:	6923      	ldr	r3, [r4, #16]
 800a0e6:	6862      	ldr	r2, [r4, #4]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	bfde      	ittt	le
 800a0ec:	2330      	movle	r3, #48	; 0x30
 800a0ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0f6:	ebac 0305 	sub.w	r3, ip, r5
 800a0fa:	6123      	str	r3, [r4, #16]
 800a0fc:	f8cd 8000 	str.w	r8, [sp]
 800a100:	463b      	mov	r3, r7
 800a102:	aa03      	add	r2, sp, #12
 800a104:	4621      	mov	r1, r4
 800a106:	4630      	mov	r0, r6
 800a108:	f7ff fef6 	bl	8009ef8 <_printf_common>
 800a10c:	3001      	adds	r0, #1
 800a10e:	d14d      	bne.n	800a1ac <_printf_i+0x1c8>
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	b005      	add	sp, #20
 800a116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a11a:	4839      	ldr	r0, [pc, #228]	; (800a200 <_printf_i+0x21c>)
 800a11c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a120:	6813      	ldr	r3, [r2, #0]
 800a122:	6821      	ldr	r1, [r4, #0]
 800a124:	1d1d      	adds	r5, r3, #4
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6015      	str	r5, [r2, #0]
 800a12a:	060a      	lsls	r2, r1, #24
 800a12c:	d50b      	bpl.n	800a146 <_printf_i+0x162>
 800a12e:	07ca      	lsls	r2, r1, #31
 800a130:	bf44      	itt	mi
 800a132:	f041 0120 	orrmi.w	r1, r1, #32
 800a136:	6021      	strmi	r1, [r4, #0]
 800a138:	b91b      	cbnz	r3, 800a142 <_printf_i+0x15e>
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	f022 0220 	bic.w	r2, r2, #32
 800a140:	6022      	str	r2, [r4, #0]
 800a142:	2210      	movs	r2, #16
 800a144:	e7b7      	b.n	800a0b6 <_printf_i+0xd2>
 800a146:	064d      	lsls	r5, r1, #25
 800a148:	bf48      	it	mi
 800a14a:	b29b      	uxthmi	r3, r3
 800a14c:	e7ef      	b.n	800a12e <_printf_i+0x14a>
 800a14e:	4665      	mov	r5, ip
 800a150:	fbb3 f1f2 	udiv	r1, r3, r2
 800a154:	fb02 3311 	mls	r3, r2, r1, r3
 800a158:	5cc3      	ldrb	r3, [r0, r3]
 800a15a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a15e:	460b      	mov	r3, r1
 800a160:	2900      	cmp	r1, #0
 800a162:	d1f5      	bne.n	800a150 <_printf_i+0x16c>
 800a164:	e7b9      	b.n	800a0da <_printf_i+0xf6>
 800a166:	6813      	ldr	r3, [r2, #0]
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	6961      	ldr	r1, [r4, #20]
 800a16c:	1d18      	adds	r0, r3, #4
 800a16e:	6010      	str	r0, [r2, #0]
 800a170:	0628      	lsls	r0, r5, #24
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	d501      	bpl.n	800a17a <_printf_i+0x196>
 800a176:	6019      	str	r1, [r3, #0]
 800a178:	e002      	b.n	800a180 <_printf_i+0x19c>
 800a17a:	066a      	lsls	r2, r5, #25
 800a17c:	d5fb      	bpl.n	800a176 <_printf_i+0x192>
 800a17e:	8019      	strh	r1, [r3, #0]
 800a180:	2300      	movs	r3, #0
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	4665      	mov	r5, ip
 800a186:	e7b9      	b.n	800a0fc <_printf_i+0x118>
 800a188:	6813      	ldr	r3, [r2, #0]
 800a18a:	1d19      	adds	r1, r3, #4
 800a18c:	6011      	str	r1, [r2, #0]
 800a18e:	681d      	ldr	r5, [r3, #0]
 800a190:	6862      	ldr	r2, [r4, #4]
 800a192:	2100      	movs	r1, #0
 800a194:	4628      	mov	r0, r5
 800a196:	f7f6 f823 	bl	80001e0 <memchr>
 800a19a:	b108      	cbz	r0, 800a1a0 <_printf_i+0x1bc>
 800a19c:	1b40      	subs	r0, r0, r5
 800a19e:	6060      	str	r0, [r4, #4]
 800a1a0:	6863      	ldr	r3, [r4, #4]
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1aa:	e7a7      	b.n	800a0fc <_printf_i+0x118>
 800a1ac:	6923      	ldr	r3, [r4, #16]
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	47c0      	blx	r8
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	d0aa      	beq.n	800a110 <_printf_i+0x12c>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	079b      	lsls	r3, r3, #30
 800a1be:	d413      	bmi.n	800a1e8 <_printf_i+0x204>
 800a1c0:	68e0      	ldr	r0, [r4, #12]
 800a1c2:	9b03      	ldr	r3, [sp, #12]
 800a1c4:	4298      	cmp	r0, r3
 800a1c6:	bfb8      	it	lt
 800a1c8:	4618      	movlt	r0, r3
 800a1ca:	e7a3      	b.n	800a114 <_printf_i+0x130>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	464a      	mov	r2, r9
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	47c0      	blx	r8
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d09a      	beq.n	800a110 <_printf_i+0x12c>
 800a1da:	3501      	adds	r5, #1
 800a1dc:	68e3      	ldr	r3, [r4, #12]
 800a1de:	9a03      	ldr	r2, [sp, #12]
 800a1e0:	1a9b      	subs	r3, r3, r2
 800a1e2:	42ab      	cmp	r3, r5
 800a1e4:	dcf2      	bgt.n	800a1cc <_printf_i+0x1e8>
 800a1e6:	e7eb      	b.n	800a1c0 <_printf_i+0x1dc>
 800a1e8:	2500      	movs	r5, #0
 800a1ea:	f104 0919 	add.w	r9, r4, #25
 800a1ee:	e7f5      	b.n	800a1dc <_printf_i+0x1f8>
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1ac      	bne.n	800a14e <_printf_i+0x16a>
 800a1f4:	7803      	ldrb	r3, [r0, #0]
 800a1f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1fe:	e76c      	b.n	800a0da <_printf_i+0xf6>
 800a200:	0800a879 	.word	0x0800a879
 800a204:	0800a88a 	.word	0x0800a88a

0800a208 <memmove>:
 800a208:	4288      	cmp	r0, r1
 800a20a:	b510      	push	{r4, lr}
 800a20c:	eb01 0302 	add.w	r3, r1, r2
 800a210:	d807      	bhi.n	800a222 <memmove+0x1a>
 800a212:	1e42      	subs	r2, r0, #1
 800a214:	4299      	cmp	r1, r3
 800a216:	d00a      	beq.n	800a22e <memmove+0x26>
 800a218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a21c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a220:	e7f8      	b.n	800a214 <memmove+0xc>
 800a222:	4283      	cmp	r3, r0
 800a224:	d9f5      	bls.n	800a212 <memmove+0xa>
 800a226:	1881      	adds	r1, r0, r2
 800a228:	1ad2      	subs	r2, r2, r3
 800a22a:	42d3      	cmn	r3, r2
 800a22c:	d100      	bne.n	800a230 <memmove+0x28>
 800a22e:	bd10      	pop	{r4, pc}
 800a230:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a234:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a238:	e7f7      	b.n	800a22a <memmove+0x22>
	...

0800a23c <_free_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4605      	mov	r5, r0
 800a240:	2900      	cmp	r1, #0
 800a242:	d045      	beq.n	800a2d0 <_free_r+0x94>
 800a244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a248:	1f0c      	subs	r4, r1, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfb8      	it	lt
 800a24e:	18e4      	addlt	r4, r4, r3
 800a250:	f000 f8d2 	bl	800a3f8 <__malloc_lock>
 800a254:	4a1f      	ldr	r2, [pc, #124]	; (800a2d4 <_free_r+0x98>)
 800a256:	6813      	ldr	r3, [r2, #0]
 800a258:	4610      	mov	r0, r2
 800a25a:	b933      	cbnz	r3, 800a26a <_free_r+0x2e>
 800a25c:	6063      	str	r3, [r4, #4]
 800a25e:	6014      	str	r4, [r2, #0]
 800a260:	4628      	mov	r0, r5
 800a262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a266:	f000 b8c8 	b.w	800a3fa <__malloc_unlock>
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	d90c      	bls.n	800a288 <_free_r+0x4c>
 800a26e:	6821      	ldr	r1, [r4, #0]
 800a270:	1862      	adds	r2, r4, r1
 800a272:	4293      	cmp	r3, r2
 800a274:	bf04      	itt	eq
 800a276:	681a      	ldreq	r2, [r3, #0]
 800a278:	685b      	ldreq	r3, [r3, #4]
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	bf04      	itt	eq
 800a27e:	1852      	addeq	r2, r2, r1
 800a280:	6022      	streq	r2, [r4, #0]
 800a282:	6004      	str	r4, [r0, #0]
 800a284:	e7ec      	b.n	800a260 <_free_r+0x24>
 800a286:	4613      	mov	r3, r2
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	b10a      	cbz	r2, 800a290 <_free_r+0x54>
 800a28c:	42a2      	cmp	r2, r4
 800a28e:	d9fa      	bls.n	800a286 <_free_r+0x4a>
 800a290:	6819      	ldr	r1, [r3, #0]
 800a292:	1858      	adds	r0, r3, r1
 800a294:	42a0      	cmp	r0, r4
 800a296:	d10b      	bne.n	800a2b0 <_free_r+0x74>
 800a298:	6820      	ldr	r0, [r4, #0]
 800a29a:	4401      	add	r1, r0
 800a29c:	1858      	adds	r0, r3, r1
 800a29e:	4282      	cmp	r2, r0
 800a2a0:	6019      	str	r1, [r3, #0]
 800a2a2:	d1dd      	bne.n	800a260 <_free_r+0x24>
 800a2a4:	6810      	ldr	r0, [r2, #0]
 800a2a6:	6852      	ldr	r2, [r2, #4]
 800a2a8:	605a      	str	r2, [r3, #4]
 800a2aa:	4401      	add	r1, r0
 800a2ac:	6019      	str	r1, [r3, #0]
 800a2ae:	e7d7      	b.n	800a260 <_free_r+0x24>
 800a2b0:	d902      	bls.n	800a2b8 <_free_r+0x7c>
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	e7d3      	b.n	800a260 <_free_r+0x24>
 800a2b8:	6820      	ldr	r0, [r4, #0]
 800a2ba:	1821      	adds	r1, r4, r0
 800a2bc:	428a      	cmp	r2, r1
 800a2be:	bf04      	itt	eq
 800a2c0:	6811      	ldreq	r1, [r2, #0]
 800a2c2:	6852      	ldreq	r2, [r2, #4]
 800a2c4:	6062      	str	r2, [r4, #4]
 800a2c6:	bf04      	itt	eq
 800a2c8:	1809      	addeq	r1, r1, r0
 800a2ca:	6021      	streq	r1, [r4, #0]
 800a2cc:	605c      	str	r4, [r3, #4]
 800a2ce:	e7c7      	b.n	800a260 <_free_r+0x24>
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20002a58 	.word	0x20002a58

0800a2d8 <_malloc_r>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	1ccd      	adds	r5, r1, #3
 800a2dc:	f025 0503 	bic.w	r5, r5, #3
 800a2e0:	3508      	adds	r5, #8
 800a2e2:	2d0c      	cmp	r5, #12
 800a2e4:	bf38      	it	cc
 800a2e6:	250c      	movcc	r5, #12
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	db01      	blt.n	800a2f2 <_malloc_r+0x1a>
 800a2ee:	42a9      	cmp	r1, r5
 800a2f0:	d903      	bls.n	800a2fa <_malloc_r+0x22>
 800a2f2:	230c      	movs	r3, #12
 800a2f4:	6033      	str	r3, [r6, #0]
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	f000 f87d 	bl	800a3f8 <__malloc_lock>
 800a2fe:	4a21      	ldr	r2, [pc, #132]	; (800a384 <_malloc_r+0xac>)
 800a300:	6814      	ldr	r4, [r2, #0]
 800a302:	4621      	mov	r1, r4
 800a304:	b991      	cbnz	r1, 800a32c <_malloc_r+0x54>
 800a306:	4c20      	ldr	r4, [pc, #128]	; (800a388 <_malloc_r+0xb0>)
 800a308:	6823      	ldr	r3, [r4, #0]
 800a30a:	b91b      	cbnz	r3, 800a314 <_malloc_r+0x3c>
 800a30c:	4630      	mov	r0, r6
 800a30e:	f000 f863 	bl	800a3d8 <_sbrk_r>
 800a312:	6020      	str	r0, [r4, #0]
 800a314:	4629      	mov	r1, r5
 800a316:	4630      	mov	r0, r6
 800a318:	f000 f85e 	bl	800a3d8 <_sbrk_r>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d124      	bne.n	800a36a <_malloc_r+0x92>
 800a320:	230c      	movs	r3, #12
 800a322:	6033      	str	r3, [r6, #0]
 800a324:	4630      	mov	r0, r6
 800a326:	f000 f868 	bl	800a3fa <__malloc_unlock>
 800a32a:	e7e4      	b.n	800a2f6 <_malloc_r+0x1e>
 800a32c:	680b      	ldr	r3, [r1, #0]
 800a32e:	1b5b      	subs	r3, r3, r5
 800a330:	d418      	bmi.n	800a364 <_malloc_r+0x8c>
 800a332:	2b0b      	cmp	r3, #11
 800a334:	d90f      	bls.n	800a356 <_malloc_r+0x7e>
 800a336:	600b      	str	r3, [r1, #0]
 800a338:	50cd      	str	r5, [r1, r3]
 800a33a:	18cc      	adds	r4, r1, r3
 800a33c:	4630      	mov	r0, r6
 800a33e:	f000 f85c 	bl	800a3fa <__malloc_unlock>
 800a342:	f104 000b 	add.w	r0, r4, #11
 800a346:	1d23      	adds	r3, r4, #4
 800a348:	f020 0007 	bic.w	r0, r0, #7
 800a34c:	1ac3      	subs	r3, r0, r3
 800a34e:	d0d3      	beq.n	800a2f8 <_malloc_r+0x20>
 800a350:	425a      	negs	r2, r3
 800a352:	50e2      	str	r2, [r4, r3]
 800a354:	e7d0      	b.n	800a2f8 <_malloc_r+0x20>
 800a356:	428c      	cmp	r4, r1
 800a358:	684b      	ldr	r3, [r1, #4]
 800a35a:	bf16      	itet	ne
 800a35c:	6063      	strne	r3, [r4, #4]
 800a35e:	6013      	streq	r3, [r2, #0]
 800a360:	460c      	movne	r4, r1
 800a362:	e7eb      	b.n	800a33c <_malloc_r+0x64>
 800a364:	460c      	mov	r4, r1
 800a366:	6849      	ldr	r1, [r1, #4]
 800a368:	e7cc      	b.n	800a304 <_malloc_r+0x2c>
 800a36a:	1cc4      	adds	r4, r0, #3
 800a36c:	f024 0403 	bic.w	r4, r4, #3
 800a370:	42a0      	cmp	r0, r4
 800a372:	d005      	beq.n	800a380 <_malloc_r+0xa8>
 800a374:	1a21      	subs	r1, r4, r0
 800a376:	4630      	mov	r0, r6
 800a378:	f000 f82e 	bl	800a3d8 <_sbrk_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	d0cf      	beq.n	800a320 <_malloc_r+0x48>
 800a380:	6025      	str	r5, [r4, #0]
 800a382:	e7db      	b.n	800a33c <_malloc_r+0x64>
 800a384:	20002a58 	.word	0x20002a58
 800a388:	20002a5c 	.word	0x20002a5c

0800a38c <_realloc_r>:
 800a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38e:	4607      	mov	r7, r0
 800a390:	4614      	mov	r4, r2
 800a392:	460e      	mov	r6, r1
 800a394:	b921      	cbnz	r1, 800a3a0 <_realloc_r+0x14>
 800a396:	4611      	mov	r1, r2
 800a398:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a39c:	f7ff bf9c 	b.w	800a2d8 <_malloc_r>
 800a3a0:	b922      	cbnz	r2, 800a3ac <_realloc_r+0x20>
 800a3a2:	f7ff ff4b 	bl	800a23c <_free_r>
 800a3a6:	4625      	mov	r5, r4
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ac:	f000 f826 	bl	800a3fc <_malloc_usable_size_r>
 800a3b0:	42a0      	cmp	r0, r4
 800a3b2:	d20f      	bcs.n	800a3d4 <_realloc_r+0x48>
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	f7ff ff8e 	bl	800a2d8 <_malloc_r>
 800a3bc:	4605      	mov	r5, r0
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d0f2      	beq.n	800a3a8 <_realloc_r+0x1c>
 800a3c2:	4631      	mov	r1, r6
 800a3c4:	4622      	mov	r2, r4
 800a3c6:	f7ff fc11 	bl	8009bec <memcpy>
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	f7ff ff35 	bl	800a23c <_free_r>
 800a3d2:	e7e9      	b.n	800a3a8 <_realloc_r+0x1c>
 800a3d4:	4635      	mov	r5, r6
 800a3d6:	e7e7      	b.n	800a3a8 <_realloc_r+0x1c>

0800a3d8 <_sbrk_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4c06      	ldr	r4, [pc, #24]	; (800a3f4 <_sbrk_r+0x1c>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4605      	mov	r5, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	f7f9 fb10 	bl	8003a08 <_sbrk>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_sbrk_r+0x1a>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_sbrk_r+0x1a>
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	20003140 	.word	0x20003140

0800a3f8 <__malloc_lock>:
 800a3f8:	4770      	bx	lr

0800a3fa <__malloc_unlock>:
 800a3fa:	4770      	bx	lr

0800a3fc <_malloc_usable_size_r>:
 800a3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a400:	1f18      	subs	r0, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfbc      	itt	lt
 800a406:	580b      	ldrlt	r3, [r1, r0]
 800a408:	18c0      	addlt	r0, r0, r3
 800a40a:	4770      	bx	lr

0800a40c <_init>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	bf00      	nop
 800a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a412:	bc08      	pop	{r3}
 800a414:	469e      	mov	lr, r3
 800a416:	4770      	bx	lr

0800a418 <_fini>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	bf00      	nop
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr
